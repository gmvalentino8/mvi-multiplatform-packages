#import <Foundation/NSArray.h>
#import <Foundation/NSDictionary.h>
#import <Foundation/NSError.h>
#import <Foundation/NSObject.h>
#import <Foundation/NSSet.h>
#import <Foundation/NSString.h>
#import <Foundation/NSValue.h>

@class MVIMKermit, MVIMMainStore, MVIMMainAction, MVIMMainActionToggle, MVIMMainEvent, MVIMMainIntent, MVIMMainIntentToggle, MVIMKotlinUnit, MVIMBaseProcessor<__contravariant STATE, ACTION, RESULT, EVENT>, MVIMMainState, MVIMMainResult, MVIMTask, MVIMMainResultTasks, MVIMMainResultToggled, MVIMLoader<__covariant ACTION>, MVIMKotlinArray<T>, MVIMBaseStore<INTENT, __contravariant ACTION, __contravariant RESULT, STATE, EVENT>, MVIMMainInterpreter, MVIMMainProcessor, MVIMMainReducer, MVIMTaskModel, MVIMHttpClient, MVIMTasks, MVIMQuery<__covariant RowType>, MVIMCreateTaskUseCaseProtocolArgs, MVIMUseCaseArguments, MVIMUseCaseNone, MVIMRemoveTaskUseCaseProtocolArgs, MVIMUpdateTaskUseCaseProtocolArgs, MVIMError, MVIMKotlinThrowable, MVIMErrorBadRequest, MVIMErrorForbidden, MVIMErrorInternal, MVIMErrorNetwork, MVIMErrorNotFound, MVIMErrorRequestTimeout, MVIMErrorUnauthorized, MVIMErrorUnavailable, MVIMErrorUnknown, MVIMErrorUpgradeRequired, MVIMLocalDateTime, MVIMSeverity, MVIMLogger, MVIMKotlinEnum<E>, MVIMTransacterTransaction, MVIMConnectionWrapper, MVIMDatabaseConfiguration, MVIMKotlinByteArray, MVIMScope, MVIMParametersHolder, MVIMKotlinLazyThreadSafetyMode, MVIMModule, MVIMLogger_, MVIMInstanceRegistry, MVIMPropertyRegistry, MVIMScopeRegistry, MVIMKoinApplication, MVIMLevel, MVIMKoin, MVIMGlobalContextKoinInstanceHolder, MVIMInstanceFactory<T>, MVIMKotlinPair<__covariant A, __covariant B>, MVIMScopeDSL, MVIMSingleInstanceFactory<T>, MVIMStringQualifier, MVIMKotlinException, MVIMKind, MVIMBeanDefinition<T>, MVIMCallbacks<T>, MVIMInstanceContext, MVIMTypeInfo, MVIMOutgoingContent, MVIMContentType, MVIMJson, MVIMInstant, MVIMDateTimePeriod, MVIMDatePeriod, MVIMKotlinRuntimeException, MVIMDateTimeUnit, MVIMDateTimeUnitDateBasedMonthBased, MVIMDateTimeUnitDateBasedDayBased, MVIMDateTimeUnitTimeBased, MVIMDateTimeUnitDateBased, MVIMDayOfWeek, MVIMKotlinIllegalArgumentException, MVIMMonth, MVIMLocalDate, MVIMTimeZone, MVIMAbstractPolymorphicSerializer<T>, MVIMZoneOffset, MVIMAttributeKey<T>, MVIMJsonFeature, MVIMJsonFeatureConfig, MVIMLogLevel, MVIMHttpRequestBuilder, MVIMLogging, MVIMLoggingConfig, MVIMHttpClientEngineConfig, MVIMIosClientEngineConfig, MVIMProxyConfig, MVIMKotlinNothing, NSMutableURLRequest, NSURLSessionConfiguration, NSURLSession, NSURLSessionTask, NSURLAuthenticationChallenge, NSURLCredential, MVIMIOException, NSError, MVIMPinnedCertificate, MVIMHttpClientConfig<T>, MVIMHttpClientCall, MVIMCoroutineDispatcher, MVIMHttpReceivePipeline, MVIMHttpRequestPipeline, MVIMHttpResponsePipeline, MVIMHttpSendPipeline, MVIMKotlinIllegalStateException, MVIMHttpResponse, MVIMHttpEngineCall, MVIMKotlinUnsupportedOperationException, MVIMUrl, MVIMHttpStatusCode, MVIMOutgoingContentNoContent, MVIMHttpMethod, MVIMHttpRequestData, MVIMHeadersBuilder, MVIMURLBuilder, MVIMPipelinePhase, MVIMPipeline<TSubject, TContext>, MVIMGMTDate, MVIMHttpProtocolVersion, MVIMFormPart<T>, MVIMInputProvider, MVIMByteReadPacket, MVIMOutgoingContentByteArrayContent, MVIMOutgoingContentWriteChannelContent, MVIMPartData, MVIMHttpResponseData, MVIMHttpResponseContainer, MVIMProxyType, MVIMBodyProgress, MVIMResponseException, MVIMDataConversion, MVIMDataConversionConfiguration, MVIMDefaultRequest, MVIMExpectSuccess, MVIMHttpCallValidator, MVIMHttpCallValidatorConfig, MVIMCharset, MVIMHttpPlainText, MVIMHttpPlainTextConfig, MVIMHttpRedirect, MVIMKotlinCancellationException, MVIMHttpSend, MVIMHttpTimeout, MVIMHttpTimeoutHttpTimeoutCapabilityConfiguration, MVIMUserAgent, MVIMUserAgentConfig, MVIMCookie, MVIMHttpCookies, MVIMHttpCookiesConfig, MVIMResponseObserver, MVIMResponseObserverConfig, MVIMHttpCacheStorage, MVIMHttpCache, MVIMHttpCacheConfig, MVIMHttpCacheEntry, MVIMFrame, MVIMWebSocketExtensionsConfig, MVIMWebSockets, MVIMWebSocketsConfig, MVIMHttpHeadersMap, MVIMConnectionOptions, MVIMHttpMessage, MVIMCloseReasonCodes, MVIMCloseReason, MVIMFrameType, MVIMWebSocketExtensionHeader, MVIMCacheControl_Visibility, MVIMCacheControl_, MVIMHeaderValueParam, MVIMHeaderValueWithParameters, MVIMContentDisposition, MVIMContentRange, MVIMContentRangeBounded, MVIMContentRangeSuffix, MVIMContentRangeTailFrom, MVIMCookieEncoding, MVIMUrlEncodingOption, MVIMHeaderValue, MVIMStringValuesBuilder, MVIMStringValuesImpl, MVIMStringValuesSingleImpl, MVIMParametersBuilder, MVIMRangeUnits, MVIMRangesSpecifier, MVIMKotlinLongRange, MVIMURLProtocol, MVIMHeaderValueEncoding, MVIMHttpAuthHeaderParameterized, MVIMHttpAuthHeader, MVIMCachingOptions, MVIMChannelIOException, MVIMDelegatingConversionServiceConfiguration<T>, MVIMWeekDay, MVIMMonth_, MVIMLock, MVIMMemory, MVIMIoBuffer, MVIMByteOrder, MVIMBuffer, MVIMBytePacketBuilder, MVIMChunkBuffer, MVIMKotlinCharArray, MVIMAbstractOutput, MVIMBytePacketBuilderBase, MVIMBytePacketBuilderPlatformBase, MVIMAbstractInput, MVIMByteReadPacketBase, MVIMByteReadPacketPlatformBase, MVIMSynchronizedObject, MVIMCharsetDecoder, MVIMCharsetEncoder, MVIMMalformedInputException, MVIMPosixException, MVIMJobSupport, MVIMCoroutineStart, MVIMKotlinAbstractCoroutineContextElement, MVIMKotlinAbstractCoroutineContextKey<B, E>, MVIMCoroutineName, MVIMMainCoroutineDispatcher, MVIMTimeoutCancellationException, MVIMBufferOverflow, MVIMKotlinNoSuchElementException, MVIMSharingCommand, MVIMChannelFlow<T>, MVIMAtomicDesc, MVIMLockFreeLinkedListNodePrepareOp, MVIMAtomicOp<__contravariant T>, MVIMOpDescriptor, MVIMLockFreeLinkedListNode, MVIMLockFreeLinkedListNodeAddLastDesc<T>, MVIMLockFreeLinkedListNodeRemoveFirstDesc<T>, MVIMLockFreeLinkedListNodeAbstractAtomicDesc, MVIMSynchronizedObjectLockState, MVIMKotlinAtomicReference<T>, MVIMThreadSafeHeap<T>, MVIMSerializersModule, MVIMJsonConfiguration, MVIMJsonElement, MVIMJsonPrimitive, NSUserDefaults, MVIMAbstractSharedLinkedListNode<T>, MVIMSharedLruCacheCacheEntry<K, V>, MVIMTraceBase, MVIMSynchronizedObjectStatus, MVIMAbstractCollectionSerializer<Element, Collection, Builder>, MVIMTaggedDecoder<Tag>, MVIMTaggedEncoder<Tag>, MVIMSerialKind, MVIMPolymorphicKind, MVIMPrimitiveKind, MVIMStructureKind, MVIMFieldType, MVIMJournalMode, MVIMDatabaseConfigurationExtended, MVIMDatabaseConfigurationLogging, MVIMDatabaseConfigurationLifecycle, MVIMDatabaseConfigurationEncryption, MVIMConcurrentDatabaseConnection, MVIMSqliteDatabase, MVIMOpenFlags, MVIMSqliteDatabaseConfig, MVIMSQLiteException, MVIMSqliteErrorType, MVIMNativeStatement, MVIMNativeDatabaseManager, MVIMNativeDatabaseConnectionTransaction, MVIMNativeDatabaseConnection, MVIMAtomic<V>, NSDate, NSDateComponents, NSTimeZone, MVIMLoggerCompanion, MVIMDefaultClientWebSocketSession, MVIMDispatchers, MVIMHttpRequestBuilderCompanion, MVIMFormBuilder, MVIMHttpResponse_, MVIMHttpStatement, MVIMNetworkAddress, MVIMProxyBuilder, MVIMFrameClose, MVIMFrameText, MVIMHttpStatusCodeCompanion, MVIMContentTypeCompanion, MVIMKotlinLongIterator, MVIMKotlinLongProgression, MVIMKotlinByteIterator, MVIMKotlinAtomicLong, MVIMByteChannelSequentialBase, MVIMKotlinDoubleArray, MVIMKotlinFloatArray, MVIMKotlinIntArray, MVIMKotlinLongArray, MVIMKotlinShortArray, MVIMMemoryCompanion, MVIMSharingStartedCompanion, MVIMKotlinIntIterator, MVIMKotlinIntProgression, MVIMKotlinIntRange, MVIMJsonNull, MVIMJsonArrayBuilder, MVIMJsonObjectBuilder, MVIMAtomicInt, MVIMAtomicLong, MVIMAtomicReference<V>, MVIMThreadLocalRef<T>, MVIMSerializersModuleBuilder, MVIMPolymorphicModuleBuilder<__contravariant Base>, MVIMClassSerialDescriptorBuilder, MVIMKotlinBooleanCompanion, MVIMKotlinByteCompanion, MVIMKotlinCharCompanion, MVIMKotlinDoubleCompanion, MVIMKotlinFloatCompanion, MVIMKotlinIntCompanion, MVIMKotlinLongCompanion, MVIMKotlinShortCompanion, MVIMKotlinStringCompanion, MVIMKotlinUByteCompanion, MVIMKotlinUIntCompanion, MVIMKotlinULongCompanion, MVIMKotlinUShortCompanion, MVIMDatabaseFileContext, MVIMEnumColumnAdapter<T>, MVIMAfterVersion, MVIMTypeQualifier, MVIMHttpTimeoutFeature, MVIMConnectTimeoutException, MVIMSocketTimeoutException, MVIMRequest, MVIMResponse, MVIMKotlinCValuesRef<T>, MVIMSingleThreadDispatcher, MVIMJsonBuilder, NSRecursiveLock, MVIMTraceFormat, MVIMAtomicArray<T>, MVIMKotlinKTypeProjection, MVIMKotlinCharIterator, MVIMKotlinDoubleIterator, MVIMKotlinFloatIterator, MVIMKotlinShortIterator, MVIMKotlinTimeMark, MVIMKotlinAutofreeScope, MVIMKotlinKVariance, MVIMKotlinDeferScope;

@protocol MVIMKotlinCoroutineContext, MVIMCoroutineScope, MVIMStore, MVIMAction, MVIMEvent, MVIMIntent, MVIMInterpreter, MVIMState, MVIMFlow, MVIMProcessor, MVIMSharedFlow, MVIMGetTasksUseCaseProtocol, MVIMUpdateTaskUseCaseProtocol, MVIMResult, MVIMReducer, MVIMJob, MVIMStateFlow, MVIMMiddleware, MVIMTaskRemoteDataSource, MVIMTaskLocalDataSource, MVIMSqlDriver, MVIMTasksQueries, MVIMTransactionWithoutReturn, MVIMTransactionWithReturn, MVIMTransacter, MVIMDb, MVIMSqlDriverSchema, MVIMTaskRepository, MVIMUseCase, MVIMCreateTaskUseCaseProtocol, MVIMRemoveTaskUseCaseProtocol, MVIMKSerializer, MVIMIntentMiddleware, MVIMActionMiddleware, MVIMResultMiddleware, MVIMStateMiddleware, MVIMThrowableStringProvider, MVIMKotlinComparable, MVIMSqlPreparedStatement, MVIMSqlCursor, MVIMCloseable, MVIMDatabaseManager, MVIMColumnAdapter, MVIMQueryListener, MVIMTransactionCallbacks, MVIMKoinScopeComponent, MVIMQualifier, MVIMKotlinKClass, MVIMKotlinLazy, MVIMKoinContext, MVIMScopeCallback, MVIMKoinComponent, MVIMInput, MVIMTypeInfo, MVIMJsonSerializer, MVIMClock, MVIMEncoder, MVIMSerialDescriptor, MVIMSerializationStrategy, MVIMDecoder, MVIMDeserializationStrategy, MVIMCompositeDecoder, MVIMContentTypeMatcher, MVIMHttpClientFeature, MVIMLogger, MVIMHttpClientEngine, MVIMHttpClientEngineFactory, MVIMCloseable_, MVIMHttpClientEngineCapability, MVIMAttributes, MVIMByteReadChannel, MVIMHttpRequest, MVIMKotlinKType, MVIMHeaders, MVIMByteWriteChannel, MVIMHttpMessage, MVIMHttpMessageBuilder, MVIMKotlinSuspendFunction2, MVIMParameters, MVIMKotlinSuspendFunction1, MVIMKotlinIterator, MVIMKotlinIterable, MVIMKotlinSuspendFunction3, MVIMCookiesStorage, MVIMWebSocketExtension, MVIMReceiveChannel, MVIMSendChannel, MVIMWebSocketSession, MVIMClientWebSocketSession, MVIMDeferred, MVIMDefaultWebSocketSession, MVIMKotlinMapEntry, MVIMStringValues, MVIMKotlinSequence, MVIMDisposableHandle, MVIMWebSocketExtensionFactory, MVIMMultiPartData, MVIMNonceManager, MVIMEncoder_, MVIMConversionService, MVIMKotlinCollection, MVIMKotlinMutableIterable, MVIMKotlinMutableCollection, MVIMKotlinMutableIterator, MVIMReadSession, MVIMKotlinAppendable, MVIMByteChannel, MVIMSuspendableReadSession, MVIMObjectPool, MVIMWriterSuspendSession, MVIMChildHandle, MVIMChildJob, MVIMSelectClause0, MVIMKotlinCoroutineContextKey, MVIMKotlinCoroutineContextElement, MVIMWriterSession, MVIMOutput, MVIMParentJob, MVIMSelectInstance, MVIMKotlinSuspendFunction0, MVIMKotlinContinuation, MVIMSelectClause1, MVIMKotlinContinuationInterceptor, MVIMRunnable, MVIMCancellableContinuation, MVIMCopyableThrowable, MVIMSelectClause2, MVIMChannelIterator, MVIMBroadcastChannel, MVIMFlowCollector, MVIMMutableSharedFlow, MVIMSharingStarted, MVIMFusibleFlow, MVIMProducerScope, MVIMMainDispatcherFactory, MVIMSerialFormat, MVIMStringFormat, MVIMCompositeEncoder, MVIMSettingsListener, MVIMSettings, MVIMObservableSettings, MVIMSettingsFactory, MVIMKotlinMutableMapMutableEntry, MVIMLruCache, MVIMSerializersModuleCollector, MVIMKotlinAnnotation, MVIMStatement, MVIMDatabaseConnection, MVIMLogger_, MVIMCursor, MVIMSqliteStatement, MVIMKotlinKProperty, MVIMKotlinClosedRange, MVIMKotlinTimeSource, MVIMReaderJob, MVIMWriterJob, MVIMDigest, MVIMPipelineExecutor, MVIMKotlinNativePlacement, MVIMKotlinNativeFreeablePlacement, MVIMKotlinReadWriteProperty, MVIMKotlinReadOnlyProperty, MVIMCompletableJob, MVIMCompletableDeferred, MVIMCoroutineExceptionHandler, MVIMChannel, MVIMMutableStateFlow, MVIMKotlinSuspendFunction5, MVIMKotlinSuspendFunction4, MVIMKotlinSuspendFunction6, MVIMSelectBuilder, MVIMMutex, MVIMSemaphore, MVIMBinaryFormat, MVIMKotlinKDeclarationContainer, MVIMKotlinKAnnotatedElement, MVIMKotlinKClassifier, MVIMKotlinFunction, MVIMKotlinKCallable;

NS_ASSUME_NONNULL_BEGIN
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunknown-warning-option"
#pragma clang diagnostic ignored "-Wincompatible-property-type"
#pragma clang diagnostic ignored "-Wnullability"

__attribute__((swift_name("KotlinBase")))
@interface MVIMBase : NSObject
- (instancetype)init __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (void)initialize __attribute__((objc_requires_super));
@end;

@interface MVIMBase (MVIMBaseCopying) <NSCopying>
@end;

__attribute__((swift_name("KotlinMutableSet")))
@interface MVIMMutableSet<ObjectType> : NSMutableSet<ObjectType>
@end;

__attribute__((swift_name("KotlinMutableDictionary")))
@interface MVIMMutableDictionary<KeyType, ObjectType> : NSMutableDictionary<KeyType, ObjectType>
@end;

@interface NSError (NSErrorMVIMKotlinException)
@property (readonly) id _Nullable kotlinException;
@end;

__attribute__((swift_name("KotlinNumber")))
@interface MVIMNumber : NSNumber
- (instancetype)initWithChar:(char)value __attribute__((unavailable));
- (instancetype)initWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
- (instancetype)initWithShort:(short)value __attribute__((unavailable));
- (instancetype)initWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
- (instancetype)initWithInt:(int)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
- (instancetype)initWithLong:(long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
- (instancetype)initWithLongLong:(long long)value __attribute__((unavailable));
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
- (instancetype)initWithFloat:(float)value __attribute__((unavailable));
- (instancetype)initWithDouble:(double)value __attribute__((unavailable));
- (instancetype)initWithBool:(BOOL)value __attribute__((unavailable));
- (instancetype)initWithInteger:(NSInteger)value __attribute__((unavailable));
- (instancetype)initWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
+ (instancetype)numberWithChar:(char)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedChar:(unsigned char)value __attribute__((unavailable));
+ (instancetype)numberWithShort:(short)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedShort:(unsigned short)value __attribute__((unavailable));
+ (instancetype)numberWithInt:(int)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInt:(unsigned int)value __attribute__((unavailable));
+ (instancetype)numberWithLong:(long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLong:(unsigned long)value __attribute__((unavailable));
+ (instancetype)numberWithLongLong:(long long)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value __attribute__((unavailable));
+ (instancetype)numberWithFloat:(float)value __attribute__((unavailable));
+ (instancetype)numberWithDouble:(double)value __attribute__((unavailable));
+ (instancetype)numberWithBool:(BOOL)value __attribute__((unavailable));
+ (instancetype)numberWithInteger:(NSInteger)value __attribute__((unavailable));
+ (instancetype)numberWithUnsignedInteger:(NSUInteger)value __attribute__((unavailable));
@end;

__attribute__((swift_name("KotlinByte")))
@interface MVIMByte : MVIMNumber
- (instancetype)initWithChar:(char)value;
+ (instancetype)numberWithChar:(char)value;
@end;

__attribute__((swift_name("KotlinUByte")))
@interface MVIMUByte : MVIMNumber
- (instancetype)initWithUnsignedChar:(unsigned char)value;
+ (instancetype)numberWithUnsignedChar:(unsigned char)value;
@end;

__attribute__((swift_name("KotlinShort")))
@interface MVIMShort : MVIMNumber
- (instancetype)initWithShort:(short)value;
+ (instancetype)numberWithShort:(short)value;
@end;

__attribute__((swift_name("KotlinUShort")))
@interface MVIMUShort : MVIMNumber
- (instancetype)initWithUnsignedShort:(unsigned short)value;
+ (instancetype)numberWithUnsignedShort:(unsigned short)value;
@end;

__attribute__((swift_name("KotlinInt")))
@interface MVIMInt : MVIMNumber
- (instancetype)initWithInt:(int)value;
+ (instancetype)numberWithInt:(int)value;
@end;

__attribute__((swift_name("KotlinUInt")))
@interface MVIMUInt : MVIMNumber
- (instancetype)initWithUnsignedInt:(unsigned int)value;
+ (instancetype)numberWithUnsignedInt:(unsigned int)value;
@end;

__attribute__((swift_name("KotlinLong")))
@interface MVIMLong : MVIMNumber
- (instancetype)initWithLongLong:(long long)value;
+ (instancetype)numberWithLongLong:(long long)value;
@end;

__attribute__((swift_name("KotlinULong")))
@interface MVIMULong : MVIMNumber
- (instancetype)initWithUnsignedLongLong:(unsigned long long)value;
+ (instancetype)numberWithUnsignedLongLong:(unsigned long long)value;
@end;

__attribute__((swift_name("KotlinFloat")))
@interface MVIMFloat : MVIMNumber
- (instancetype)initWithFloat:(float)value;
+ (instancetype)numberWithFloat:(float)value;
@end;

__attribute__((swift_name("KotlinDouble")))
@interface MVIMDouble : MVIMNumber
- (instancetype)initWithDouble:(double)value;
+ (instancetype)numberWithDouble:(double)value;
@end;

__attribute__((swift_name("KotlinBoolean")))
@interface MVIMBoolean : MVIMNumber
- (instancetype)initWithBool:(BOOL)value;
+ (instancetype)numberWithBool:(BOOL)value;
@end;

__attribute__((swift_name("CoroutineScope")))
@protocol MVIMCoroutineScope
@required
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainScope")))
@interface MVIMMainScope : MVIMBase <MVIMCoroutineScope>
- (instancetype)initWithMainContext:(id<MVIMKotlinCoroutineContext>)mainContext log:(MVIMKermit *)log __attribute__((swift_name("init(mainContext:log:)"))) __attribute__((objc_designated_initializer));
- (void)onDestroy __attribute__((swift_name("onDestroy()")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiplatformApplication")))
@interface MVIMMultiplatformApplication : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)multiplatformApplication __attribute__((swift_name("init()")));
- (void)initialize __attribute__((swift_name("initialize()")));
@end;

__attribute__((swift_name("StoreInjector")))
@protocol MVIMStoreInjector
@required
- (id<MVIMStore>)store __attribute__((swift_name("store()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StoreProvider")))
@interface MVIMStoreProvider : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)storeProvider __attribute__((swift_name("init()")));
- (MVIMMainStore *)main __attribute__((swift_name("main()")));
@end;

__attribute__((swift_name("Action")))
@protocol MVIMAction
@required
@end;

__attribute__((swift_name("MainAction")))
@interface MVIMMainAction : MVIMBase <MVIMAction>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainAction.LoadTasks")))
@interface MVIMMainActionLoadTasks : MVIMMainAction
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)loadTasks __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainAction.Toggle")))
@interface MVIMMainActionToggle : MVIMMainAction
- (instancetype)initWithId:(NSString *)id __attribute__((swift_name("init(id:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (MVIMMainActionToggle *)doCopyId:(NSString *)id __attribute__((swift_name("doCopy(id:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@end;

__attribute__((swift_name("Event")))
@protocol MVIMEvent
@required
@end;

__attribute__((swift_name("MainEvent")))
@interface MVIMMainEvent : MVIMBase <MVIMEvent>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainEvent.Test")))
@interface MVIMMainEventTest : MVIMMainEvent
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)test __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("Intent")))
@protocol MVIMIntent
@required
@end;

__attribute__((swift_name("MainIntent")))
@interface MVIMMainIntent : MVIMBase <MVIMIntent>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainIntent.Toggle")))
@interface MVIMMainIntentToggle : MVIMMainIntent
- (instancetype)initWithId:(NSString *)id __attribute__((swift_name("init(id:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (MVIMMainIntentToggle *)doCopyId:(NSString *)id __attribute__((swift_name("doCopy(id:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@end;

__attribute__((swift_name("Interpreter")))
@protocol MVIMInterpreter
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)interpretIntent:(id<MVIMIntent>)intent completionHandler:(void (^)(id<MVIMAction> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("interpret(intent:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainInterpreter")))
@interface MVIMMainInterpreter : MVIMBase <MVIMInterpreter>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)interpretIntent:(MVIMMainIntent *)intent completionHandler:(void (^)(MVIMMainAction * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("interpret(intent:completionHandler:)")));
@end;

__attribute__((swift_name("Processor")))
@protocol MVIMProcessor
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)processState:(id<MVIMState>)state action:(id<MVIMAction>)action completionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("process(state:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)publishEvent:(id<MVIMEvent>)event completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("publish(event:completionHandler:)")));
@property (readonly) id<MVIMFlow> events __attribute__((swift_name("events")));
@end;

__attribute__((swift_name("BaseProcessor")))
@interface MVIMBaseProcessor<__contravariant STATE, ACTION, RESULT, EVENT> : MVIMBase <MVIMProcessor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)publishEvent:(EVENT)event completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("publish(event:completionHandler:)")));
@property (readonly) id<MVIMSharedFlow> events __attribute__((swift_name("events")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainProcessor")))
@interface MVIMMainProcessor : MVIMBaseProcessor<MVIMMainState *, MVIMMainAction *, MVIMMainResult *, MVIMMainEvent *>
- (instancetype)initWithGetTasksUseCase:(id<MVIMGetTasksUseCaseProtocol>)getTasksUseCase updateTaskUseCase:(id<MVIMUpdateTaskUseCaseProtocol>)updateTaskUseCase __attribute__((swift_name("init(getTasksUseCase:updateTaskUseCase:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)processState:(MVIMMainState *)state action:(MVIMMainAction *)action completionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("process(state:action:completionHandler:)")));
@end;

__attribute__((swift_name("Reducer")))
@protocol MVIMReducer
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)reduceState:(id<MVIMState>)state result:(id<MVIMResult>)result completionHandler:(void (^)(id<MVIMState> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("reduce(state:result:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainReducer")))
@interface MVIMMainReducer : MVIMBase <MVIMReducer>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)reduceState:(MVIMMainState *)state result:(MVIMMainResult *)result completionHandler:(void (^)(MVIMMainState * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("reduce(state:result:completionHandler:)")));
@end;

__attribute__((swift_name("Result")))
@protocol MVIMResult
@required
@end;

__attribute__((swift_name("MainResult")))
@interface MVIMMainResult : MVIMBase <MVIMResult>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainResult.Loading")))
@interface MVIMMainResultLoading : MVIMMainResult
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)loading __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainResult.Tasks")))
@interface MVIMMainResultTasks : MVIMMainResult
- (instancetype)initWithData:(NSArray<MVIMTask *> *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSArray<MVIMTask *> *)component1 __attribute__((swift_name("component1()")));
- (MVIMMainResultTasks *)doCopyData:(NSArray<MVIMTask *> *)data __attribute__((swift_name("doCopy(data:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<MVIMTask *> *data __attribute__((swift_name("data")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainResult.Toggled")))
@interface MVIMMainResultToggled : MVIMMainResult
- (instancetype)initWithId:(NSString *)id isCompleted:(BOOL)isCompleted __attribute__((swift_name("init(id:isCompleted:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (BOOL)component2 __attribute__((swift_name("component2()")));
- (MVIMMainResultToggled *)doCopyId:(NSString *)id isCompleted:(BOOL)isCompleted __attribute__((swift_name("doCopy(id:isCompleted:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@end;

__attribute__((swift_name("State")))
@protocol MVIMState
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainState")))
@interface MVIMMainState : MVIMBase <MVIMState>
- (instancetype)initWithIsLoading:(BOOL)isLoading tasks:(NSArray<MVIMTask *> *)tasks __attribute__((swift_name("init(isLoading:tasks:)"))) __attribute__((objc_designated_initializer));
- (BOOL)component1 __attribute__((swift_name("component1()")));
- (NSArray<MVIMTask *> *)component2 __attribute__((swift_name("component2()")));
- (MVIMMainState *)doCopyIsLoading:(BOOL)isLoading tasks:(NSArray<MVIMTask *> *)tasks __attribute__((swift_name("doCopy(isLoading:tasks:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isLoading __attribute__((swift_name("isLoading")));
@property (readonly) NSArray<MVIMTask *> *tasks __attribute__((swift_name("tasks")));
@end;

__attribute__((swift_name("Store")))
@protocol MVIMStore
@required
- (id<MVIMJob>)collectOnState:(void (^)(id<MVIMState>))onState onEvent:(void (^)(id<MVIMEvent>))onEvent __attribute__((swift_name("collect(onState:onEvent:)")));
- (void)dispatchIntent:(id<MVIMIntent>)intent __attribute__((swift_name("dispatch(intent:)")));
- (void)dispose __attribute__((swift_name("dispose()")));
@property (readonly) id<MVIMFlow> events __attribute__((swift_name("events")));
@property (readonly) id<MVIMStateFlow> state __attribute__((swift_name("state")));
@end;

__attribute__((swift_name("BaseStore")))
@interface MVIMBaseStore<INTENT, __contravariant ACTION, __contravariant RESULT, STATE, EVENT> : MVIMBase <MVIMStore>
- (instancetype)initWithInitialState:(STATE)initialState interpreter:(id<MVIMInterpreter>)interpreter processor:(MVIMBaseProcessor<STATE, ACTION, RESULT, EVENT> *)processor reducer:(id<MVIMReducer>)reducer loaders:(MVIMLoader<ACTION> *)loaders middlewares:(MVIMKotlinArray<id<MVIMMiddleware>> *)middlewares __attribute__((swift_name("init(initialState:interpreter:processor:reducer:loaders:middlewares:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMJob>)collectOnState:(void (^)(STATE))onState onEvent:(void (^)(EVENT))onEvent __attribute__((swift_name("collect(onState:onEvent:)")));
- (void)dispatchIntent:(INTENT)intent __attribute__((swift_name("dispatch(intent:)")));
- (void)dispose __attribute__((swift_name("dispose()")));
@property (readonly) id<MVIMSharedFlow> events __attribute__((swift_name("events")));
@property (readonly) id<MVIMStateFlow> state __attribute__((swift_name("state")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainStore")))
@interface MVIMMainStore : MVIMBaseStore<MVIMMainIntent *, MVIMMainAction *, MVIMMainResult *, MVIMMainState *, MVIMMainEvent *>
- (instancetype)initWithInterpreter:(MVIMMainInterpreter *)interpreter processor:(MVIMMainProcessor *)processor reducer:(MVIMMainReducer *)reducer middlewares:(MVIMKotlinArray<id<MVIMMiddleware>> *)middlewares __attribute__((swift_name("init(interpreter:processor:reducer:middlewares:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithInitialState:(id<MVIMState>)initialState interpreter:(id<MVIMInterpreter>)interpreter processor:(MVIMBaseProcessor<id<MVIMState>, id<MVIMAction>, id<MVIMResult>, id<MVIMEvent>> *)processor reducer:(id<MVIMReducer>)reducer loaders:(MVIMLoader<id<MVIMAction>> *)loaders middlewares:(MVIMKotlinArray<id<MVIMMiddleware>> *)middlewares __attribute__((swift_name("init(initialState:interpreter:processor:reducer:loaders:middlewares:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("HttpRequestConfig")))
@protocol MVIMHttpRequestConfig
@required
@property (readonly) NSString * _Nullable authToken __attribute__((swift_name("authToken")));
@property (readonly) NSString *host __attribute__((swift_name("host")));
@end;

__attribute__((swift_name("TaskRemoteDataSource")))
@protocol MVIMTaskRemoteDataSource
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addTaskTask:(MVIMTaskModel *)task completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addTask(task:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getTasksWithCompletionHandler:(void (^)(NSArray<MVIMTaskModel *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getTasks(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)removeTaskId:(NSString *)id completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("removeTask(id:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)updateTaskId:(NSString *)id isComplete:(BOOL)isComplete completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("updateTask(id:isComplete:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TasksApi")))
@interface MVIMTasksApi : MVIMBase <MVIMTaskRemoteDataSource>
- (instancetype)initWithHttpClient:(MVIMHttpClient *)httpClient __attribute__((swift_name("init(httpClient:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addTaskTask:(MVIMTaskModel *)task completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addTask(task:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getTasksWithCompletionHandler:(void (^)(NSArray<MVIMTaskModel *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getTasks(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)removeTaskId:(NSString *)id completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("removeTask(id:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)updateTaskId:(NSString *)id isComplete:(BOOL)isComplete completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("updateTask(id:isComplete:completionHandler:)")));
@end;

__attribute__((swift_name("TaskLocalDataSource")))
@protocol MVIMTaskLocalDataSource
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addTaskTask:(MVIMTaskModel *)task completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addTask(task:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getTasksWithCompletionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getTasks(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)removeTaskId:(NSString *)id completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("removeTask(id:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)updateTaskId:(NSString *)id isComplete:(BOOL)isComplete completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("updateTask(id:isComplete:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TaskDao")))
@interface MVIMTaskDao : MVIMBase <MVIMTaskLocalDataSource>
- (instancetype)initWithSqlDriver:(id<MVIMSqlDriver>)sqlDriver __attribute__((swift_name("init(sqlDriver:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addTaskTask:(MVIMTaskModel *)task completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addTask(task:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getTasksWithCompletionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getTasks(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)removeTaskId:(NSString *)id completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("removeTask(id:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)updateTaskId:(NSString *)id isComplete:(BOOL)isComplete completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("updateTask(id:isComplete:completionHandler:)")));
@end;

__attribute__((swift_name("Transacter")))
@protocol MVIMTransacter
@required
- (void)transactionNoEnclosing:(BOOL)noEnclosing body:(void (^)(id<MVIMTransactionWithoutReturn>))body __attribute__((swift_name("transaction(noEnclosing:body:)")));
- (id _Nullable)transactionWithResultNoEnclosing:(BOOL)noEnclosing bodyWithReturn:(id _Nullable (^)(id<MVIMTransactionWithReturn>))bodyWithReturn __attribute__((swift_name("transactionWithResult(noEnclosing:bodyWithReturn:)")));
@end;

__attribute__((swift_name("Db")))
@protocol MVIMDb <MVIMTransacter>
@required
@property (readonly) id<MVIMTasksQueries> tasksQueries __attribute__((swift_name("tasksQueries")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DbCompanion")))
@interface MVIMDbCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMDb>)invokeDriver:(id<MVIMSqlDriver>)driver __attribute__((swift_name("invoke(driver:)")));
@property (readonly) id<MVIMSqlDriverSchema> Schema __attribute__((swift_name("Schema")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Tasks")))
@interface MVIMTasks : MVIMBase
- (instancetype)initWithId:(NSString *)id title:(NSString *)title description:(NSString *)description date:(NSString *)date is_complete:(BOOL)is_complete __attribute__((swift_name("init(id:title:description:date:is_complete:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (NSString *)component3 __attribute__((swift_name("component3()")));
- (NSString *)component4 __attribute__((swift_name("component4()")));
- (BOOL)component5 __attribute__((swift_name("component5()")));
- (MVIMTasks *)doCopyId:(NSString *)id title:(NSString *)title description:(NSString *)description date:(NSString *)date is_complete:(BOOL)is_complete __attribute__((swift_name("doCopy(id:title:description:date:is_complete:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *date __attribute__((swift_name("date")));
@property (readonly) NSString *description_ __attribute__((swift_name("description_")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL is_complete __attribute__((swift_name("is_complete")));
@property (readonly) NSString *title __attribute__((swift_name("title")));
@end;

__attribute__((swift_name("TasksQueries")))
@protocol MVIMTasksQueries <MVIMTransacter>
@required
- (void)addTaskTasks:(MVIMTasks *)Tasks __attribute__((swift_name("addTask(Tasks:)")));
- (void)deleteTaskId:(NSString *)id __attribute__((swift_name("deleteTask(id:)")));
- (MVIMQuery<MVIMTasks *> *)getTasks __attribute__((swift_name("getTasks()")));
- (MVIMQuery<id> *)getTasksMapper:(id (^)(NSString *, NSString *, NSString *, NSString *, MVIMBoolean *))mapper __attribute__((swift_name("getTasks(mapper:)")));
- (void)updateTaskIsComplete:(BOOL)isComplete id:(NSString *)id __attribute__((swift_name("updateTask(isComplete:id:)")));
@end;

__attribute__((swift_name("TaskRepository")))
@protocol MVIMTaskRepository
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addTaskTask:(MVIMTask *)task completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addTask(task:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteTaskId:(NSString *)id completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("deleteTask(id:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getTasksWithCompletionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getTasks(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)updateTaskId:(NSString *)id isComplete:(BOOL)isComplete completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("updateTask(id:isComplete:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TaskDataRepository")))
@interface MVIMTaskDataRepository : MVIMBase <MVIMTaskRepository>
- (instancetype)initWithLocalDataSource:(id<MVIMTaskLocalDataSource>)localDataSource remoteDataSource:(id<MVIMTaskRemoteDataSource>)remoteDataSource __attribute__((swift_name("init(localDataSource:remoteDataSource:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addTaskTask:(MVIMTask *)task completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addTask(task:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteTaskId:(NSString *)id completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("deleteTask(id:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getTasksWithCompletionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getTasks(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)updateTaskId:(NSString *)id isComplete:(BOOL)isComplete completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("updateTask(id:isComplete:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TaskMapper")))
@interface MVIMTaskMapper : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)taskMapper __attribute__((swift_name("init()")));
- (MVIMTaskModel *)entityToModelEntity:(MVIMTask *)entity __attribute__((swift_name("entityToModel(entity:)")));
- (MVIMTask *)modelToEntityModel:(MVIMTaskModel *)model __attribute__((swift_name("modelToEntity(model:)")));
@end;

__attribute__((swift_name("UseCase")))
@protocol MVIMUseCase
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeArguments:(id _Nullable)arguments completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(arguments:completionHandler:)")));
@end;

__attribute__((swift_name("CreateTaskUseCaseProtocol")))
@protocol MVIMCreateTaskUseCaseProtocol <MVIMUseCase>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CreateTaskUseCase")))
@interface MVIMCreateTaskUseCase : MVIMBase <MVIMCreateTaskUseCaseProtocol>
- (instancetype)initWithRepository:(id<MVIMTaskRepository>)repository __attribute__((swift_name("init(repository:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeArguments:(MVIMCreateTaskUseCaseProtocolArgs *)arguments completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(arguments:completionHandler:)")));
@end;

__attribute__((swift_name("UseCaseArguments")))
@interface MVIMUseCaseArguments : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CreateTaskUseCaseProtocolArgs")))
@interface MVIMCreateTaskUseCaseProtocolArgs : MVIMUseCaseArguments
- (instancetype)initWithTask:(MVIMTask *)task __attribute__((swift_name("init(task:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (MVIMTask *)component1 __attribute__((swift_name("component1()")));
- (MVIMCreateTaskUseCaseProtocolArgs *)doCopyTask:(MVIMTask *)task __attribute__((swift_name("doCopy(task:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMTask *task __attribute__((swift_name("task")));
@end;

__attribute__((swift_name("GetTasksUseCaseProtocol")))
@protocol MVIMGetTasksUseCaseProtocol <MVIMUseCase>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GetTasksUseCase")))
@interface MVIMGetTasksUseCase : MVIMBase <MVIMGetTasksUseCaseProtocol>
- (instancetype)initWithRepository:(id<MVIMTaskRepository>)repository __attribute__((swift_name("init(repository:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeArguments:(MVIMUseCaseNone *)arguments completionHandler:(void (^)(id<MVIMFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(arguments:completionHandler:)")));
@end;

__attribute__((swift_name("RemoveTaskUseCaseProtocol")))
@protocol MVIMRemoveTaskUseCaseProtocol <MVIMUseCase>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RemoveTaskUseCase")))
@interface MVIMRemoveTaskUseCase : MVIMBase <MVIMRemoveTaskUseCaseProtocol>
- (instancetype)initWithRepository:(id<MVIMTaskRepository>)repository __attribute__((swift_name("init(repository:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeArguments:(MVIMRemoveTaskUseCaseProtocolArgs *)arguments completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(arguments:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RemoveTaskUseCaseProtocolArgs")))
@interface MVIMRemoveTaskUseCaseProtocolArgs : MVIMUseCaseArguments
- (instancetype)initWithId:(NSString *)id __attribute__((swift_name("init(id:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (MVIMRemoveTaskUseCaseProtocolArgs *)doCopyId:(NSString *)id __attribute__((swift_name("doCopy(id:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@end;

__attribute__((swift_name("UpdateTaskUseCaseProtocol")))
@protocol MVIMUpdateTaskUseCaseProtocol <MVIMUseCase>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UpdateTaskUseCase")))
@interface MVIMUpdateTaskUseCase : MVIMBase <MVIMUpdateTaskUseCaseProtocol>
- (instancetype)initWithRepository:(id<MVIMTaskRepository>)repository __attribute__((swift_name("init(repository:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeArguments:(MVIMUpdateTaskUseCaseProtocolArgs *)arguments completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(arguments:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UpdateTaskUseCaseProtocolArgs")))
@interface MVIMUpdateTaskUseCaseProtocolArgs : MVIMUseCaseArguments
- (instancetype)initWithId:(NSString *)id isComplete:(BOOL)isComplete __attribute__((swift_name("init(id:isComplete:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (BOOL)component2 __attribute__((swift_name("component2()")));
- (MVIMUpdateTaskUseCaseProtocolArgs *)doCopyId:(NSString *)id isComplete:(BOOL)isComplete __attribute__((swift_name("doCopy(id:isComplete:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isComplete __attribute__((swift_name("isComplete")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UseCaseNone")))
@interface MVIMUseCaseNone : MVIMUseCaseArguments
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)none __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("ErrorRepository")))
@protocol MVIMErrorRepository
@required
- (MVIMError *)getErrorThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("getError(throwable:)")));
@end;

__attribute__((swift_name("KotlinThrowable")))
@interface MVIMKotlinThrowable : MVIMBase
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinArray<NSString *> *)getStackTrace __attribute__((swift_name("getStackTrace()")));
- (void)printStackTrace __attribute__((swift_name("printStackTrace()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((swift_name("Error")))
@interface MVIMError : MVIMKotlinThrowable
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.BadRequest")))
@interface MVIMErrorBadRequest : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorBadRequest *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.Forbidden")))
@interface MVIMErrorForbidden : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorForbidden *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.Internal")))
@interface MVIMErrorInternal : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorInternal *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.Network")))
@interface MVIMErrorNetwork : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorNetwork *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.NotFound")))
@interface MVIMErrorNotFound : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorNotFound *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.RequestTimeout")))
@interface MVIMErrorRequestTimeout : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorRequestTimeout *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.Unauthorized")))
@interface MVIMErrorUnauthorized : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorUnauthorized *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.Unavailable")))
@interface MVIMErrorUnavailable : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorUnavailable *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.Unknown")))
@interface MVIMErrorUnknown : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorUnknown *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Error.UpgradeRequired")))
@interface MVIMErrorUpgradeRequired : MVIMError
- (instancetype)initWithThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("init(throwable:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinThrowable *)component1 __attribute__((swift_name("component1()")));
- (MVIMErrorUpgradeRequired *)doCopyThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("doCopy(throwable:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinThrowable *throwable __attribute__((swift_name("throwable")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Task")))
@interface MVIMTask : MVIMBase
- (instancetype)initWithId:(NSString *)id title:(NSString *)title details:(NSString *)details date:(MVIMLocalDateTime *)date isComplete:(BOOL)isComplete __attribute__((swift_name("init(id:title:details:date:isComplete:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (NSString *)component3 __attribute__((swift_name("component3()")));
- (MVIMLocalDateTime *)component4 __attribute__((swift_name("component4()")));
- (BOOL)component5 __attribute__((swift_name("component5()")));
- (MVIMTask *)doCopyId:(NSString *)id title:(NSString *)title details:(NSString *)details date:(MVIMLocalDateTime *)date isComplete:(BOOL)isComplete __attribute__((swift_name("doCopy(id:title:details:date:isComplete:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLocalDateTime *date __attribute__((swift_name("date")));
@property (readonly) NSString *details __attribute__((swift_name("details")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isComplete __attribute__((swift_name("isComplete")));
@property (readonly) NSString *title __attribute__((swift_name("title")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TaskModel")))
@interface MVIMTaskModel : MVIMBase
- (instancetype)initWithId:(NSString *)id title:(NSString *)title details:(NSString *)details date:(MVIMLocalDateTime *)date isComplete:(BOOL)isComplete __attribute__((swift_name("init(id:title:details:date:isComplete:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (NSString *)component3 __attribute__((swift_name("component3()")));
- (MVIMLocalDateTime *)component4 __attribute__((swift_name("component4()")));
- (BOOL)component5 __attribute__((swift_name("component5()")));
- (MVIMTaskModel *)doCopyId:(NSString *)id title:(NSString *)title details:(NSString *)details date:(MVIMLocalDateTime *)date isComplete:(BOOL)isComplete __attribute__((swift_name("doCopy(id:title:details:date:isComplete:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLocalDateTime *date __attribute__((swift_name("date")));
@property (readonly) NSString *details __attribute__((swift_name("details")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isComplete __attribute__((swift_name("isComplete")));
@property (readonly) NSString *title __attribute__((swift_name("title")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TaskModel.Companion")))
@interface MVIMTaskModelCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("Middleware")))
@protocol MVIMMiddleware
@required
@end;

__attribute__((swift_name("ActionMiddleware")))
@protocol MVIMActionMiddleware <MVIMMiddleware>
@required
- (id<MVIMAction>)transformAction:(id<MVIMAction>)action __attribute__((swift_name("transform(action:)")));
@end;

__attribute__((swift_name("IntentMiddleware")))
@protocol MVIMIntentMiddleware <MVIMMiddleware>
@required
- (id<MVIMIntent>)transformIntent:(id<MVIMIntent>)intent __attribute__((swift_name("transform(intent:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Loader")))
@interface MVIMLoader<__covariant ACTION> : MVIMBase
- (instancetype)initWithActions:(MVIMKotlinArray<ACTION> *)actions __attribute__((swift_name("init(actions:)"))) __attribute__((objc_designated_initializer));
@property (readonly) MVIMKotlinArray<ACTION> *actions __attribute__((swift_name("actions")));
@end;

__attribute__((swift_name("ResultMiddleware")))
@protocol MVIMResultMiddleware <MVIMMiddleware>
@required
- (id<MVIMResult>)transformResult:(id<MVIMResult>)result __attribute__((swift_name("transform(result:)")));
@end;

__attribute__((swift_name("StateMiddleware")))
@protocol MVIMStateMiddleware <MVIMMiddleware>
@required
- (id<MVIMState>)transformState:(id<MVIMState>)state __attribute__((swift_name("transform(state:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggingMiddleware")))
@interface MVIMLoggingMiddleware : MVIMBase <MVIMIntentMiddleware, MVIMActionMiddleware, MVIMResultMiddleware, MVIMStateMiddleware>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)loggingMiddleware __attribute__((swift_name("init()")));
- (id<MVIMAction>)transformAction:(id<MVIMAction>)action __attribute__((swift_name("transform(action:)")));
- (id<MVIMIntent>)transformIntent:(id<MVIMIntent>)intent __attribute__((swift_name("transform(intent:)")));
- (id<MVIMResult>)transformResult:(id<MVIMResult>)result __attribute__((swift_name("transform(result:)")));
- (id<MVIMState>)transformState:(id<MVIMState>)state __attribute__((swift_name("transform(state:)")));
@end;

__attribute__((swift_name("Logger")))
@interface MVIMLogger : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)dMessage:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("d(message:tag:throwable:)")));
- (void)eMessage:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("e(message:tag:throwable:)")));
- (void)iMessage:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("i(message:tag:throwable:)")));
- (BOOL)isLoggableSeverity:(MVIMSeverity *)severity __attribute__((swift_name("isLoggable(severity:)")));
- (void)logSeverity:(MVIMSeverity *)severity message:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("log(severity:message:tag:throwable:)")));
- (void)vMessage:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("v(message:tag:throwable:)")));
- (void)wMessage:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("w(message:tag:throwable:)")));
- (void)wtfMessage:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("wtf(message:tag:throwable:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CommonLogger")))
@interface MVIMCommonLogger : MVIMLogger
- (instancetype)initWithThrowableStringProvider:(id<MVIMThrowableStringProvider>)throwableStringProvider __attribute__((swift_name("init(throwableStringProvider:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)logSeverity:(MVIMSeverity *)severity message:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("log(severity:message:tag:throwable:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kermit")))
@interface MVIMKermit : MVIMBase
- (instancetype)initWithLoggers:(MVIMKotlinArray<MVIMLogger *> *)loggers __attribute__((swift_name("init(loggers:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLogger:(MVIMLogger *)logger __attribute__((swift_name("init(logger:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLoggerList:(NSArray<MVIMLogger *> *)loggerList defaultTag:(NSString *)defaultTag __attribute__((swift_name("init(loggerList:defaultTag:)"))) __attribute__((objc_designated_initializer));
- (void)dWithMessage:(NSString *(^)(void))withMessage __attribute__((swift_name("d(withMessage:)")));
- (void)dWithTag:(NSString *)withTag message:(NSString *(^)(void))message __attribute__((swift_name("d(withTag:message:)")));
- (void)dTag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("d(tag:throwable:message:)")));
- (void)dWithThrowable:(MVIMKotlinThrowable * _Nullable)withThrowable message:(NSString *(^)(void))message __attribute__((swift_name("d(withThrowable:message:)")));
- (void)eWithMessage:(NSString *(^)(void))withMessage __attribute__((swift_name("e(withMessage:)")));
- (void)eWithTag:(NSString *)withTag message:(NSString *(^)(void))message __attribute__((swift_name("e(withTag:message:)")));
- (void)eTag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("e(tag:throwable:message:)")));
- (void)eWithThrowable:(MVIMKotlinThrowable * _Nullable)withThrowable message:(NSString *(^)(void))message __attribute__((swift_name("e(withThrowable:message:)")));
- (void)iWithMessage:(NSString *(^)(void))withMessage __attribute__((swift_name("i(withMessage:)")));
- (void)iWithTag:(NSString *)withTag message:(NSString *(^)(void))message __attribute__((swift_name("i(withTag:message:)")));
- (void)iTag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("i(tag:throwable:message:)")));
- (void)iWithThrowable:(MVIMKotlinThrowable * _Nullable)withThrowable message:(NSString *(^)(void))message __attribute__((swift_name("i(withThrowable:message:)")));
- (void)logSeverity:(MVIMSeverity *)severity tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("log(severity:tag:throwable:message:)")));
- (void)vWithMessage:(NSString *(^)(void))withMessage __attribute__((swift_name("v(withMessage:)")));
- (void)vWithTag:(NSString *)withTag message:(NSString *(^)(void))message __attribute__((swift_name("v(withTag:message:)")));
- (void)vTag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("v(tag:throwable:message:)")));
- (void)vWithThrowable:(MVIMKotlinThrowable *)withThrowable message:(NSString *(^)(void))message __attribute__((swift_name("v(withThrowable:message:)")));
- (void)wWithMessage:(NSString *(^)(void))withMessage __attribute__((swift_name("w(withMessage:)")));
- (void)wWithTag:(NSString *)withTag message:(NSString *(^)(void))message __attribute__((swift_name("w(withTag:message:)")));
- (void)wTag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("w(tag:throwable:message:)")));
- (void)wWithThrowable:(MVIMKotlinThrowable * _Nullable)withThrowable message:(NSString *(^)(void))message __attribute__((swift_name("w(withThrowable:message:)")));
- (MVIMKermit *)withTagDefaultTag:(NSString *)defaultTag __attribute__((swift_name("withTag(defaultTag:)")));
- (void)wtfWithMessage:(NSString *(^)(void))withMessage __attribute__((swift_name("wtf(withMessage:)")));
- (void)wtfWithTag:(NSString *)withTag message:(NSString *(^)(void))message __attribute__((swift_name("wtf(withTag:message:)")));
- (void)wtfTag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable message:(NSString *(^)(void))message __attribute__((swift_name("wtf(tag:throwable:message:)")));
- (void)wtfWithThrowable:(MVIMKotlinThrowable * _Nullable)withThrowable message:(NSString *(^)(void))message __attribute__((swift_name("wtf(withThrowable:message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NSLogLogger")))
@interface MVIMNSLogLogger : MVIMLogger
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)logSeverity:(MVIMSeverity *)severity message:(NSString *)message tag:(NSString *)tag throwable:(MVIMKotlinThrowable * _Nullable)throwable __attribute__((swift_name("log(severity:message:tag:throwable:)")));
@end;

__attribute__((swift_name("ThrowableStringProvider")))
@protocol MVIMThrowableStringProvider
@required
- (NSString *)getThrowableStringThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("getThrowableString(throwable:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlatformThrowableStringProvider")))
@interface MVIMPlatformThrowableStringProvider : MVIMBase <MVIMThrowableStringProvider>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)getThrowableStringThrowable:(MVIMKotlinThrowable *)throwable __attribute__((swift_name("getThrowableString(throwable:)")));
@end;

__attribute__((swift_name("KotlinComparable")))
@protocol MVIMKotlinComparable
@required
- (int32_t)compareToOther:(id _Nullable)other __attribute__((swift_name("compareTo(other:)")));
@end;

__attribute__((swift_name("KotlinEnum")))
@interface MVIMKotlinEnum<E> : MVIMBase <MVIMKotlinComparable>
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer));
- (int32_t)compareToOther:(E)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) int32_t ordinal __attribute__((swift_name("ordinal")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Severity")))
@interface MVIMSeverity : MVIMKotlinEnum<MVIMSeverity *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMSeverity *verbose __attribute__((swift_name("verbose")));
@property (class, readonly) MVIMSeverity *debug __attribute__((swift_name("debug")));
@property (class, readonly) MVIMSeverity *info __attribute__((swift_name("info")));
@property (class, readonly) MVIMSeverity *warn __attribute__((swift_name("warn")));
@property (class, readonly) MVIMSeverity *error __attribute__((swift_name("error")));
@property (class, readonly) MVIMSeverity *assert __attribute__((swift_name("assert")));
+ (MVIMKotlinArray<MVIMSeverity *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("Closeable")))
@protocol MVIMCloseable
@required
- (void)close __attribute__((swift_name("close()")));
@end;

__attribute__((swift_name("SqlDriver")))
@protocol MVIMSqlDriver <MVIMCloseable>
@required
- (MVIMTransacterTransaction * _Nullable)currentTransaction __attribute__((swift_name("currentTransaction()")));
- (void)executeIdentifier:(MVIMInt * _Nullable)identifier sql:(NSString *)sql parameters:(int32_t)parameters binders:(void (^ _Nullable)(id<MVIMSqlPreparedStatement>))binders __attribute__((swift_name("execute(identifier:sql:parameters:binders:)")));
- (id<MVIMSqlCursor>)executeQueryIdentifier:(MVIMInt * _Nullable)identifier sql:(NSString *)sql parameters:(int32_t)parameters binders:(void (^ _Nullable)(id<MVIMSqlPreparedStatement>))binders __attribute__((swift_name("executeQuery(identifier:sql:parameters:binders:)")));
- (MVIMTransacterTransaction *)doNewTransaction __attribute__((swift_name("doNewTransaction()")));
@end;

__attribute__((swift_name("ConnectionWrapper")))
@interface MVIMConnectionWrapper : MVIMBase <MVIMSqlDriver>
- (void)executeIdentifier:(MVIMInt * _Nullable)identifier sql:(NSString *)sql parameters:(int32_t)parameters binders:(void (^ _Nullable)(id<MVIMSqlPreparedStatement>))binders __attribute__((swift_name("execute(identifier:sql:parameters:binders:)")));
- (id<MVIMSqlCursor>)executeQueryIdentifier:(MVIMInt * _Nullable)identifier sql:(NSString *)sql parameters:(int32_t)parameters binders:(void (^ _Nullable)(id<MVIMSqlPreparedStatement>))binders __attribute__((swift_name("executeQuery(identifier:sql:parameters:binders:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeSqliteDriver")))
@interface MVIMNativeSqliteDriver : MVIMConnectionWrapper <MVIMSqlDriver>
- (instancetype)initWithConfiguration:(MVIMDatabaseConfiguration *)configuration maxReaderConnections:(int32_t)maxReaderConnections maxTransactionConnections:(int32_t)maxTransactionConnections __attribute__((swift_name("init(configuration:maxReaderConnections:maxTransactionConnections:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithSchema:(id<MVIMSqlDriverSchema>)schema name:(NSString *)name maxReaderConnections:(int32_t)maxReaderConnections maxTransactionConnections:(int32_t)maxTransactionConnections __attribute__((swift_name("init(schema:name:maxReaderConnections:maxTransactionConnections:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithDatabaseManager:(id<MVIMDatabaseManager>)databaseManager maxReaderConnections:(int32_t)maxReaderConnections maxTransactionConnections:(int32_t)maxTransactionConnections __attribute__((swift_name("init(databaseManager:maxReaderConnections:maxTransactionConnections:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (MVIMTransacterTransaction * _Nullable)currentTransaction __attribute__((swift_name("currentTransaction()")));
- (MVIMTransacterTransaction *)doNewTransaction __attribute__((swift_name("doNewTransaction()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeSqliteDriver.Companion")))
@interface MVIMNativeSqliteDriverCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("ColumnAdapter")))
@protocol MVIMColumnAdapter
@required
- (id)decodeDatabaseValue:(id _Nullable)databaseValue __attribute__((swift_name("decode(databaseValue:)")));
- (id _Nullable)encodeValue:(id)value __attribute__((swift_name("encode(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnumColumnAdapter")))
@interface MVIMEnumColumnAdapter<T> : MVIMBase <MVIMColumnAdapter>
- (T)decodeDatabaseValue:(NSString *)databaseValue __attribute__((swift_name("decode(databaseValue:)")));
- (NSString *)encodeValue:(T)value __attribute__((swift_name("encode(value:)")));
@end;

__attribute__((swift_name("Query")))
@interface MVIMQuery<__covariant RowType> : MVIMBase
- (instancetype)initWithQueries:(NSMutableArray<MVIMQuery<id> *> *)queries mapper:(RowType (^)(id<MVIMSqlCursor>))mapper __attribute__((swift_name("init(queries:mapper:)"))) __attribute__((objc_designated_initializer));
- (void)addListenerListener:(id<MVIMQueryListener>)listener __attribute__((swift_name("addListener(listener:)")));
- (id<MVIMSqlCursor>)execute __attribute__((swift_name("execute()")));
- (NSArray<RowType> *)executeAsList __attribute__((swift_name("executeAsList()")));
- (RowType)executeAsOne __attribute__((swift_name("executeAsOne()")));
- (RowType _Nullable)executeAsOneOrNull __attribute__((swift_name("executeAsOneOrNull()")));
- (void)notifyDataChanged __attribute__((swift_name("notifyDataChanged()")));
- (void)removeListenerListener:(id<MVIMQueryListener>)listener __attribute__((swift_name("removeListener(listener:)")));
@property (readonly) RowType (^mapper)(id<MVIMSqlCursor>) __attribute__((swift_name("mapper")));
@end;

__attribute__((swift_name("QueryListener")))
@protocol MVIMQueryListener
@required
- (void)queryResultsChanged __attribute__((swift_name("queryResultsChanged()")));
@end;

__attribute__((swift_name("TransactionCallbacks")))
@protocol MVIMTransactionCallbacks
@required
- (void)afterCommitFunction:(void (^)(void))function __attribute__((swift_name("afterCommit(function:)")));
- (void)afterRollbackFunction:(void (^)(void))function __attribute__((swift_name("afterRollback(function:)")));
@end;

__attribute__((swift_name("TransacterTransaction")))
@interface MVIMTransacterTransaction : MVIMBase <MVIMTransactionCallbacks>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)afterCommitFunction:(void (^)(void))function __attribute__((swift_name("afterCommit(function:)")));
- (void)afterRollbackFunction:(void (^)(void))function __attribute__((swift_name("afterRollback(function:)")));
- (void)endTransactionSuccessful:(BOOL)successful __attribute__((swift_name("endTransaction(successful:)")));
@property (readonly) MVIMTransacterTransaction * _Nullable enclosingTransaction __attribute__((swift_name("enclosingTransaction")));
@end;

__attribute__((swift_name("TransacterImpl")))
@interface MVIMTransacterImpl : MVIMBase <MVIMTransacter>
- (instancetype)initWithDriver:(id<MVIMSqlDriver>)driver __attribute__((swift_name("init(driver:)"))) __attribute__((objc_designated_initializer));
- (NSString *)createArgumentsCount:(int32_t)count __attribute__((swift_name("createArguments(count:)")));
- (void)notifyQueriesIdentifier:(int32_t)identifier queryList:(NSArray<MVIMQuery<id> *> *(^)(void))queryList __attribute__((swift_name("notifyQueries(identifier:queryList:)")));
- (void)transactionNoEnclosing:(BOOL)noEnclosing body:(void (^)(id<MVIMTransactionWithoutReturn>))body __attribute__((swift_name("transaction(noEnclosing:body:)")));
- (id _Nullable)transactionWithResultNoEnclosing:(BOOL)noEnclosing bodyWithReturn:(id _Nullable (^)(id<MVIMTransactionWithReturn>))bodyWithReturn __attribute__((swift_name("transactionWithResult(noEnclosing:bodyWithReturn:)")));
@end;

__attribute__((swift_name("TransactionWithReturn")))
@protocol MVIMTransactionWithReturn <MVIMTransactionCallbacks>
@required
- (void)rollbackReturnValue:(id _Nullable)returnValue __attribute__((swift_name("rollback(returnValue:)")));
- (id _Nullable)transactionBody:(id _Nullable (^)(id<MVIMTransactionWithReturn>))body __attribute__((swift_name("transaction(body:)")));
@end;

__attribute__((swift_name("TransactionWithoutReturn")))
@protocol MVIMTransactionWithoutReturn <MVIMTransactionCallbacks>
@required
- (void)rollback __attribute__((swift_name("rollback()")));
- (void)transactionBody_:(void (^)(id<MVIMTransactionWithoutReturn>))body __attribute__((swift_name("transaction(body_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AfterVersion")))
@interface MVIMAfterVersion : MVIMBase
- (instancetype)initWithAfterVersion:(int32_t)afterVersion block:(void (^)(void))block __attribute__((swift_name("init(afterVersion:block:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("SqlCursor")))
@protocol MVIMSqlCursor <MVIMCloseable>
@required
- (MVIMKotlinByteArray * _Nullable)getBytesIndex:(int32_t)index __attribute__((swift_name("getBytes(index:)")));
- (MVIMDouble * _Nullable)getDoubleIndex:(int32_t)index __attribute__((swift_name("getDouble(index:)")));
- (MVIMLong * _Nullable)getLongIndex:(int32_t)index __attribute__((swift_name("getLong(index:)")));
- (NSString * _Nullable)getStringIndex:(int32_t)index __attribute__((swift_name("getString(index:)")));
- (BOOL)next __attribute__((swift_name("next()")));
@end;

__attribute__((swift_name("SqlDriverSchema")))
@protocol MVIMSqlDriverSchema
@required
- (void)createDriver:(id<MVIMSqlDriver>)driver __attribute__((swift_name("create(driver:)")));
- (void)migrateDriver:(id<MVIMSqlDriver>)driver oldVersion:(int32_t)oldVersion newVersion:(int32_t)newVersion __attribute__((swift_name("migrate(driver:oldVersion:newVersion:)")));
@property (readonly) int32_t version __attribute__((swift_name("version")));
@end;

__attribute__((swift_name("SqlPreparedStatement")))
@protocol MVIMSqlPreparedStatement
@required
- (void)bindBytesIndex:(int32_t)index bytes:(MVIMKotlinByteArray * _Nullable)bytes __attribute__((swift_name("bindBytes(index:bytes:)")));
- (void)bindDoubleIndex:(int32_t)index double:(MVIMDouble * _Nullable)double_ __attribute__((swift_name("bindDouble(index:double:)")));
- (void)bindLongIndex:(int32_t)index long:(MVIMLong * _Nullable)long_ __attribute__((swift_name("bindLong(index:long:)")));
- (void)bindStringIndex:(int32_t)index string:(NSString * _Nullable)string __attribute__((swift_name("bindString(index:string:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Atomic")))
@interface MVIMAtomic<V> : MVIMBase
- (instancetype)initWithValue:(V _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (V _Nullable)get __attribute__((swift_name("get()")));
- (void)setValue:(V _Nullable)value __attribute__((swift_name("set(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicBoolean")))
@interface MVIMAtomicBoolean : MVIMBase
- (instancetype)initWithValue:(BOOL)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (BOOL)get __attribute__((swift_name("get()")));
- (void)setValue:(BOOL)value __attribute__((swift_name("set(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LogSqliteDriver")))
@interface MVIMLogSqliteDriver : MVIMBase <MVIMSqlDriver>
- (instancetype)initWithSqlDriver:(id<MVIMSqlDriver>)sqlDriver logger:(void (^)(NSString *))logger __attribute__((swift_name("init(sqlDriver:logger:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (MVIMTransacterTransaction * _Nullable)currentTransaction __attribute__((swift_name("currentTransaction()")));
- (void)executeIdentifier:(MVIMInt * _Nullable)identifier sql:(NSString *)sql parameters:(int32_t)parameters binders:(void (^ _Nullable)(id<MVIMSqlPreparedStatement>))binders __attribute__((swift_name("execute(identifier:sql:parameters:binders:)")));
- (id<MVIMSqlCursor>)executeQueryIdentifier:(MVIMInt * _Nullable)identifier sql:(NSString *)sql parameters:(int32_t)parameters binders:(void (^ _Nullable)(id<MVIMSqlPreparedStatement>))binders __attribute__((swift_name("executeQuery(identifier:sql:parameters:binders:)")));
- (MVIMTransacterTransaction *)doNewTransaction __attribute__((swift_name("doNewTransaction()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatementParameterInterceptor")))
@interface MVIMStatementParameterInterceptor : MVIMBase <MVIMSqlPreparedStatement>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)bindBytesIndex:(int32_t)index bytes:(MVIMKotlinByteArray * _Nullable)bytes __attribute__((swift_name("bindBytes(index:bytes:)")));
- (void)bindDoubleIndex:(int32_t)index double:(MVIMDouble * _Nullable)double_ __attribute__((swift_name("bindDouble(index:double:)")));
- (void)bindLongIndex:(int32_t)index long:(MVIMLong * _Nullable)long_ __attribute__((swift_name("bindLong(index:long:)")));
- (void)bindStringIndex:(int32_t)index string:(NSString * _Nullable)string __attribute__((swift_name("bindString(index:string:)")));
- (NSArray<id> *)getAndClearParameters __attribute__((swift_name("getAndClearParameters()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Koin")))
@interface MVIMKoin : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
- (MVIMScope *)createScopeT:(id<MVIMKoinScopeComponent>)t __attribute__((swift_name("createScope(t:)")));
- (MVIMScope *)createScopeScopeId:(NSString *)scopeId __attribute__((swift_name("createScope(scopeId:)")));
- (MVIMScope *)createScopeScopeId:(NSString *)scopeId source:(id _Nullable)source __attribute__((swift_name("createScope(scopeId:source:)")));
- (MVIMScope *)createScopeScopeId:(NSString *)scopeId qualifier:(id<MVIMQualifier>)qualifier source:(id _Nullable)source __attribute__((swift_name("createScope(scopeId:qualifier:source:)")));
- (void)declareInstance:(id _Nullable)instance qualifier:(id<MVIMQualifier> _Nullable)qualifier secondaryTypes:(NSArray<id<MVIMKotlinKClass>> *)secondaryTypes allowOverride:(BOOL)allowOverride __attribute__((swift_name("declare(instance:qualifier:secondaryTypes:allowOverride:)")));
- (void)deletePropertyKey:(NSString *)key __attribute__((swift_name("deleteProperty(key:)")));
- (void)deleteScopeScopeId:(NSString *)scopeId __attribute__((swift_name("deleteScope(scopeId:)")));
- (id _Nullable)getClazz:(id<MVIMKotlinKClass>)clazz qualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(clazz:qualifier:parameters:)")));
- (id)getQualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(qualifier:parameters:)")));
- (NSArray<id> *)getAll __attribute__((swift_name("getAll()")));
- (MVIMScope *)getOrCreateScopeScopeId:(NSString *)scopeId __attribute__((swift_name("getOrCreateScope(scopeId:)")));
- (MVIMScope *)getOrCreateScopeScopeId:(NSString *)scopeId qualifier:(id<MVIMQualifier>)qualifier source:(id _Nullable)source __attribute__((swift_name("getOrCreateScope(scopeId:qualifier:source:)")));
- (id _Nullable)getOrNullClazz:(id<MVIMKotlinKClass>)clazz qualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(clazz:qualifier:parameters:)")));
- (id _Nullable)getOrNullQualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(qualifier:parameters:)")));
- (id _Nullable)getPropertyKey:(NSString *)key __attribute__((swift_name("getProperty(key:)")));
- (id)getPropertyKey:(NSString *)key defaultValue:(id)defaultValue __attribute__((swift_name("getProperty(key:defaultValue:)")));
- (MVIMScope *)getScopeScopeId:(NSString *)scopeId __attribute__((swift_name("getScope(scopeId:)")));
- (MVIMScope * _Nullable)getScopeOrNullScopeId:(NSString *)scopeId __attribute__((swift_name("getScopeOrNull(scopeId:)")));
- (id<MVIMKotlinLazy>)injectQualifier:(id<MVIMQualifier> _Nullable)qualifier mode:(MVIMKotlinLazyThreadSafetyMode *)mode parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("inject(qualifier:mode:parameters:)")));
- (id<MVIMKotlinLazy>)injectOrNullQualifier:(id<MVIMQualifier> _Nullable)qualifier mode:(MVIMKotlinLazyThreadSafetyMode *)mode parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("injectOrNull(qualifier:mode:parameters:)")));
- (void)loadModulesModules:(NSArray<MVIMModule *> *)modules allowOverride:(BOOL)allowOverride __attribute__((swift_name("loadModules(modules:allowOverride:)")));
- (void)setPropertyKey:(NSString *)key value:(id)value __attribute__((swift_name("setProperty(key:value:)")));
- (void)setupLoggerLogger:(MVIMLogger_ *)logger __attribute__((swift_name("setupLogger(logger:)")));
- (void)unloadModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("unloadModules(modules:)")));
@property (readonly) MVIMInstanceRegistry *instanceRegistry __attribute__((swift_name("instanceRegistry")));
@property (readonly) MVIMLogger_ *logger __attribute__((swift_name("logger")));
@property (readonly) MVIMPropertyRegistry *propertyRegistry __attribute__((swift_name("propertyRegistry")));
@property (readonly) MVIMScopeRegistry *scopeRegistry __attribute__((swift_name("scopeRegistry")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinApplication")))
@interface MVIMKoinApplication : MVIMBase
- (void)allowOverrideOverride:(BOOL)override __attribute__((swift_name("allowOverride(override:)")));
- (void)close __attribute__((swift_name("close()")));
- (MVIMKoinApplication *)loggerLogger:(MVIMLogger_ *)logger __attribute__((swift_name("logger(logger:)")));
- (MVIMKoinApplication *)modulesModules:(MVIMKotlinArray<MVIMModule *> *)modules __attribute__((swift_name("modules(modules:)")));
- (MVIMKoinApplication *)modulesModules_:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("modules(modules_:)")));
- (MVIMKoinApplication *)modulesModules__:(MVIMModule *)modules __attribute__((swift_name("modules(modules__:)")));
- (MVIMKoinApplication *)printLoggerLevel:(MVIMLevel *)level __attribute__((swift_name("printLogger(level:)")));
- (MVIMKoinApplication *)propertiesValues:(NSDictionary<NSString *, NSString *> *)values __attribute__((swift_name("properties(values:)")));
- (void)unloadModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("unloadModules(modules:)")));
- (void)unloadModulesModule:(MVIMModule *)module __attribute__((swift_name("unloadModules(module:)")));
@property (readonly) MVIMKoin *koin __attribute__((swift_name("koin")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinApplication.Companion")))
@interface MVIMKoinApplicationCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMKoinApplication *)doInit __attribute__((swift_name("doInit()")));
@end;

__attribute__((swift_name("KoinContext")))
@protocol MVIMKoinContext
@required
- (MVIMKoin *)get __attribute__((swift_name("get()")));
- (MVIMKoin * _Nullable)getOrNull __attribute__((swift_name("getOrNull()")));
- (void)loadKoinModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("loadKoinModules(modules:)")));
- (void)loadKoinModulesModule:(MVIMModule *)module __attribute__((swift_name("loadKoinModules(module:)")));
- (MVIMKoinApplication *)startKoinKoinApplication:(MVIMKoinApplication *)koinApplication __attribute__((swift_name("startKoin(koinApplication:)")));
- (MVIMKoinApplication *)startKoinAppDeclaration:(void (^)(MVIMKoinApplication *))appDeclaration __attribute__((swift_name("startKoin(appDeclaration:)")));
- (void)stopKoin __attribute__((swift_name("stopKoin()")));
- (void)unloadKoinModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("unloadKoinModules(modules:)")));
- (void)unloadKoinModulesModule:(MVIMModule *)module __attribute__((swift_name("unloadKoinModules(module:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GlobalContext")))
@interface MVIMGlobalContext : MVIMBase <MVIMKoinContext>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)globalContext __attribute__((swift_name("init()")));
- (MVIMKoin *)get __attribute__((swift_name("get()")));
- (MVIMKoin * _Nullable)getOrNull __attribute__((swift_name("getOrNull()")));
- (void)loadKoinModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("loadKoinModules(modules:)")));
- (void)loadKoinModulesModule:(MVIMModule *)module __attribute__((swift_name("loadKoinModules(module:)")));
- (MVIMKoinApplication *)startKoinKoinApplication:(MVIMKoinApplication *)koinApplication __attribute__((swift_name("startKoin(koinApplication:)")));
- (MVIMKoinApplication *)startKoinAppDeclaration:(void (^)(MVIMKoinApplication *))appDeclaration __attribute__((swift_name("startKoin(appDeclaration:)")));
- (void)stopKoin __attribute__((swift_name("stopKoin()")));
- (void)unloadKoinModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("unloadKoinModules(modules:)")));
- (void)unloadKoinModulesModule:(MVIMModule *)module __attribute__((swift_name("unloadKoinModules(module:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GlobalContext.KoinInstanceHolder")))
@interface MVIMGlobalContextKoinInstanceHolder : MVIMBase
- (instancetype)initWithKoin:(MVIMKoin * _Nullable)koin __attribute__((swift_name("init(koin:)"))) __attribute__((objc_designated_initializer));
- (MVIMKoin * _Nullable)component1 __attribute__((swift_name("component1()")));
- (MVIMGlobalContextKoinInstanceHolder *)doCopyKoin:(MVIMKoin * _Nullable)koin __attribute__((swift_name("doCopy(koin:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property MVIMKoin * _Nullable koin __attribute__((swift_name("koin")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Scope")))
@interface MVIMScope : MVIMBase
- (instancetype)initWithScopeQualifier:(id<MVIMQualifier>)scopeQualifier id:(NSString *)id isRoot:(BOOL)isRoot _koin:(MVIMKoin *)_koin __attribute__((swift_name("init(scopeQualifier:id:isRoot:_koin:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (id<MVIMQualifier>)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (BOOL)component3 __attribute__((swift_name("component3()")));
- (MVIMScope *)doCopyScopeQualifier:(id<MVIMQualifier>)scopeQualifier id:(NSString *)id isRoot:(BOOL)isRoot _koin:(MVIMKoin *)_koin __attribute__((swift_name("doCopy(scopeQualifier:id:isRoot:_koin:)")));
- (void)declareInstance:(id _Nullable)instance qualifier:(id<MVIMQualifier> _Nullable)qualifier secondaryTypes:(NSArray<id<MVIMKotlinKClass>> *)secondaryTypes allowOverride:(BOOL)allowOverride __attribute__((swift_name("declare(instance:qualifier:secondaryTypes:allowOverride:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (id _Nullable)getClazz:(id<MVIMKotlinKClass>)clazz qualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(clazz:qualifier:parameters:)")));
- (id)getQualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(qualifier:parameters:)")));
- (NSArray<id> *)getAll __attribute__((swift_name("getAll()")));
- (NSArray<id> *)getAllClazz:(id<MVIMKotlinKClass>)clazz __attribute__((swift_name("getAll(clazz:)")));
- (MVIMKoin *)getKoin __attribute__((swift_name("getKoin()")));
- (id _Nullable)getOrNullClazz:(id<MVIMKotlinKClass>)clazz qualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(clazz:qualifier:parameters:)")));
- (id _Nullable)getOrNullQualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("getOrNull(qualifier:parameters:)")));
- (NSString *)getPropertyKey:(NSString *)key __attribute__((swift_name("getProperty(key:)")));
- (NSString *)getPropertyKey:(NSString *)key defaultValue:(NSString *)defaultValue __attribute__((swift_name("getProperty(key:defaultValue:)")));
- (NSString * _Nullable)getPropertyOrNullKey:(NSString *)key __attribute__((swift_name("getPropertyOrNull(key:)")));
- (MVIMScope *)getScopeScopeID:(NSString *)scopeID __attribute__((swift_name("getScope(scopeID:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (id<MVIMKotlinLazy>)injectQualifier:(id<MVIMQualifier> _Nullable)qualifier mode:(MVIMKotlinLazyThreadSafetyMode *)mode parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("inject(qualifier:mode:parameters:)")));
- (id<MVIMKotlinLazy>)injectOrNullQualifier:(id<MVIMQualifier> _Nullable)qualifier mode:(MVIMKotlinLazyThreadSafetyMode *)mode parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("injectOrNull(qualifier:mode:parameters:)")));
- (BOOL)isNotClosed __attribute__((swift_name("isNotClosed()")));
- (void)linkToScopes:(MVIMKotlinArray<MVIMScope *> *)scopes __attribute__((swift_name("linkTo(scopes:)")));
- (void)registerCallbackCallback:(id<MVIMScopeCallback>)callback __attribute__((swift_name("registerCallback(callback:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (void)unlinkScopes:(MVIMKotlinArray<MVIMScope *> *)scopes __attribute__((swift_name("unlink(scopes:)")));
@property (readonly) BOOL closed __attribute__((swift_name("closed")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@property (readonly) BOOL isRoot __attribute__((swift_name("isRoot")));
@property (readonly) MVIMLogger_ *logger __attribute__((swift_name("logger")));
@property (readonly) id<MVIMQualifier> scopeQualifier __attribute__((swift_name("scopeQualifier")));
@end;

__attribute__((swift_name("ScopeCallback")))
@protocol MVIMScopeCallback
@required
- (void)onScopeCloseScope:(MVIMScope *)scope __attribute__((swift_name("onScopeClose(scope:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceRegistry")))
@interface MVIMInstanceRegistry : MVIMBase
- (instancetype)initWith_koin:(MVIMKoin *)_koin __attribute__((swift_name("init(_koin:)"))) __attribute__((objc_designated_initializer));
- (void)saveMappingAllowOverride:(BOOL)allowOverride mapping:(NSString *)mapping factory:(MVIMInstanceFactory<id> *)factory logWarning:(BOOL)logWarning __attribute__((swift_name("saveMapping(allowOverride:mapping:factory:logWarning:)")));
- (int32_t)size __attribute__((swift_name("size()")));
@property (readonly) MVIMKoin *_koin __attribute__((swift_name("_koin")));
@property (readonly) NSDictionary<NSString *, MVIMInstanceFactory<id> *> *instances __attribute__((swift_name("instances")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PropertyRegistry")))
@interface MVIMPropertyRegistry : MVIMBase
- (instancetype)initWith_koin:(MVIMKoin *)_koin __attribute__((swift_name("init(_koin:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (void)deletePropertyKey:(NSString *)key __attribute__((swift_name("deleteProperty(key:)")));
- (id _Nullable)getPropertyKey:(NSString *)key __attribute__((swift_name("getProperty(key:)")));
- (void)savePropertiesProperties:(NSDictionary<NSString *, id> *)properties __attribute__((swift_name("saveProperties(properties:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeRegistry")))
@interface MVIMScopeRegistry : MVIMBase
- (instancetype)initWith_koin:(MVIMKoin *)_koin __attribute__((swift_name("init(_koin:)"))) __attribute__((objc_designated_initializer));
- (void)loadScopesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("loadScopes(modules:)")));
@property (readonly) MVIMScope *rootScope __attribute__((swift_name("rootScope")));
@property (readonly) NSSet<id<MVIMQualifier>> *scopeDefinitions __attribute__((swift_name("scopeDefinitions")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeRegistry.Companion")))
@interface MVIMScopeRegistryCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("KoinComponent")))
@protocol MVIMKoinComponent
@required
- (MVIMKoin *)getKoin __attribute__((swift_name("getKoin()")));
@end;

__attribute__((swift_name("KoinScopeComponent")))
@protocol MVIMKoinScopeComponent <MVIMKoinComponent>
@required
- (void)closeScope __attribute__((swift_name("closeScope()")));
@property (readonly) MVIMScope *scope __attribute__((swift_name("scope")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Module")))
@interface MVIMModule : MVIMBase
- (instancetype)initWithCreatedAtStart:(BOOL)createdAtStart __attribute__((swift_name("init(createdAtStart:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)factoryQualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(id _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition __attribute__((swift_name("factory(qualifier:definition:)")));
- (NSArray<MVIMModule *> *)plusModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("plus(modules:)")));
- (NSArray<MVIMModule *> *)plusModule:(MVIMModule *)module __attribute__((swift_name("plus(module:)")));
- (void)scopeQualifier:(id<MVIMQualifier>)qualifier scopeSet:(void (^)(MVIMScopeDSL *))scopeSet __attribute__((swift_name("scope(qualifier:scopeSet:)")));
- (void)scopeScopeSet:(void (^)(MVIMScopeDSL *))scopeSet __attribute__((swift_name("scope(scopeSet:)")));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)singleQualifier:(id<MVIMQualifier> _Nullable)qualifier createdAtStart:(BOOL)createdAtStart definition:(id _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition __attribute__((swift_name("single(qualifier:createdAtStart:definition:)")));
@property (readonly) BOOL createdAtStart __attribute__((swift_name("createdAtStart")));
@property (readonly) MVIMMutableSet<MVIMSingleInstanceFactory<id> *> *eagerInstances __attribute__((swift_name("eagerInstances")));
@property (readonly) BOOL isLoaded __attribute__((swift_name("isLoaded")));
@end;

__attribute__((swift_name("Qualifier")))
@protocol MVIMQualifier
@required
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringQualifier")))
@interface MVIMStringQualifier : MVIMBase <MVIMQualifier>
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (MVIMStringQualifier *)doCopyValue:(NSString *)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeQualifier")))
@interface MVIMTypeQualifier : MVIMBase <MVIMQualifier>
- (instancetype)initWithType:(id<MVIMKotlinKClass>)type __attribute__((swift_name("init(type:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMKotlinKClass> type __attribute__((swift_name("type")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("KotlinException")))
@interface MVIMKotlinException : MVIMKotlinThrowable
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BrokenDefinitionException")))
@interface MVIMBrokenDefinitionException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedScopeException")))
@interface MVIMClosedScopeException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefinitionOverrideException")))
@interface MVIMDefinitionOverrideException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefinitionParameterException")))
@interface MVIMDefinitionParameterException : MVIMKotlinException
- (instancetype)initWithStr:(NSString *)str __attribute__((swift_name("init(str:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceCreationException")))
@interface MVIMInstanceCreationException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg parent:(MVIMKotlinException *)parent __attribute__((swift_name("init(msg:parent:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinAppAlreadyStartedException")))
@interface MVIMKoinAppAlreadyStartedException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MissingPropertyException")))
@interface MVIMMissingPropertyException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoBeanDefFoundException")))
@interface MVIMNoBeanDefFoundException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoParameterFoundException")))
@interface MVIMNoParameterFoundException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoPropertyFileFoundException")))
@interface MVIMNoPropertyFileFoundException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoScopeDefFoundException")))
@interface MVIMNoScopeDefFoundException : MVIMKotlinException
- (instancetype)initWithS:(NSString *)s __attribute__((swift_name("init(s:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeAlreadyCreatedException")))
@interface MVIMScopeAlreadyCreatedException : MVIMKotlinException
- (instancetype)initWithS:(NSString *)s __attribute__((swift_name("init(s:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeNotCreatedException")))
@interface MVIMScopeNotCreatedException : MVIMKotlinException
- (instancetype)initWithMsg:(NSString *)msg __attribute__((swift_name("init(msg:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BeanDefinition")))
@interface MVIMBeanDefinition<T> : MVIMBase
- (instancetype)initWithScopeQualifier:(id<MVIMQualifier>)scopeQualifier primaryType:(id<MVIMKotlinKClass>)primaryType qualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(T _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition kind:(MVIMKind *)kind secondaryTypes:(NSArray<id<MVIMKotlinKClass>> *)secondaryTypes __attribute__((swift_name("init(scopeQualifier:primaryType:qualifier:definition:kind:secondaryTypes:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMQualifier>)component1 __attribute__((swift_name("component1()")));
- (id<MVIMKotlinKClass>)component2 __attribute__((swift_name("component2()")));
- (id<MVIMQualifier> _Nullable)component3 __attribute__((swift_name("component3()")));
- (T _Nullable (^)(MVIMScope *, MVIMParametersHolder *))component4 __attribute__((swift_name("component4()")));
- (MVIMKind *)component5 __attribute__((swift_name("component5()")));
- (NSArray<id<MVIMKotlinKClass>> *)component6 __attribute__((swift_name("component6()")));
- (MVIMBeanDefinition<T> *)doCopyScopeQualifier:(id<MVIMQualifier>)scopeQualifier primaryType:(id<MVIMKotlinKClass>)primaryType qualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(T _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition kind:(MVIMKind *)kind secondaryTypes:(NSArray<id<MVIMKotlinKClass>> *)secondaryTypes __attribute__((swift_name("doCopy(scopeQualifier:primaryType:qualifier:definition:kind:secondaryTypes:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (BOOL)hasTypeClazz:(id<MVIMKotlinKClass>)clazz __attribute__((swift_name("hasType(clazz:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isClazz:(id<MVIMKotlinKClass>)clazz qualifier:(id<MVIMQualifier> _Nullable)qualifier scopeDefinition:(id<MVIMQualifier>)scopeDefinition __attribute__((swift_name("is(clazz:qualifier:scopeDefinition:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property MVIMCallbacks<T> *callbacks __attribute__((swift_name("callbacks")));
@property (readonly) T _Nullable (^definition)(MVIMScope *, MVIMParametersHolder *) __attribute__((swift_name("definition")));
@property (readonly) MVIMKind *kind __attribute__((swift_name("kind")));
@property (readonly) id<MVIMKotlinKClass> primaryType __attribute__((swift_name("primaryType")));
@property (readonly) id<MVIMQualifier> _Nullable qualifier __attribute__((swift_name("qualifier")));
@property (readonly) id<MVIMQualifier> scopeQualifier __attribute__((swift_name("scopeQualifier")));
@property NSArray<id<MVIMKotlinKClass>> *secondaryTypes __attribute__((swift_name("secondaryTypes")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Callbacks")))
@interface MVIMCallbacks<T> : MVIMBase
- (instancetype)initWithOnClose:(void (^ _Nullable)(T _Nullable))onClose __attribute__((swift_name("init(onClose:)"))) __attribute__((objc_designated_initializer));
- (void (^ _Nullable)(T _Nullable))component1 __attribute__((swift_name("component1()")));
- (MVIMCallbacks<T> *)doCopyOnClose:(void (^ _Nullable)(T _Nullable))onClose __attribute__((swift_name("doCopy(onClose:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) void (^ _Nullable onClose)(T _Nullable) __attribute__((swift_name("onClose")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Kind")))
@interface MVIMKind : MVIMKotlinEnum<MVIMKind *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMKind *singleton __attribute__((swift_name("singleton")));
@property (class, readonly) MVIMKind *factory __attribute__((swift_name("factory")));
@property (class, readonly) MVIMKind *scoped __attribute__((swift_name("scoped")));
+ (MVIMKotlinArray<MVIMKind *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("InstanceFactory")))
@interface MVIMInstanceFactory<T> : MVIMBase
- (instancetype)initWithBeanDefinition:(MVIMBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)createContext:(MVIMInstanceContext *)context __attribute__((swift_name("create(context:)")));
- (void)dropScope:(MVIMScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(MVIMInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(MVIMInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@property (readonly) MVIMBeanDefinition<T> *beanDefinition __attribute__((swift_name("beanDefinition")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FactoryInstanceFactory")))
@interface MVIMFactoryInstanceFactory<T> : MVIMInstanceFactory<T>
- (instancetype)initWithBeanDefinition:(MVIMBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (void)dropScope:(MVIMScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(MVIMInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(MVIMInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceContext")))
@interface MVIMInstanceContext : MVIMBase
- (instancetype)initWithKoin:(MVIMKoin *)koin scope:(MVIMScope *)scope parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("init(koin:scope:parameters:)"))) __attribute__((objc_designated_initializer));
@property (readonly) MVIMKoin *koin __attribute__((swift_name("koin")));
@property (readonly) MVIMParametersHolder *(^ _Nullable parameters)(void) __attribute__((swift_name("parameters")));
@property (readonly) MVIMScope *scope __attribute__((swift_name("scope")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstanceFactoryCompanion")))
@interface MVIMInstanceFactoryCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) NSString *ERROR_SEPARATOR __attribute__((swift_name("ERROR_SEPARATOR")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopedInstanceFactory")))
@interface MVIMScopedInstanceFactory<T> : MVIMInstanceFactory<T>
- (instancetype)initWithBeanDefinition:(MVIMBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)createContext:(MVIMInstanceContext *)context __attribute__((swift_name("create(context:)")));
- (void)dropScope:(MVIMScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(MVIMInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(MVIMInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SingleInstanceFactory")))
@interface MVIMSingleInstanceFactory<T> : MVIMInstanceFactory<T>
- (instancetype)initWithBeanDefinition:(MVIMBeanDefinition<T> *)beanDefinition __attribute__((swift_name("init(beanDefinition:)"))) __attribute__((objc_designated_initializer));
- (T _Nullable)createContext:(MVIMInstanceContext *)context __attribute__((swift_name("create(context:)")));
- (void)dropScope:(MVIMScope * _Nullable)scope __attribute__((swift_name("drop(scope:)")));
- (void)dropAll __attribute__((swift_name("dropAll()")));
- (T _Nullable)getContext:(MVIMInstanceContext *)context __attribute__((swift_name("get(context:)")));
- (BOOL)isCreatedContext:(MVIMInstanceContext * _Nullable)context __attribute__((swift_name("isCreated(context:)")));
@end;

__attribute__((swift_name("Logger_")))
@interface MVIMLogger_ : MVIMBase
- (instancetype)initWithLevel:(MVIMLevel *)level __attribute__((swift_name("init(level:)"))) __attribute__((objc_designated_initializer));
- (void)debugMsg:(NSString *)msg __attribute__((swift_name("debug(msg:)")));
- (void)errorMsg:(NSString *)msg __attribute__((swift_name("error(msg:)")));
- (void)infoMsg:(NSString *)msg __attribute__((swift_name("info(msg:)")));
- (BOOL)isAtLvl:(MVIMLevel *)lvl __attribute__((swift_name("isAt(lvl:)")));
- (void)logLevel:(MVIMLevel *)level msg:(NSString *)msg __attribute__((swift_name("log(level:msg:)")));
@property MVIMLevel *level __attribute__((swift_name("level")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyLogger")))
@interface MVIMEmptyLogger : MVIMLogger_
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithLevel:(MVIMLevel *)level __attribute__((swift_name("init(level:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)logLevel:(MVIMLevel *)level msg:(NSString *)msg __attribute__((swift_name("log(level:msg:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Level")))
@interface MVIMLevel : MVIMKotlinEnum<MVIMLevel *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMLevel *debug __attribute__((swift_name("debug")));
@property (class, readonly) MVIMLevel *info __attribute__((swift_name("info")));
@property (class, readonly) MVIMLevel *error __attribute__((swift_name("error")));
@property (class, readonly) MVIMLevel *none __attribute__((swift_name("none")));
+ (MVIMKotlinArray<MVIMLevel *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrintLogger")))
@interface MVIMPrintLogger : MVIMLogger_
- (instancetype)initWithLevel:(MVIMLevel *)level __attribute__((swift_name("init(level:)"))) __attribute__((objc_designated_initializer));
- (void)logLevel:(MVIMLevel *)level msg:(NSString *)msg __attribute__((swift_name("log(level:msg:)")));
@end;

__attribute__((swift_name("ParametersHolder")))
@interface MVIMParametersHolder : MVIMBase
- (instancetype)initWith_values:(NSMutableArray<id> *)_values __attribute__((swift_name("init(_values:)"))) __attribute__((objc_designated_initializer));
- (MVIMParametersHolder *)addValue:(id)value __attribute__((swift_name("add(value:)")));
- (id _Nullable)component1 __attribute__((swift_name("component1()"))) __attribute__((deprecated("replace with parameters -> parameters.get()")));
- (id _Nullable)component2 __attribute__((swift_name("component2()"))) __attribute__((deprecated("replace with parameters -> parameters.get()")));
- (id _Nullable)component3 __attribute__((swift_name("component3()"))) __attribute__((deprecated("replace with parameters -> parameters.get()")));
- (id _Nullable)component4 __attribute__((swift_name("component4()"))) __attribute__((deprecated("replace with parameters -> parameters.get()")));
- (id _Nullable)component5 __attribute__((swift_name("component5()"))) __attribute__((deprecated("replace with parameters -> parameters.get()")));
- (id _Nullable)elementAtI:(int32_t)i clazz:(id<MVIMKotlinKClass>)clazz __attribute__((swift_name("elementAt(i:clazz:)")));
- (id)get __attribute__((swift_name("get()")));
- (id _Nullable)getI:(int32_t)i __attribute__((swift_name("get(i:)")));
- (id _Nullable)getOrNullClazz:(id<MVIMKotlinKClass>)clazz __attribute__((swift_name("getOrNull(clazz:)")));
- (MVIMParametersHolder *)insertIndex:(int32_t)index value:(id)value __attribute__((swift_name("insert(index:value:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (BOOL)isNotEmpty __attribute__((swift_name("isNotEmpty()")));
- (void)setI:(int32_t)i t:(id _Nullable)t __attribute__((swift_name("set(i:t:)")));
- (int32_t)size __attribute__((swift_name("size()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<id> *values __attribute__((swift_name("values")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersHolder.Companion")))
@interface MVIMParametersHolderCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int32_t MAX_PARAMS __attribute__((swift_name("MAX_PARAMS")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinPlatformTools")))
@interface MVIMKoinPlatformTools : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)koinPlatformTools __attribute__((swift_name("init()")));
- (id<MVIMKoinContext>)defaultContext __attribute__((swift_name("defaultContext()")));
- (MVIMKotlinLazyThreadSafetyMode *)defaultLazyMode __attribute__((swift_name("defaultLazyMode()")));
- (MVIMLogger_ *)defaultLoggerLevel:(MVIMLevel *)level __attribute__((swift_name("defaultLogger(level:)")));
- (NSString *)generateId __attribute__((swift_name("generateId()")));
- (NSString *)getClassNameKClass:(id<MVIMKotlinKClass>)kClass __attribute__((swift_name("getClassName(kClass:)")));
- (NSString *)getStackTraceE:(MVIMKotlinException *)e __attribute__((swift_name("getStackTrace(e:)")));
- (MVIMMutableDictionary<id, id> *)safeHashMap __attribute__((swift_name("safeHashMap()")));
- (id _Nullable)synchronizedLock:(id)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronized(lock:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainThreadValue")))
@interface MVIMMainThreadValue<T> : MVIMBase
- (instancetype)initWithStartVal:(T)startVal __attribute__((swift_name("init(startVal:)"))) __attribute__((objc_designated_initializer));
- (T)get __attribute__((swift_name("get()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScopeDSL")))
@interface MVIMScopeDSL : MVIMBase
- (instancetype)initWithScopeQualifier:(id<MVIMQualifier>)scopeQualifier module:(MVIMModule *)module __attribute__((swift_name("init(scopeQualifier:module:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)factoryQualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(id _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition __attribute__((swift_name("factory(qualifier:definition:)")));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)scopedQualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(id _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition __attribute__((swift_name("scoped(qualifier:definition:)")));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)singleQualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(id _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition __attribute__((swift_name("single(qualifier:definition:)"))) __attribute__((unavailable("Can't use Single in a scope. Use Scoped instead")));
@property (readonly) MVIMModule *module __attribute__((swift_name("module")));
@property (readonly) id<MVIMQualifier> scopeQualifier __attribute__((swift_name("scopeQualifier")));
@end;

__attribute__((swift_name("JsonSerializer")))
@protocol MVIMJsonSerializer
@required
- (id)readType:(MVIMTypeInfo *)type body:(id<MVIMInput>)body __attribute__((swift_name("read(type:body:)"))) __attribute__((deprecated("Please use overload with io.ktor.util.reflect.TypeInfo parameter")));
- (id)readType:(id<MVIMTypeInfo>)type body_:(id<MVIMInput>)body __attribute__((swift_name("read(type:body_:)")));
- (MVIMOutgoingContent *)writeData:(id)data __attribute__((swift_name("write(data:)")));
- (MVIMOutgoingContent *)writeData:(id)data contentType:(MVIMContentType *)contentType __attribute__((swift_name("write(data:contentType:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinxSerializer")))
@interface MVIMKotlinxSerializer : MVIMBase <MVIMJsonSerializer>
- (instancetype)initWithJson:(MVIMJson *)json __attribute__((swift_name("init(json:)"))) __attribute__((objc_designated_initializer));
- (id)readType:(id<MVIMTypeInfo>)type body_:(id<MVIMInput>)body __attribute__((swift_name("read(type:body_:)")));
- (MVIMOutgoingContent *)writeData:(id)data contentType:(MVIMContentType *)contentType __attribute__((swift_name("write(data:contentType:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinxSerializer.Companion")))
@interface MVIMKotlinxSerializerCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMJson *DefaultJson __attribute__((swift_name("DefaultJson")));
@property (readonly) MVIMJson *DefaultJsonConfiguration __attribute__((swift_name("DefaultJsonConfiguration"))) __attribute__((unavailable("DefaultJsonConfiguration is deprecated. Consider using DefaultJson instead.")));
@end;

__attribute__((swift_name("Clock")))
@protocol MVIMClock
@required
- (MVIMInstant *)now __attribute__((swift_name("now()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClockCompanion")))
@interface MVIMClockCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClockSystem")))
@interface MVIMClockSystem : MVIMBase <MVIMClock>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)system __attribute__((swift_name("init()")));
- (MVIMInstant *)now __attribute__((swift_name("now()")));
@end;

__attribute__((swift_name("DateTimePeriod")))
@interface MVIMDateTimePeriod : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t days __attribute__((swift_name("days")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) int32_t months __attribute__((swift_name("months")));
@property (readonly) int32_t nanoseconds __attribute__((swift_name("nanoseconds")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@property (readonly) int32_t years __attribute__((swift_name("years")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriod")))
@interface MVIMDatePeriod : MVIMDateTimePeriod
- (instancetype)initWithYears:(int32_t)years months:(int32_t)months days:(int32_t)days __attribute__((swift_name("init(years:months:days:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (readonly) int32_t days __attribute__((swift_name("days")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) int32_t nanoseconds __attribute__((swift_name("nanoseconds")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriod.Companion")))
@interface MVIMDatePeriodCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMDatePeriod *)parseText:(NSString *)text __attribute__((swift_name("parse(text:)")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("KotlinRuntimeException")))
@interface MVIMKotlinRuntimeException : MVIMKotlinException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeArithmeticException")))
@interface MVIMDateTimeArithmeticException : MVIMKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriod.Companion")))
@interface MVIMDateTimePeriodCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMDateTimePeriod *)parseText:(NSString *)text __attribute__((swift_name("parse(text:)")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("DateTimeUnit")))
@interface MVIMDateTimeUnit : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)formatToStringValue:(int32_t)value unit:(NSString *)unit __attribute__((swift_name("formatToString(value:unit:)")));
- (NSString *)formatToStringValue:(int64_t)value unit_:(NSString *)unit __attribute__((swift_name("formatToString(value:unit_:)")));
- (MVIMDateTimeUnit *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.Companion")))
@interface MVIMDateTimeUnitCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) MVIMDateTimeUnitDateBasedMonthBased *CENTURY __attribute__((swift_name("CENTURY")));
@property (readonly) MVIMDateTimeUnitDateBasedDayBased *DAY __attribute__((swift_name("DAY")));
@property (readonly) MVIMDateTimeUnitTimeBased *HOUR __attribute__((swift_name("HOUR")));
@property (readonly) MVIMDateTimeUnitTimeBased *MICROSECOND __attribute__((swift_name("MICROSECOND")));
@property (readonly) MVIMDateTimeUnitTimeBased *MILLISECOND __attribute__((swift_name("MILLISECOND")));
@property (readonly) MVIMDateTimeUnitTimeBased *MINUTE __attribute__((swift_name("MINUTE")));
@property (readonly) MVIMDateTimeUnitDateBasedMonthBased *MONTH __attribute__((swift_name("MONTH")));
@property (readonly) MVIMDateTimeUnitTimeBased *NANOSECOND __attribute__((swift_name("NANOSECOND")));
@property (readonly) MVIMDateTimeUnitDateBasedMonthBased *QUARTER __attribute__((swift_name("QUARTER")));
@property (readonly) MVIMDateTimeUnitTimeBased *SECOND __attribute__((swift_name("SECOND")));
@property (readonly) MVIMDateTimeUnitDateBasedDayBased *WEEK __attribute__((swift_name("WEEK")));
@property (readonly) MVIMDateTimeUnitDateBasedMonthBased *YEAR __attribute__((swift_name("YEAR")));
@end;

__attribute__((swift_name("DateTimeUnit.DateBased")))
@interface MVIMDateTimeUnitDateBased : MVIMDateTimeUnit
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DateBasedCompanion")))
@interface MVIMDateTimeUnitDateBasedCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DateBasedDayBased")))
@interface MVIMDateTimeUnitDateBasedDayBased : MVIMDateTimeUnitDateBased
- (instancetype)initWithDays:(int32_t)days __attribute__((swift_name("init(days:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (MVIMDateTimeUnitDateBasedDayBased *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t days __attribute__((swift_name("days")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DateBasedDayBasedCompanion")))
@interface MVIMDateTimeUnitDateBasedDayBasedCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DateBasedMonthBased")))
@interface MVIMDateTimeUnitDateBasedMonthBased : MVIMDateTimeUnitDateBased
- (instancetype)initWithMonths:(int32_t)months __attribute__((swift_name("init(months:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (MVIMDateTimeUnitDateBasedMonthBased *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t months __attribute__((swift_name("months")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.DateBasedMonthBasedCompanion")))
@interface MVIMDateTimeUnitDateBasedMonthBasedCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.TimeBased")))
@interface MVIMDateTimeUnitTimeBased : MVIMDateTimeUnit
- (instancetype)initWithNanoseconds:(int64_t)nanoseconds __attribute__((swift_name("init(nanoseconds:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (MVIMDateTimeUnitTimeBased *)timesScalar:(int32_t)scalar __attribute__((swift_name("times(scalar:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t duration __attribute__((swift_name("duration")));
@property (readonly) int64_t nanoseconds __attribute__((swift_name("nanoseconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnit.TimeBasedCompanion")))
@interface MVIMDateTimeUnitTimeBasedCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayOfWeek")))
@interface MVIMDayOfWeek : MVIMKotlinEnum<MVIMDayOfWeek *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMDayOfWeek *monday __attribute__((swift_name("monday")));
@property (class, readonly) MVIMDayOfWeek *tuesday __attribute__((swift_name("tuesday")));
@property (class, readonly) MVIMDayOfWeek *wednesday __attribute__((swift_name("wednesday")));
@property (class, readonly) MVIMDayOfWeek *thursday __attribute__((swift_name("thursday")));
@property (class, readonly) MVIMDayOfWeek *friday __attribute__((swift_name("friday")));
@property (class, readonly) MVIMDayOfWeek *saturday __attribute__((swift_name("saturday")));
@property (class, readonly) MVIMDayOfWeek *sunday __attribute__((swift_name("sunday")));
+ (MVIMKotlinArray<MVIMDayOfWeek *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("KotlinIllegalArgumentException")))
@interface MVIMKotlinIllegalArgumentException : MVIMKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IllegalTimeZoneException")))
@interface MVIMIllegalTimeZoneException : MVIMKotlinIllegalArgumentException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Instant")))
@interface MVIMInstant : MVIMBase <MVIMKotlinComparable>
- (int32_t)compareToOther:(MVIMInstant *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (MVIMInstant *)minusDuration:(int64_t)duration __attribute__((swift_name("minus(duration:)")));
- (int64_t)minusOther:(MVIMInstant *)other __attribute__((swift_name("minus(other:)")));
- (MVIMInstant *)plusDuration:(int64_t)duration __attribute__((swift_name("plus(duration:)")));
- (int64_t)toEpochMilliseconds __attribute__((swift_name("toEpochMilliseconds()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t epochSeconds __attribute__((swift_name("epochSeconds")));
@property (readonly) int32_t nanosecondsOfSecond __attribute__((swift_name("nanosecondsOfSecond")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Instant.Companion")))
@interface MVIMInstantCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMInstant *)fromEpochMillisecondsEpochMilliseconds:(int64_t)epochMilliseconds __attribute__((swift_name("fromEpochMilliseconds(epochMilliseconds:)")));
- (MVIMInstant *)fromEpochSecondsEpochSeconds:(int64_t)epochSeconds nanosecondAdjustment:(int32_t)nanosecondAdjustment __attribute__((swift_name("fromEpochSeconds(epochSeconds:nanosecondAdjustment:)")));
- (MVIMInstant *)fromEpochSecondsEpochSeconds:(int64_t)epochSeconds nanosecondAdjustment_:(int64_t)nanosecondAdjustment __attribute__((swift_name("fromEpochSeconds(epochSeconds:nanosecondAdjustment_:)")));
- (MVIMInstant *)now __attribute__((swift_name("now()"))) __attribute__((unavailable("Use Clock.System.now() instead")));
- (MVIMInstant *)parseIsoString:(NSString *)isoString __attribute__((swift_name("parse(isoString:)")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) MVIMInstant *DISTANT_FUTURE __attribute__((swift_name("DISTANT_FUTURE")));
@property (readonly) MVIMInstant *DISTANT_PAST __attribute__((swift_name("DISTANT_PAST")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDate")))
@interface MVIMLocalDate : MVIMBase <MVIMKotlinComparable>
- (instancetype)initWithYear:(int32_t)year month:(MVIMMonth *)month dayOfMonth:(int32_t)dayOfMonth __attribute__((swift_name("init(year:month:dayOfMonth:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithYear:(int32_t)year monthNumber:(int32_t)monthNumber dayOfMonth:(int32_t)dayOfMonth __attribute__((swift_name("init(year:monthNumber:dayOfMonth:)"))) __attribute__((objc_designated_initializer));
- (int32_t)compareToOther:(MVIMLocalDate *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) MVIMDayOfWeek *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) MVIMMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t monthNumber __attribute__((swift_name("monthNumber")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDate.Companion")))
@interface MVIMLocalDateCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMLocalDate *)parseIsoString:(NSString *)isoString __attribute__((swift_name("parse(isoString:)")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTime")))
@interface MVIMLocalDateTime : MVIMBase <MVIMKotlinComparable>
- (instancetype)initWithYear:(int32_t)year monthNumber:(int32_t)monthNumber dayOfMonth:(int32_t)dayOfMonth hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second nanosecond:(int32_t)nanosecond __attribute__((swift_name("init(year:monthNumber:dayOfMonth:hour:minute:second:nanosecond:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithYear:(int32_t)year month:(MVIMMonth *)month dayOfMonth:(int32_t)dayOfMonth hour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second nanosecond:(int32_t)nanosecond __attribute__((swift_name("init(year:month:dayOfMonth:hour:minute:second:nanosecond:)"))) __attribute__((objc_designated_initializer));
- (int32_t)compareToOther:(MVIMLocalDateTime *)other __attribute__((swift_name("compareTo(other:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLocalDate *date __attribute__((swift_name("date")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) MVIMDayOfWeek *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) int32_t hour __attribute__((swift_name("hour")));
@property (readonly) int32_t minute __attribute__((swift_name("minute")));
@property (readonly) MVIMMonth *month __attribute__((swift_name("month")));
@property (readonly) int32_t monthNumber __attribute__((swift_name("monthNumber")));
@property (readonly) int32_t nanosecond __attribute__((swift_name("nanosecond")));
@property (readonly) int32_t second __attribute__((swift_name("second")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTime.Companion")))
@interface MVIMLocalDateTimeCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMLocalDateTime *)parseIsoString:(NSString *)isoString __attribute__((swift_name("parse(isoString:)")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Month")))
@interface MVIMMonth : MVIMKotlinEnum<MVIMMonth *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMMonth *january __attribute__((swift_name("january")));
@property (class, readonly) MVIMMonth *february __attribute__((swift_name("february")));
@property (class, readonly) MVIMMonth *march __attribute__((swift_name("march")));
@property (class, readonly) MVIMMonth *april __attribute__((swift_name("april")));
@property (class, readonly) MVIMMonth *may __attribute__((swift_name("may")));
@property (class, readonly) MVIMMonth *june __attribute__((swift_name("june")));
@property (class, readonly) MVIMMonth *july __attribute__((swift_name("july")));
@property (class, readonly) MVIMMonth *august __attribute__((swift_name("august")));
@property (class, readonly) MVIMMonth *september __attribute__((swift_name("september")));
@property (class, readonly) MVIMMonth *october __attribute__((swift_name("october")));
@property (class, readonly) MVIMMonth *november __attribute__((swift_name("november")));
@property (class, readonly) MVIMMonth *december __attribute__((swift_name("december")));
+ (MVIMKotlinArray<MVIMMonth *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("TimeZone")))
@interface MVIMTimeZone : MVIMBase
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (MVIMInstant *)toInstant:(MVIMLocalDateTime *)receiver __attribute__((swift_name("toInstant(_:)")));
- (MVIMLocalDateTime *)toLocalDateTime:(MVIMInstant *)receiver __attribute__((swift_name("toLocalDateTime(_:)")));
@property (readonly) NSString *id __attribute__((swift_name("id")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeZone.Companion")))
@interface MVIMTimeZoneCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMTimeZone *)currentSystemDefault __attribute__((swift_name("currentSystemDefault()")));
- (MVIMTimeZone *)ofZoneId:(NSString *)zoneId __attribute__((swift_name("of(zoneId:)")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@property (readonly) MVIMTimeZone *UTC __attribute__((swift_name("UTC")));
@property (readonly) NSSet<NSString *> *availableZoneIds __attribute__((swift_name("availableZoneIds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ZoneOffset")))
@interface MVIMZoneOffset : MVIMTimeZone
@property (readonly) int32_t totalSeconds __attribute__((swift_name("totalSeconds")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ZoneOffset.Companion")))
@interface MVIMZoneOffsetCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("SerializationStrategy")))
@protocol MVIMSerializationStrategy
@required
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(id _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("DeserializationStrategy")))
@protocol MVIMDeserializationStrategy
@required
- (id _Nullable)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("KSerializer")))
@protocol MVIMKSerializer <MVIMSerializationStrategy, MVIMDeserializationStrategy>
@required
@end;

__attribute__((swift_name("AbstractPolymorphicSerializer")))
@interface MVIMAbstractPolymorphicSerializer<T> : MVIMBase <MVIMKSerializer>
- (T)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (id<MVIMDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<MVIMCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<MVIMSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<MVIMEncoder>)encoder value:(T)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateBasedDateTimeUnitSerializer")))
@interface MVIMDateBasedDateTimeUnitSerializer : MVIMAbstractPolymorphicSerializer<MVIMDateTimeUnitDateBased *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
- (id<MVIMDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<MVIMCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<MVIMSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimeUnitDateBased *)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
@property (readonly) id<MVIMKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriodComponentSerializer")))
@interface MVIMDatePeriodComponentSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)datePeriodComponentSerializer __attribute__((swift_name("init()")));
- (MVIMDatePeriod *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDatePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatePeriodIso8601Serializer")))
@interface MVIMDatePeriodIso8601Serializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)datePeriodIso8601Serializer __attribute__((swift_name("init()")));
- (MVIMDatePeriod *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDatePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriodComponentSerializer")))
@interface MVIMDateTimePeriodComponentSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateTimePeriodComponentSerializer __attribute__((swift_name("init()")));
- (MVIMDateTimePeriod *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriodIso8601Serializer")))
@interface MVIMDateTimePeriodIso8601Serializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateTimePeriodIso8601Serializer __attribute__((swift_name("init()")));
- (MVIMDateTimePeriod *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimePeriod *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimeUnitSerializer")))
@interface MVIMDateTimeUnitSerializer : MVIMAbstractPolymorphicSerializer<MVIMDateTimeUnit *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dateTimeUnitSerializer __attribute__((swift_name("init()")));
- (id<MVIMDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<MVIMCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<MVIMSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimeUnit *)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
@property (readonly) id<MVIMKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayBasedDateTimeUnitSerializer")))
@interface MVIMDayBasedDateTimeUnitSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dayBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
- (MVIMDateTimeUnitDateBasedDayBased *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimeUnitDateBasedDayBased *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayOfWeekSerializer")))
@interface MVIMDayOfWeekSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dayOfWeekSerializer __attribute__((swift_name("init()")));
- (MVIMDayOfWeek *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDayOfWeek *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstantComponentSerializer")))
@interface MVIMInstantComponentSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)instantComponentSerializer __attribute__((swift_name("init()")));
- (MVIMInstant *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMInstant *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstantIso8601Serializer")))
@interface MVIMInstantIso8601Serializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)instantIso8601Serializer __attribute__((swift_name("init()")));
- (MVIMInstant *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMInstant *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateComponentSerializer")))
@interface MVIMLocalDateComponentSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateComponentSerializer __attribute__((swift_name("init()")));
- (MVIMLocalDate *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMLocalDate *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateIso8601Serializer")))
@interface MVIMLocalDateIso8601Serializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateIso8601Serializer __attribute__((swift_name("init()")));
- (MVIMLocalDate *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMLocalDate *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTimeComponentSerializer")))
@interface MVIMLocalDateTimeComponentSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateTimeComponentSerializer __attribute__((swift_name("init()")));
- (MVIMLocalDateTime *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMLocalDateTime *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTimeIso8601Serializer")))
@interface MVIMLocalDateTimeIso8601Serializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)localDateTimeIso8601Serializer __attribute__((swift_name("init()")));
- (MVIMLocalDateTime *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMLocalDateTime *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MonthBasedDateTimeUnitSerializer")))
@interface MVIMMonthBasedDateTimeUnitSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)monthBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
- (MVIMDateTimeUnitDateBasedMonthBased *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimeUnitDateBasedMonthBased *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MonthSerializer")))
@interface MVIMMonthSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)monthSerializer __attribute__((swift_name("init()")));
- (MVIMMonth *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMMonth *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeBasedDateTimeUnitSerializer")))
@interface MVIMTimeBasedDateTimeUnitSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)timeBasedDateTimeUnitSerializer __attribute__((swift_name("init()")));
- (MVIMDateTimeUnitTimeBased *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMDateTimeUnitTimeBased *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeZoneSerializer")))
@interface MVIMTimeZoneSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)timeZoneSerializer __attribute__((swift_name("init()")));
- (MVIMTimeZone *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMTimeZone *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ZoneOffsetSerializer")))
@interface MVIMZoneOffsetSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)zoneOffsetSerializer __attribute__((swift_name("init()")));
- (MVIMZoneOffset *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMZoneOffset *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonFeature")))
@interface MVIMJsonFeature : MVIMBase
- (instancetype)initWithSerializer:(id<MVIMJsonSerializer>)serializer __attribute__((swift_name("init(serializer:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Install feature properly instead of direct instantiation.")));
@property (readonly) NSArray<MVIMContentType *> *acceptContentTypes __attribute__((swift_name("acceptContentTypes")));
@property (readonly) id<MVIMJsonSerializer> serializer __attribute__((swift_name("serializer")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonFeature.Config")))
@interface MVIMJsonFeatureConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)acceptContentTypes:(MVIMKotlinArray<MVIMContentType *> *)contentTypes __attribute__((swift_name("accept(contentTypes:)")));
- (void)receiveMatcher:(id<MVIMContentTypeMatcher>)matcher __attribute__((swift_name("receive(matcher:)")));
@property NSArray<MVIMContentType *> *acceptContentTypes __attribute__((swift_name("acceptContentTypes")));
@property NSArray<id<MVIMContentTypeMatcher>> *receiveContentTypeMatchers __attribute__((swift_name("receiveContentTypeMatchers")));
@property id<MVIMJsonSerializer> _Nullable serializer __attribute__((swift_name("serializer")));
@end;

__attribute__((swift_name("HttpClientFeature")))
@protocol MVIMHttpClientFeature
@required
- (void)installFeature:(id)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (id)prepareBlock:(void (^)(id))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<id> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonFeature.Feature")))
@interface MVIMJsonFeatureFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMJsonFeature *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMJsonFeature *)prepareBlock:(void (^)(MVIMJsonFeatureConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMJsonFeature *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LogLevel")))
@interface MVIMLogLevel : MVIMKotlinEnum<MVIMLogLevel *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMLogLevel *all __attribute__((swift_name("all")));
@property (class, readonly) MVIMLogLevel *headers __attribute__((swift_name("headers")));
@property (class, readonly) MVIMLogLevel *body __attribute__((swift_name("body")));
@property (class, readonly) MVIMLogLevel *info __attribute__((swift_name("info")));
@property (class, readonly) MVIMLogLevel *none __attribute__((swift_name("none")));
+ (MVIMKotlinArray<MVIMLogLevel *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL body __attribute__((swift_name("body")));
@property (readonly) BOOL headers __attribute__((swift_name("headers")));
@property (readonly) BOOL info __attribute__((swift_name("info")));
@end;

__attribute__((swift_name("Logger__")))
@protocol MVIMLogger
@required
- (void)logMessage:(NSString *)message __attribute__((swift_name("log(message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logger__Companion")))
@interface MVIMLoggerCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging")))
@interface MVIMLogging : MVIMBase
- (instancetype)initWithLogger:(id<MVIMLogger>)logger level:(MVIMLogLevel *)level __attribute__((swift_name("init(logger:level:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithLogger:(id<MVIMLogger>)logger level:(MVIMLogLevel *)level filters:(NSArray<MVIMBoolean *(^)(MVIMHttpRequestBuilder *)> *)filters __attribute__((swift_name("init(logger:level:filters:)"))) __attribute__((objc_designated_initializer));
@property NSArray<MVIMBoolean *(^)(MVIMHttpRequestBuilder *)> *filters __attribute__((swift_name("filters")));
@property MVIMLogLevel *level __attribute__((swift_name("level")));
@property (readonly) id<MVIMLogger> logger __attribute__((swift_name("logger")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging.Companion")))
@interface MVIMLoggingCompanion : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMLogging *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMLogging *)prepareBlock:(void (^)(MVIMLoggingConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMLogging *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Logging.Config")))
@interface MVIMLoggingConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)filterPredicate:(MVIMBoolean *(^)(MVIMHttpRequestBuilder *))predicate __attribute__((swift_name("filter(predicate:)")));
@property MVIMLogLevel *level __attribute__((swift_name("level")));
@property id<MVIMLogger> logger __attribute__((swift_name("logger")));
@end;

__attribute__((swift_name("HttpClientEngineFactory")))
@protocol MVIMHttpClientEngineFactory
@required
- (id<MVIMHttpClientEngine>)createBlock:(void (^)(MVIMHttpClientEngineConfig *))block __attribute__((swift_name("create(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Ios")))
@interface MVIMIos : MVIMBase <MVIMHttpClientEngineFactory>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)ios __attribute__((swift_name("init()")));
- (id<MVIMHttpClientEngine>)createBlock:(void (^)(MVIMIosClientEngineConfig *))block __attribute__((swift_name("create(block:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("HttpClientEngineConfig")))
@interface MVIMHttpClientEngineConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property BOOL pipelining __attribute__((swift_name("pipelining")));
@property MVIMProxyConfig * _Nullable proxy __attribute__((swift_name("proxy")));
@property (readonly) MVIMKotlinNothing *response __attribute__((swift_name("response"))) __attribute__((unavailable("Response config is deprecated. See [HttpPlainText] feature for charset configuration")));
@property int32_t threadsCount __attribute__((swift_name("threadsCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosClientEngineConfig")))
@interface MVIMIosClientEngineConfig : MVIMHttpClientEngineConfig
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)configureRequestBlock:(void (^)(NSMutableURLRequest *))block __attribute__((swift_name("configureRequest(block:)")));
- (void)configureSessionBlock:(void (^)(NSURLSessionConfiguration *))block __attribute__((swift_name("configureSession(block:)")));
- (void)handleChallengeBlock:(void (^)(NSURLSession *, NSURLSessionTask *, NSURLAuthenticationChallenge *, MVIMKotlinUnit *(^)(MVIMLong *, NSURLCredential * _Nullable)))block __attribute__((swift_name("handleChallenge(block:)")));
@property (readonly) void (^ _Nullable challengeHandler)(NSURLSession *, NSURLSessionTask *, NSURLAuthenticationChallenge *, MVIMKotlinUnit *(^)(MVIMLong *, NSURLCredential * _Nullable)) __attribute__((swift_name("challengeHandler")));
@property void (^requestConfig)(NSMutableURLRequest *) __attribute__((swift_name("requestConfig")));
@property void (^sessionConfig)(NSURLSessionConfiguration *) __attribute__((swift_name("sessionConfig")));
@end;

__attribute__((swift_name("IOException")))
@interface MVIMIOException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosHttpRequestException")))
@interface MVIMIosHttpRequestException : MVIMIOException
- (instancetype)initWithOrigin:(NSError *)origin __attribute__((swift_name("init(origin:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSError *origin __attribute__((swift_name("origin")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CertificatePinner")))
@interface MVIMCertificatePinner : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PinnedCertificate")))
@interface MVIMPinnedCertificate : MVIMBase
- (instancetype)initWithPattern:(NSString *)pattern hashAlgorithm:(NSString *)hashAlgorithm hash:(NSString *)hash __attribute__((swift_name("init(pattern:hashAlgorithm:hash:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (NSString *)component3 __attribute__((swift_name("component3()")));
- (MVIMPinnedCertificate *)doCopyPattern:(NSString *)pattern hashAlgorithm:(NSString *)hashAlgorithm hash:(NSString *)hash __attribute__((swift_name("doCopy(pattern:hashAlgorithm:hash:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly, getter=hash_) NSString *hash __attribute__((swift_name("hash")));
@property (readonly) NSString *hashAlgorithm __attribute__((swift_name("hashAlgorithm")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PinnedCertificate.Companion")))
@interface MVIMPinnedCertificateCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMPinnedCertificate *)doNewPattern:(NSString *)pattern pin:(NSString *)pin __attribute__((swift_name("doNew(pattern:pin:)")));
@end;

__attribute__((swift_name("Closeable_")))
@protocol MVIMCloseable_
@required
- (void)close __attribute__((swift_name("close()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClient")))
@interface MVIMHttpClient : MVIMBase <MVIMCoroutineScope, MVIMCloseable_>
- (instancetype)initWithEngine:(id<MVIMHttpClientEngine>)engine userConfig:(MVIMHttpClientConfig<MVIMHttpClientEngineConfig *> *)userConfig __attribute__((swift_name("init(engine:userConfig:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (MVIMHttpClient *)configBlock:(void (^)(MVIMHttpClientConfig<id> *))block __attribute__((swift_name("config(block:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(builder:completionHandler:)"))) __attribute__((unavailable("Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(builder)] instead.")));
- (BOOL)isSupportedCapability:(id<MVIMHttpClientEngineCapability>)capability __attribute__((swift_name("isSupported(capability:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) MVIMCoroutineDispatcher *dispatcher __attribute__((swift_name("dispatcher"))) __attribute__((unavailable("[dispatcher] is deprecated. Use coroutineContext instead.")));
@property (readonly) id<MVIMHttpClientEngine> engine __attribute__((swift_name("engine")));
@property (readonly) MVIMHttpClientEngineConfig *engineConfig __attribute__((swift_name("engineConfig")));
@property (readonly) MVIMHttpReceivePipeline *receivePipeline __attribute__((swift_name("receivePipeline")));
@property (readonly) MVIMHttpRequestPipeline *requestPipeline __attribute__((swift_name("requestPipeline")));
@property (readonly) MVIMHttpResponsePipeline *responsePipeline __attribute__((swift_name("responsePipeline")));
@property (readonly) MVIMHttpSendPipeline *sendPipeline __attribute__((swift_name("sendPipeline")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientConfig")))
@interface MVIMHttpClientConfig<T> : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMHttpClientConfig<T> *)clone __attribute__((swift_name("clone()")));
- (void)engineBlock:(void (^)(T))block __attribute__((swift_name("engine(block:)")));
- (void)installClient:(MVIMHttpClient *)client __attribute__((swift_name("install(client:)")));
- (void)installFeature:(id<MVIMHttpClientFeature>)feature configure:(void (^)(id))configure __attribute__((swift_name("install(feature:configure:)")));
- (void)installKey:(NSString *)key block:(void (^)(MVIMHttpClient *))block __attribute__((swift_name("install(key:block:)")));
- (void)plusAssignOther:(MVIMHttpClientConfig<T> *)other __attribute__((swift_name("plusAssign(other:)")));
@property BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@property BOOL followRedirects __attribute__((swift_name("followRedirects")));
@property BOOL useDefaultTransformers __attribute__((swift_name("useDefaultTransformers")));
@end;

__attribute__((swift_name("KotlinIllegalStateException")))
@interface MVIMKotlinIllegalStateException : MVIMKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DoubleReceiveException")))
@interface MVIMDoubleReceiveException : MVIMKotlinIllegalStateException
- (instancetype)initWithCall:(MVIMHttpClientCall *)call __attribute__((swift_name("init(call:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((swift_name("HttpClientCall")))
@interface MVIMHttpClientCall : MVIMBase <MVIMCoroutineScope>

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getResponseContentWithCompletionHandler:(void (^)(id<MVIMByteReadChannel> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("getResponseContent(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveInfo:(MVIMTypeInfo *)info completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(info:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveInfo:(id<MVIMTypeInfo>)info completionHandler_:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(info:completionHandler_:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL allowDoubleReceive __attribute__((swift_name("allowDoubleReceive")));
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) MVIMHttpClient * _Nullable client __attribute__((swift_name("client")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<MVIMHttpRequest> request __attribute__((swift_name("request")));
@property (readonly) MVIMHttpResponse *response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientCall.Companion")))
@interface MVIMHttpClientCallCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMAttributeKey<id> *CustomResponse __attribute__((swift_name("CustomResponse"))) __attribute__((deprecated("This is going to be removed. Please file a ticket with clarification why and what for do you need it.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpEngineCall")))
@interface MVIMHttpEngineCall : MVIMBase
- (instancetype)initWithRequest:(id<MVIMHttpRequest>)request response:(MVIMHttpResponse *)response __attribute__((swift_name("init(request:response:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("HttpEngineCall deprecated.")));
- (id<MVIMHttpRequest>)component1 __attribute__((swift_name("component1()")));
- (MVIMHttpResponse *)component2 __attribute__((swift_name("component2()")));
- (MVIMHttpEngineCall *)doCopyRequest:(id<MVIMHttpRequest>)request response:(MVIMHttpResponse *)response __attribute__((swift_name("doCopy(request:response:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMHttpRequest> request __attribute__((swift_name("request")));
@property (readonly) MVIMHttpResponse *response __attribute__((swift_name("response")));
@end;

__attribute__((swift_name("KotlinUnsupportedOperationException")))
@interface MVIMKotlinUnsupportedOperationException : MVIMKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NoTransformationFoundException")))
@interface MVIMNoTransformationFoundException : MVIMKotlinUnsupportedOperationException
- (instancetype)initWithResponse:(MVIMHttpResponse *)response from:(id<MVIMKotlinKClass>)from to:(id<MVIMKotlinKClass>)to __attribute__((swift_name("init(response:from:to:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReceivePipelineException")))
@interface MVIMReceivePipelineException : MVIMKotlinIllegalStateException
- (instancetype)initWithRequest:(MVIMHttpClientCall *)request info:(id<MVIMTypeInfo>)info cause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(request:info:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithRequest:(MVIMHttpClientCall *)request info:(MVIMTypeInfo *)info cause_:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(request:info:cause_:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Please use overload with io.ktor.util.reflect.TypeInfo parameter")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) MVIMKotlinThrowable *cause __attribute__((swift_name("cause")));
@property (readonly) MVIMTypeInfo *info __attribute__((swift_name("info")));
@property (readonly) MVIMHttpClientCall *request __attribute__((swift_name("request")));
@end;

__attribute__((swift_name("TypeInfo_")))
@protocol MVIMTypeInfo
@required
@property (readonly) id<MVIMKotlinKType> _Nullable kotlinType __attribute__((swift_name("kotlinType")));
@property (readonly) id<MVIMKotlinKType> reifiedType __attribute__((swift_name("reifiedType")));
@property (readonly) id<MVIMKotlinKClass> type __attribute__((swift_name("type")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeInfo")))
@interface MVIMTypeInfo : MVIMBase <MVIMTypeInfo>
- (instancetype)initWithType:(id<MVIMKotlinKClass>)type reifiedType:(id<MVIMKotlinKType>)reifiedType kotlinType:(id<MVIMKotlinKType> _Nullable)kotlinType __attribute__((swift_name("init(type:reifiedType:kotlinType:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("This was moved to another package.")));
- (id<MVIMKotlinKClass>)component1 __attribute__((swift_name("component1()")));
- (id<MVIMKotlinKType>)component2 __attribute__((swift_name("component2()")));
- (id<MVIMKotlinKType> _Nullable)component3 __attribute__((swift_name("component3()")));
- (MVIMTypeInfo *)doCopyType:(id<MVIMKotlinKClass>)type reifiedType:(id<MVIMKotlinKType>)reifiedType kotlinType:(id<MVIMKotlinKType> _Nullable)kotlinType __attribute__((swift_name("doCopy(type:reifiedType:kotlinType:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMKotlinKType> _Nullable kotlinType __attribute__((swift_name("kotlinType")));
@property (readonly) id<MVIMKotlinKType> reifiedType __attribute__((swift_name("reifiedType")));
@property (readonly) id<MVIMKotlinKClass> type __attribute__((swift_name("type")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsupportedContentTypeException")))
@interface MVIMUnsupportedContentTypeException : MVIMKotlinIllegalStateException
- (instancetype)initWithContent:(MVIMOutgoingContent *)content __attribute__((swift_name("init(content:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsupportedUpgradeProtocolException")))
@interface MVIMUnsupportedUpgradeProtocolException : MVIMKotlinIllegalArgumentException
- (instancetype)initWithUrl:(MVIMUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl")))
@interface MVIMCacheControl : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)cacheControl __attribute__((swift_name("init()")));
@property (readonly) NSString *MAX_AGE __attribute__((swift_name("MAX_AGE")));
@property (readonly) NSString *MAX_STALE __attribute__((swift_name("MAX_STALE")));
@property (readonly) NSString *MIN_FRESH __attribute__((swift_name("MIN_FRESH")));
@property (readonly) NSString *MUST_REVALIDATE __attribute__((swift_name("MUST_REVALIDATE")));
@property (readonly) NSString *NO_CACHE __attribute__((swift_name("NO_CACHE")));
@property (readonly) NSString *NO_STORE __attribute__((swift_name("NO_STORE")));
@property (readonly) NSString *NO_TRANSFORM __attribute__((swift_name("NO_TRANSFORM")));
@property (readonly) NSString *ONLY_IF_CACHED __attribute__((swift_name("ONLY_IF_CACHED")));
@property (readonly) NSString *PRIVATE __attribute__((swift_name("PRIVATE")));
@property (readonly) NSString *PROXY_REVALIDATE __attribute__((swift_name("PROXY_REVALIDATE")));
@property (readonly) NSString *PUBLIC __attribute__((swift_name("PUBLIC")));
@property (readonly) NSString *S_MAX_AGE __attribute__((swift_name("S_MAX_AGE")));
@end;

__attribute__((swift_name("OutgoingContent")))
@interface MVIMOutgoingContent : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id _Nullable)getPropertyKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("getProperty(key:)")));
- (void)setPropertyKey:(MVIMAttributeKey<id> *)key value:(id _Nullable)value __attribute__((swift_name("setProperty(key:value:)")));
@property (readonly) MVIMLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) MVIMContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) id<MVIMHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) MVIMHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end;

__attribute__((swift_name("OutgoingContent.NoContent")))
@interface MVIMOutgoingContentNoContent : MVIMOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyContent")))
@interface MVIMEmptyContent : MVIMOutgoingContentNoContent
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)emptyContent __attribute__((swift_name("init()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLong *contentLength __attribute__((swift_name("contentLength")));
@end;

__attribute__((swift_name("ClientUpgradeContent")))
@interface MVIMClientUpgradeContent : MVIMOutgoingContentNoContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)pipeToOutput:(id<MVIMByteWriteChannel>)output completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("pipeTo(output:completionHandler:)")));
- (void)verifyHeaders:(id<MVIMHeaders>)headers __attribute__((swift_name("verify(headers:)")));
@property (readonly) id<MVIMByteWriteChannel> output __attribute__((swift_name("output")));
@end;

__attribute__((swift_name("HttpMessage")))
@protocol MVIMHttpMessage
@required
@property (readonly) id<MVIMHeaders> headers_ __attribute__((swift_name("headers_")));
@end;

__attribute__((swift_name("HttpRequest")))
@protocol MVIMHttpRequest <MVIMHttpMessage, MVIMCoroutineScope>
@required
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) MVIMHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) MVIMOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) MVIMHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) MVIMUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((swift_name("DefaultHttpRequest")))
@interface MVIMDefaultHttpRequest : MVIMBase <MVIMHttpRequest>
- (instancetype)initWithCall:(MVIMHttpClientCall *)call data:(MVIMHttpRequestData *)data __attribute__((swift_name("init(call:data:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) MVIMHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) MVIMOutgoingContent *content __attribute__((swift_name("content")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<MVIMHeaders> headers_ __attribute__((swift_name("headers_")));
@property (readonly) MVIMHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) MVIMUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((swift_name("HttpMessageBuilder")))
@protocol MVIMHttpMessageBuilder
@required
@property (readonly) MVIMHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestBuilder")))
@interface MVIMHttpRequestBuilder : MVIMBase <MVIMHttpMessageBuilder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMHttpRequestData *)build __attribute__((swift_name("build()")));
- (id _Nullable)getCapabilityOrNullKey:(id<MVIMHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (void)setAttributesBlock:(void (^)(id<MVIMAttributes>))block __attribute__((swift_name("setAttributes(block:)")));
- (void)setCapabilityKey:(id<MVIMHttpClientEngineCapability>)key capability:(id)capability __attribute__((swift_name("setCapability(key:capability:)")));
- (MVIMHttpRequestBuilder *)takeFromBuilder:(MVIMHttpRequestBuilder *)builder __attribute__((swift_name("takeFrom(builder:)")));
- (MVIMHttpRequestBuilder *)takeFromWithExecutionContextBuilder:(MVIMHttpRequestBuilder *)builder __attribute__((swift_name("takeFromWithExecutionContext(builder:)")));
- (void)urlBlock:(void (^)(MVIMURLBuilder *, MVIMURLBuilder *))block __attribute__((swift_name("url(block:)")));
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property id body __attribute__((swift_name("body")));
@property (readonly) id<MVIMJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) MVIMHeadersBuilder *headers_ __attribute__((swift_name("headers_")));
@property MVIMHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) MVIMURLBuilder *url __attribute__((swift_name("url")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestBuilder.Companion")))
@interface MVIMHttpRequestBuilderCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestData")))
@interface MVIMHttpRequestData : MVIMBase
- (instancetype)initWithUrl:(MVIMUrl *)url method:(MVIMHttpMethod *)method headers:(id<MVIMHeaders>)headers body:(MVIMOutgoingContent *)body executionContext:(id<MVIMJob>)executionContext attributes:(id<MVIMAttributes>)attributes __attribute__((swift_name("init(url:method:headers:body:executionContext:attributes:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)getCapabilityOrNullKey:(id<MVIMHttpClientEngineCapability>)key __attribute__((swift_name("getCapabilityOrNull(key:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) MVIMOutgoingContent *body __attribute__((swift_name("body")));
@property (readonly) id<MVIMJob> executionContext __attribute__((swift_name("executionContext")));
@property (readonly) id<MVIMHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) MVIMHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) MVIMUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((swift_name("Pipeline")))
@interface MVIMPipeline<TSubject, TContext> : MVIMBase
- (instancetype)initWithPhase:(MVIMPipelinePhase *)phase interceptors:(NSArray<id<MVIMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhases:(MVIMKotlinArray<MVIMPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer));
- (void)addPhasePhase:(MVIMPipelinePhase *)phase __attribute__((swift_name("addPhase(phase:)")));
- (void)afterIntercepted __attribute__((swift_name("afterIntercepted()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeContext:(TContext)context subject:(TSubject)subject completionHandler:(void (^)(TSubject _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(context:subject:completionHandler:)")));
- (void)insertPhaseAfterReference:(MVIMPipelinePhase *)reference phase:(MVIMPipelinePhase *)phase __attribute__((swift_name("insertPhaseAfter(reference:phase:)")));
- (void)insertPhaseBeforeReference:(MVIMPipelinePhase *)reference phase:(MVIMPipelinePhase *)phase __attribute__((swift_name("insertPhaseBefore(reference:phase:)")));
- (void)interceptPhase:(MVIMPipelinePhase *)phase block:(id<MVIMKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(phase:block:)")));
- (void)mergeFrom:(MVIMPipeline<TSubject, TContext> *)from __attribute__((swift_name("merge(from:)")));
@property (readonly) id<MVIMAttributes> attributes __attribute__((swift_name("attributes")));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) NSArray<MVIMPipelinePhase *> *items __attribute__((swift_name("items")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestPipeline")))
@interface MVIMHttpRequestPipeline : MVIMPipeline<id, MVIMHttpRequestBuilder *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(MVIMPipelinePhase *)phase interceptors:(NSArray<id<MVIMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(MVIMKotlinArray<MVIMPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestPipeline.Phases")))
@interface MVIMHttpRequestPipelinePhases : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (readonly) MVIMPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) MVIMPipelinePhase *Render __attribute__((swift_name("Render")));
@property (readonly) MVIMPipelinePhase *Send __attribute__((swift_name("Send")));
@property (readonly) MVIMPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) MVIMPipelinePhase *Transform __attribute__((swift_name("Transform")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseData")))
@interface MVIMHttpResponseData : MVIMBase
- (instancetype)initWithStatusCode:(MVIMHttpStatusCode *)statusCode requestTime:(MVIMGMTDate *)requestTime headers:(id<MVIMHeaders>)headers version:(MVIMHttpProtocolVersion *)version body:(id)body callContext:(id<MVIMKotlinCoroutineContext>)callContext __attribute__((swift_name("init(statusCode:requestTime:headers:version:body:callContext:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id body __attribute__((swift_name("body")));
@property (readonly) id<MVIMKotlinCoroutineContext> callContext __attribute__((swift_name("callContext")));
@property (readonly) id<MVIMHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) MVIMGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) MVIMGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) MVIMHttpStatusCode *statusCode __attribute__((swift_name("statusCode")));
@property (readonly) MVIMHttpProtocolVersion *version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSendPipeline")))
@interface MVIMHttpSendPipeline : MVIMPipeline<id, MVIMHttpRequestBuilder *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(MVIMPipelinePhase *)phase interceptors:(NSArray<id<MVIMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(MVIMKotlinArray<MVIMPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSendPipeline.Phases")))
@interface MVIMHttpSendPipelinePhases : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (readonly) MVIMPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) MVIMPipelinePhase *Engine __attribute__((swift_name("Engine")));
@property (readonly) MVIMPipelinePhase *Monitoring __attribute__((swift_name("Monitoring")));
@property (readonly) MVIMPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) MVIMPipelinePhase *State __attribute__((swift_name("State")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormBuilder")))
@interface MVIMFormBuilder : MVIMBase
- (void)appendPart:(MVIMFormPart<id> *)part __attribute__((swift_name("append(part:)")));
- (void)appendKey:(NSString *)key value:(id)value headers:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers:)")));
- (void)appendKey:(NSString *)key value:(MVIMInputProvider *)value headers_:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers_:)")));
- (void)appendKey:(NSString *)key value:(MVIMByteReadPacket *)value headers__:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers__:)")));
- (void)appendKey:(NSString *)key value:(id<MVIMInput>)value headers___:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers___:)"))) __attribute__((unavailable("Input is not reusable. Please use [InputProvider] instead.")));
- (void)appendKey:(NSString *)key value:(MVIMKotlinByteArray *)value headers____:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers____:)")));
- (void)appendKey:(NSString *)key value:(id)value headers_____:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers_____:)")));
- (void)appendKey:(NSString *)key value:(NSString *)value headers______:(id<MVIMHeaders>)headers __attribute__((swift_name("append(key:value:headers______:)")));
- (void)appendInputKey:(NSString *)key headers:(id<MVIMHeaders>)headers size:(MVIMLong * _Nullable)size block:(id<MVIMInput> (^)(void))block __attribute__((swift_name("appendInput(key:headers:size:block:)")));
@end;

__attribute__((swift_name("OutgoingContent.ByteArrayContent")))
@interface MVIMOutgoingContentByteArrayContent : MVIMOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormDataContent")))
@interface MVIMFormDataContent : MVIMOutgoingContentByteArrayContent
- (instancetype)initWithFormData:(id<MVIMParameters>)formData __attribute__((swift_name("init(formData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (MVIMKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@property (readonly) MVIMLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) MVIMContentType *contentType __attribute__((swift_name("contentType")));
@property (readonly) id<MVIMParameters> formData __attribute__((swift_name("formData")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormPart")))
@interface MVIMFormPart<T> : MVIMBase
- (instancetype)initWithKey:(NSString *)key value:(T)value headers:(id<MVIMHeaders>)headers __attribute__((swift_name("init(key:value:headers:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (T)component2 __attribute__((swift_name("component2()")));
- (id<MVIMHeaders>)component3 __attribute__((swift_name("component3()")));
- (MVIMFormPart<T> *)doCopyKey:(NSString *)key value:(T)value headers:(id<MVIMHeaders>)headers __attribute__((swift_name("doCopy(key:value:headers:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSString *key __attribute__((swift_name("key")));
@property (readonly) T value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputProvider")))
@interface MVIMInputProvider : MVIMBase
- (instancetype)initWithSize:(MVIMLong * _Nullable)size block:(id<MVIMInput> (^)(void))block __attribute__((swift_name("init(size:block:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<MVIMInput> (^block)(void) __attribute__((swift_name("block")));
@property (readonly) MVIMLong * _Nullable size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("OutgoingContent.WriteChannelContent")))
@interface MVIMOutgoingContentWriteChannelContent : MVIMOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<MVIMByteWriteChannel>)channel completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiPartFormDataContent")))
@interface MVIMMultiPartFormDataContent : MVIMOutgoingContentWriteChannelContent
- (instancetype)initWithParts:(NSArray<MVIMPartData *> *)parts __attribute__((swift_name("init(parts:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeToChannel:(id<MVIMByteWriteChannel>)channel completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeTo(channel:completionHandler:)")));
@property (readonly) MVIMLong * _Nullable contentLength __attribute__((swift_name("contentLength")));
@property (readonly) MVIMContentType *contentType __attribute__((swift_name("contentType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponse_")))
@interface MVIMHttpResponse_ : MVIMBase <MVIMCoroutineScope, MVIMHttpMessage>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Unbound streaming [HttpResponse] is deprecated. Consider using [HttpStatement] instead.")));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<MVIMHeaders> headers_ __attribute__((swift_name("headers_")));
@end;

__attribute__((swift_name("HttpResponse")))
@interface MVIMHttpResponse : MVIMBase <MVIMHttpMessage, MVIMCoroutineScope>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<MVIMByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) MVIMGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) MVIMGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) MVIMHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) MVIMHttpProtocolVersion *version_ __attribute__((swift_name("version_")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultHttpResponse")))
@interface MVIMDefaultHttpResponse : MVIMHttpResponse
- (instancetype)initWithCall:(MVIMHttpClientCall *)call responseData:(MVIMHttpResponseData *)responseData __attribute__((swift_name("init(call:responseData:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@property (readonly) MVIMHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<MVIMByteReadChannel> content __attribute__((swift_name("content")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) id<MVIMHeaders> headers_ __attribute__((swift_name("headers_")));
@property (readonly) MVIMGMTDate *requestTime __attribute__((swift_name("requestTime")));
@property (readonly) MVIMGMTDate *responseTime __attribute__((swift_name("responseTime")));
@property (readonly) MVIMHttpStatusCode *status __attribute__((swift_name("status")));
@property (readonly) MVIMHttpProtocolVersion *version_ __attribute__((swift_name("version_")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpReceivePipeline")))
@interface MVIMHttpReceivePipeline : MVIMPipeline<MVIMHttpResponse *, MVIMHttpClientCall *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(MVIMPipelinePhase *)phase interceptors:(NSArray<id<MVIMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(MVIMKotlinArray<MVIMPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpReceivePipeline.Phases")))
@interface MVIMHttpReceivePipelinePhases : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (readonly) MVIMPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) MVIMPipelinePhase *Before __attribute__((swift_name("Before")));
@property (readonly) MVIMPipelinePhase *State __attribute__((swift_name("State")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponseContainer")))
@interface MVIMHttpResponseContainer : MVIMBase
- (instancetype)initWithExpectedType:(id<MVIMTypeInfo>)expectedType response:(id)response __attribute__((swift_name("init(expectedType:response:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithExpectedType:(MVIMTypeInfo *)expectedType response_:(id)response __attribute__((swift_name("init(expectedType:response_:)"))) __attribute__((objc_designated_initializer));
- (MVIMTypeInfo *)component1 __attribute__((swift_name("component1()")));
- (id)component2 __attribute__((swift_name("component2()")));
- (MVIMHttpResponseContainer *)doCopyExpectedType:(MVIMTypeInfo *)expectedType response:(id)response __attribute__((swift_name("doCopy(expectedType:response:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMTypeInfo *expectedType __attribute__((swift_name("expectedType")));
@property (readonly) id response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponsePipeline")))
@interface MVIMHttpResponsePipeline : MVIMPipeline<MVIMHttpResponseContainer *, MVIMHttpClientCall *>
- (instancetype)initWithDevelopmentMode:(BOOL)developmentMode __attribute__((swift_name("init(developmentMode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPhase:(MVIMPipelinePhase *)phase interceptors:(NSArray<id<MVIMKotlinSuspendFunction2>> *)interceptors __attribute__((swift_name("init(phase:interceptors:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithPhases:(MVIMKotlinArray<MVIMPipelinePhase *> *)phases __attribute__((swift_name("init(phases:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) BOOL developmentMode __attribute__((swift_name("developmentMode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpResponsePipeline.Phases")))
@interface MVIMHttpResponsePipelinePhases : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)phases __attribute__((swift_name("init()")));
@property (readonly) MVIMPipelinePhase *After __attribute__((swift_name("After")));
@property (readonly) MVIMPipelinePhase *Parse __attribute__((swift_name("Parse")));
@property (readonly) MVIMPipelinePhase *Receive __attribute__((swift_name("Receive")));
@property (readonly) MVIMPipelinePhase *State __attribute__((swift_name("State")));
@property (readonly) MVIMPipelinePhase *Transform __attribute__((swift_name("Transform")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatement")))
@interface MVIMHttpStatement : MVIMBase
- (instancetype)initWithBuilder:(MVIMHttpRequestBuilder *)builder client:(MVIMHttpClient *)client __attribute__((swift_name("init(builder:client:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeWithCompletionHandler:(void (^)(MVIMHttpResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeBlock:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveBlock:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(block:completionHandler:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientEngineClosedException")))
@interface MVIMClientEngineClosedException : MVIMKotlinIllegalStateException
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) MVIMKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@end;

__attribute__((swift_name("HttpClientEngine")))
@protocol MVIMHttpClientEngine <MVIMCoroutineScope, MVIMCloseable_>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeData:(MVIMHttpRequestData *)data completionHandler:(void (^)(MVIMHttpResponseData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(data:completionHandler:)")));
- (void)installClient:(MVIMHttpClient *)client __attribute__((swift_name("install(client:)")));
@property (readonly) MVIMHttpClientEngineConfig *config __attribute__((swift_name("config")));
@property (readonly) MVIMCoroutineDispatcher *dispatcher __attribute__((swift_name("dispatcher")));
@property (readonly) NSSet<id<MVIMHttpClientEngineCapability>> *supportedCapabilities __attribute__((swift_name("supportedCapabilities")));
@end;

__attribute__((swift_name("HttpClientEngineBase")))
@interface MVIMHttpClientEngineBase : MVIMBase <MVIMHttpClientEngine>
- (instancetype)initWithEngineName:(NSString *)engineName __attribute__((swift_name("init(engineName:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((swift_name("HttpClientEngineCapability")))
@protocol MVIMHttpClientEngineCapability
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyBuilder")))
@interface MVIMProxyBuilder : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)proxyBuilder __attribute__((swift_name("init()")));
- (MVIMProxyConfig *)httpUrl:(MVIMUrl *)url __attribute__((swift_name("http(url:)")));
- (MVIMProxyConfig *)socksHost:(NSString *)host port:(int32_t)port __attribute__((swift_name("socks(host:port:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyConfig")))
@interface MVIMProxyConfig : MVIMBase
- (instancetype)initWithUrl:(MVIMUrl *)url __attribute__((swift_name("init(url:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMUrl *url __attribute__((swift_name("url")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProxyType")))
@interface MVIMProxyType : MVIMKotlinEnum<MVIMProxyType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMProxyType *socks __attribute__((swift_name("socks")));
@property (class, readonly) MVIMProxyType *http __attribute__((swift_name("http")));
@property (class, readonly) MVIMProxyType *unknown __attribute__((swift_name("unknown")));
+ (MVIMKotlinArray<MVIMProxyType *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("KotlinIterable")))
@protocol MVIMKotlinIterable
@required
- (id<MVIMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("engines")))
@interface MVIMengines : MVIMBase <MVIMKotlinIterable>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)engines __attribute__((swift_name("init()")));
- (void)appendItem:(id<MVIMHttpClientEngineFactory>)item __attribute__((swift_name("append(item:)")));
- (id<MVIMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BodyProgress")))
@interface MVIMBodyProgress : MVIMBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BodyProgress.Feature")))
@interface MVIMBodyProgressFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMBodyProgress *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMBodyProgress *)prepareBlock:(void (^)(MVIMKotlinUnit *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMBodyProgress *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("ResponseException")))
@interface MVIMResponseException : MVIMKotlinIllegalStateException
- (instancetype)initWithResponse:(MVIMHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(MVIMHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) MVIMHttpResponse *response __attribute__((swift_name("response")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClientRequestException")))
@interface MVIMClientRequestException : MVIMResponseException
- (instancetype)initWithResponse:(MVIMHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(MVIMHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion_")))
@interface MVIMDataConversion_ : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dataConversion __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMDataConversion *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMDataConversion *)prepareBlock:(void (^)(MVIMDataConversionConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMDataConversion *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest")))
@interface MVIMDefaultRequest : MVIMBase
- (instancetype)initWithBuilder:(void (^)(MVIMHttpRequestBuilder *))builder __attribute__((swift_name("init(builder:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultRequest.Feature")))
@interface MVIMDefaultRequestFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMDefaultRequest *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMDefaultRequest *)prepareBlock:(void (^)(MVIMHttpRequestBuilder *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMDefaultRequest *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ExpectSuccess")))
@interface MVIMExpectSuccess : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Use [HttpCallValidator] instead.")));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ExpectSuccess.Companion")))
@interface MVIMExpectSuccessCompanion : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMExpectSuccess *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMExpectSuccess *)prepareBlock:(void (^)(MVIMKotlinUnit *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMExpectSuccess *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator")))
@interface MVIMHttpCallValidator : MVIMBase
- (instancetype)initWithResponseValidators:(NSArray<id<MVIMKotlinSuspendFunction1>> *)responseValidators callExceptionHandlers:(NSArray<id<MVIMKotlinSuspendFunction1>> *)callExceptionHandlers __attribute__((swift_name("init(responseValidators:callExceptionHandlers:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("This is going to become internal. Please file a ticket and clarify, why do you need it.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator.Companion")))
@interface MVIMHttpCallValidatorCompanion : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpCallValidator *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpCallValidator *)prepareBlock:(void (^)(MVIMHttpCallValidatorConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMHttpCallValidator *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCallValidator.Config")))
@interface MVIMHttpCallValidatorConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)handleResponseExceptionBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("handleResponseException(block:)")));
- (void)validateResponseBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("validateResponse(block:)")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess"))) __attribute__((deprecated("This property is ignored. Please use `expectSuccess` property in HttpClientConfig. This is going to become internal.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText")))
@interface MVIMHttpPlainText : MVIMBase
@property MVIMCharset *defaultCharset __attribute__((swift_name("defaultCharset"))) __attribute__((unavailable("Use [Config.register] method instead.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText.Config")))
@interface MVIMHttpPlainTextConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)registerCharset:(MVIMCharset *)charset quality:(MVIMFloat * _Nullable)quality __attribute__((swift_name("register(charset:quality:)")));
@property MVIMCharset *defaultCharset __attribute__((swift_name("defaultCharset"))) __attribute__((unavailable("Use [register] method instead.")));
@property MVIMCharset *responseCharsetFallback __attribute__((swift_name("responseCharsetFallback")));
@property MVIMCharset * _Nullable sendCharset __attribute__((swift_name("sendCharset")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpPlainText.Feature")))
@interface MVIMHttpPlainTextFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpPlainText *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpPlainText *)prepareBlock:(void (^)(MVIMHttpPlainTextConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMHttpPlainText *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect")))
@interface MVIMHttpRedirect : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property BOOL allowHttpsDowngrade __attribute__((swift_name("allowHttpsDowngrade")));
@property BOOL checkHttpMethod __attribute__((swift_name("checkHttpMethod")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRedirect.Feature")))
@interface MVIMHttpRedirectFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpRedirect *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpRedirect *)prepareBlock:(void (^)(MVIMHttpRedirect *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMHttpRedirect *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("KotlinCancellationException")))
@interface MVIMKotlinCancellationException : MVIMKotlinIllegalStateException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpRequestTimeoutException")))
@interface MVIMHttpRequestTimeoutException : MVIMKotlinCancellationException
- (instancetype)initWithRequest:(MVIMHttpRequestBuilder *)request __attribute__((swift_name("init(request:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend")))
@interface MVIMHttpSend : MVIMBase
- (instancetype)initWithMaxSendCount:(int32_t)maxSendCount __attribute__((swift_name("init(maxSendCount:)"))) __attribute__((objc_designated_initializer));
- (void)interceptBlock:(id<MVIMKotlinSuspendFunction3>)block __attribute__((swift_name("intercept(block:)")));
- (void)interceptBlock_:(id<MVIMKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(block_:)"))) __attribute__((deprecated("Intercept with one parameter is deprecated, use both call and request builder as parameters.")));
@property int32_t maxSendCount __attribute__((swift_name("maxSendCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpSend.Feature")))
@interface MVIMHttpSendFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpSend *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpSend *)prepareBlock:(void (^)(MVIMHttpSend *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMHttpSend *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout")))
@interface MVIMHttpTimeout : MVIMBase
- (instancetype)initWithRequestTimeoutMillis:(MVIMLong * _Nullable)requestTimeoutMillis connectTimeoutMillis:(MVIMLong * _Nullable)connectTimeoutMillis socketTimeoutMillis:(MVIMLong * _Nullable)socketTimeoutMillis __attribute__((swift_name("init(requestTimeoutMillis:connectTimeoutMillis:socketTimeoutMillis:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.Feature")))
@interface MVIMHttpTimeoutFeature : MVIMBase <MVIMHttpClientFeature, MVIMHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpTimeout *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpTimeout *)prepareBlock:(void (^)(MVIMHttpTimeoutHttpTimeoutCapabilityConfiguration *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) int64_t INFINITE_TIMEOUT_MS __attribute__((swift_name("INFINITE_TIMEOUT_MS")));
@property (readonly) MVIMAttributeKey<MVIMHttpTimeout *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.HttpTimeoutCapabilityConfiguration")))
@interface MVIMHttpTimeoutHttpTimeoutCapabilityConfiguration : MVIMBase
- (instancetype)initWithRequestTimeoutMillis:(MVIMLong * _Nullable)requestTimeoutMillis connectTimeoutMillis:(MVIMLong * _Nullable)connectTimeoutMillis socketTimeoutMillis:(MVIMLong * _Nullable)socketTimeoutMillis __attribute__((swift_name("init(requestTimeoutMillis:connectTimeoutMillis:socketTimeoutMillis:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property MVIMLong * _Nullable connectTimeoutMillis __attribute__((swift_name("connectTimeoutMillis")));
@property MVIMLong * _Nullable requestTimeoutMillis __attribute__((swift_name("requestTimeoutMillis")));
@property MVIMLong * _Nullable socketTimeoutMillis __attribute__((swift_name("socketTimeoutMillis")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeout.HttpTimeoutCapabilityConfigurationCompanion")))
@interface MVIMHttpTimeoutHttpTimeoutCapabilityConfigurationCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMAttributeKey<MVIMHttpTimeoutHttpTimeoutCapabilityConfiguration *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RedirectResponseException")))
@interface MVIMRedirectResponseException : MVIMResponseException
- (instancetype)initWithResponse:(MVIMHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(MVIMHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SendCountExceedException")))
@interface MVIMSendCountExceedException : MVIMKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("Sender")))
@protocol MVIMSender
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeRequestBuilder:(MVIMHttpRequestBuilder *)requestBuilder completionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(requestBuilder:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ServerResponseException")))
@interface MVIMServerResponseException : MVIMResponseException
- (instancetype)initWithResponse:(MVIMHttpResponse *)response __attribute__((swift_name("init(response:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Please, provide response text in constructor")));
- (instancetype)initWithResponse:(MVIMHttpResponse *)response cachedResponseText:(NSString *)cachedResponseText __attribute__((swift_name("init(response:cachedResponseText:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString * _Nullable message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent")))
@interface MVIMUserAgent : MVIMBase
- (instancetype)initWithAgent:(NSString *)agent __attribute__((swift_name("init(agent:)"))) __attribute__((objc_designated_initializer));
@property (readonly) NSString *agent __attribute__((swift_name("agent")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent.Config")))
@interface MVIMUserAgentConfig : MVIMBase
- (instancetype)initWithAgent:(NSString *)agent __attribute__((swift_name("init(agent:)"))) __attribute__((objc_designated_initializer));
@property NSString *agent __attribute__((swift_name("agent")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UserAgent.Feature")))
@interface MVIMUserAgentFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMUserAgent *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMUserAgent *)prepareBlock:(void (^)(MVIMUserAgentConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMUserAgent *> *key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("CookiesStorage")))
@protocol MVIMCookiesStorage <MVIMCloseable_>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(MVIMUrl *)requestUrl cookie:(MVIMCookie *)cookie completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(MVIMUrl *)requestUrl completionHandler:(void (^)(NSArray<MVIMCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AcceptAllCookiesStorage")))
@interface MVIMAcceptAllCookiesStorage : MVIMBase <MVIMCookiesStorage>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(MVIMUrl *)requestUrl cookie:(MVIMCookie *)cookie completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(MVIMUrl *)requestUrl completionHandler:(void (^)(NSArray<MVIMCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConstantCookiesStorage")))
@interface MVIMConstantCookiesStorage : MVIMBase <MVIMCookiesStorage>
- (instancetype)initWithCookies:(MVIMKotlinArray<MVIMCookie *> *)cookies __attribute__((swift_name("init(cookies:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)addCookieRequestUrl:(MVIMUrl *)requestUrl cookie:(MVIMCookie *)cookie completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(requestUrl:cookie:completionHandler:)")));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(MVIMUrl *)requestUrl completionHandler:(void (^)(NSArray<MVIMCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies")))
@interface MVIMHttpCookies : MVIMBase <MVIMCloseable_>
- (instancetype)initWithStorage:(id<MVIMCookiesStorage>)storage defaults:(NSArray<id<MVIMKotlinSuspendFunction1>> *)defaults __attribute__((swift_name("init(storage:defaults:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getRequestUrl:(MVIMUrl *)requestUrl completionHandler:(void (^)(NSArray<MVIMCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(requestUrl:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies.Companion")))
@interface MVIMHttpCookiesCompanion : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpCookies *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpCookies *)prepareBlock:(void (^)(MVIMHttpCookiesConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMHttpCookies *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookies.Config")))
@interface MVIMHttpCookiesConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)defaultBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("default(block:)")));
@property id<MVIMCookiesStorage> storage __attribute__((swift_name("storage")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver")))
@interface MVIMResponseObserver : MVIMBase
- (instancetype)initWithResponseHandler:(id<MVIMKotlinSuspendFunction1>)responseHandler __attribute__((swift_name("init(responseHandler:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver.Config")))
@interface MVIMResponseObserverConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)onResponseBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("onResponse(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ResponseObserver.Feature")))
@interface MVIMResponseObserverFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMResponseObserver *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMResponseObserver *)prepareBlock:(void (^)(MVIMResponseObserverConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMResponseObserver *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache")))
@interface MVIMHttpCache : MVIMBase
- (instancetype)initWithPublicStorage:(MVIMHttpCacheStorage *)publicStorage privateStorage:(MVIMHttpCacheStorage *)privateStorage __attribute__((swift_name("init(publicStorage:privateStorage:)"))) __attribute__((objc_designated_initializer));
@property (readonly) MVIMHttpCacheStorage *privateStorage __attribute__((swift_name("privateStorage")));
@property (readonly) MVIMHttpCacheStorage *publicStorage __attribute__((swift_name("publicStorage")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache.Companion")))
@interface MVIMHttpCacheCompanion : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMHttpCache *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMHttpCache *)prepareBlock:(void (^)(MVIMHttpCacheConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMHttpCache *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCache.Config")))
@interface MVIMHttpCacheConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property MVIMHttpCacheStorage *privateStorage __attribute__((swift_name("privateStorage")));
@property MVIMHttpCacheStorage *publicStorage __attribute__((swift_name("publicStorage")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCacheEntry")))
@interface MVIMHttpCacheEntry : MVIMBase
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
@property (readonly) MVIMKotlinByteArray *body __attribute__((swift_name("body")));
@property (readonly) MVIMGMTDate *expires __attribute__((swift_name("expires")));
@property (readonly) MVIMHttpResponse *response __attribute__((swift_name("response")));
@property (readonly) NSDictionary<NSString *, NSString *> *varyKeys __attribute__((swift_name("varyKeys")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidCacheStateException")))
@interface MVIMInvalidCacheStateException : MVIMKotlinIllegalStateException
- (instancetype)initWithRequestUrl:(MVIMUrl *)requestUrl __attribute__((swift_name("init(requestUrl:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("HttpCacheStorage")))
@interface MVIMHttpCacheStorage : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMHttpCacheEntry * _Nullable)findUrl:(MVIMUrl *)url varyKeys:(NSDictionary<NSString *, NSString *> *)varyKeys __attribute__((swift_name("find(url:varyKeys:)")));
- (NSSet<MVIMHttpCacheEntry *> *)findByUrlUrl:(MVIMUrl *)url __attribute__((swift_name("findByUrl(url:)")));
- (void)storeUrl:(MVIMUrl *)url value:(MVIMHttpCacheEntry *)value __attribute__((swift_name("store(url:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCacheStorage.Companion")))
@interface MVIMHttpCacheStorageCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMHttpCacheStorage *Disabled __attribute__((swift_name("Disabled")));
@property (readonly) MVIMHttpCacheStorage *(^Unlimited)(void) __attribute__((swift_name("Unlimited")));
@end;

__attribute__((swift_name("WebSocketSession")))
@protocol MVIMWebSocketSession <MVIMCoroutineScope>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)flushWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("flush(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendFrame:(MVIMFrame *)frame completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("send(frame:completionHandler:)")));
- (void)terminate __attribute__((swift_name("terminate()"))) __attribute__((deprecated("Use cancel() instead.")));
@property (readonly) NSArray<id<MVIMWebSocketExtension>> *extensions __attribute__((swift_name("extensions")));
@property (readonly) id<MVIMReceiveChannel> incoming __attribute__((swift_name("incoming")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) id<MVIMSendChannel> outgoing __attribute__((swift_name("outgoing")));
@end;

__attribute__((swift_name("ClientWebSocketSession")))
@protocol MVIMClientWebSocketSession <MVIMWebSocketSession>
@required
@property (readonly) MVIMHttpClientCall *call __attribute__((swift_name("call")));
@end;

__attribute__((swift_name("DefaultWebSocketSession")))
@protocol MVIMDefaultWebSocketSession <MVIMWebSocketSession>
@required
- (void)startNegotiatedExtensions:(NSArray<id<MVIMWebSocketExtension>> *)negotiatedExtensions __attribute__((swift_name("start(negotiatedExtensions:)")));
@property (readonly) id<MVIMDeferred> closeReason __attribute__((swift_name("closeReason")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultClientWebSocketSession")))
@interface MVIMDefaultClientWebSocketSession : MVIMBase <MVIMClientWebSocketSession, MVIMDefaultWebSocketSession>
- (instancetype)initWithCall:(MVIMHttpClientCall *)call delegate:(id<MVIMDefaultWebSocketSession>)delegate __attribute__((swift_name("init(call:delegate:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)flushWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("flush(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendFrame:(MVIMFrame *)frame completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("send(frame:completionHandler:)")));
- (void)startNegotiatedExtensions:(NSArray<id<MVIMWebSocketExtension>> *)negotiatedExtensions __attribute__((swift_name("start(negotiatedExtensions:)")));
- (void)terminate __attribute__((swift_name("terminate()"))) __attribute__((deprecated("Use cancel() instead.")));
@property (readonly) MVIMHttpClientCall *call __attribute__((swift_name("call")));
@property (readonly) id<MVIMDeferred> closeReason __attribute__((swift_name("closeReason")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) NSArray<id<MVIMWebSocketExtension>> *extensions __attribute__((swift_name("extensions")));
@property (readonly) id<MVIMReceiveChannel> incoming __attribute__((swift_name("incoming")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) id<MVIMSendChannel> outgoing __attribute__((swift_name("outgoing")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketCapability")))
@interface MVIMWebSocketCapability : MVIMBase <MVIMHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)webSocketCapability __attribute__((swift_name("init()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketException")))
@interface MVIMWebSocketException : MVIMKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionsCapability")))
@interface MVIMWebSocketExtensionsCapability : MVIMBase <MVIMHttpClientEngineCapability>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)webSocketExtensionsCapability __attribute__((swift_name("init()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets")))
@interface MVIMWebSockets : MVIMBase
- (instancetype)initWithPingInterval:(int64_t)pingInterval maxFrameSize:(int64_t)maxFrameSize __attribute__((swift_name("init(pingInterval:maxFrameSize:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@property (readonly) int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property (readonly) int64_t pingInterval __attribute__((swift_name("pingInterval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets.Config")))
@interface MVIMWebSocketsConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)extensionsBlock:(void (^)(MVIMWebSocketExtensionsConfig *))block __attribute__((swift_name("extensions(block:)")));
@property int64_t maxFrameSize __attribute__((swift_name("maxFrameSize")));
@property int64_t pingInterval __attribute__((swift_name("pingInterval")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSockets.Feature")))
@interface MVIMWebSocketsFeature : MVIMBase <MVIMHttpClientFeature>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)feature __attribute__((swift_name("init()")));
- (void)installFeature:(MVIMWebSockets *)feature scope:(MVIMHttpClient *)scope __attribute__((swift_name("install(feature:scope:)")));
- (MVIMWebSockets *)prepareBlock:(void (^)(MVIMWebSocketsConfig *))block __attribute__((swift_name("prepare(block:)")));
@property (readonly) MVIMAttributeKey<MVIMWebSockets *> *key __attribute__((swift_name("key")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectTimeoutException")))
@interface MVIMConnectTimeoutException : MVIMIOException
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SocketTimeoutException")))
@interface MVIMSocketTimeoutException : MVIMIOException
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("StringValues")))
@protocol MVIMStringValues
@required
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end;

__attribute__((swift_name("Headers")))
@protocol MVIMHeaders <MVIMStringValues>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CIOHeaders")))
@interface MVIMCIOHeaders : MVIMBase <MVIMHeaders>
- (instancetype)initWithHeaders:(MVIMHttpHeadersMap *)headers __attribute__((swift_name("init(headers:)"))) __attribute__((objc_designated_initializer));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectionOptions")))
@interface MVIMConnectionOptions : MVIMBase
- (instancetype)initWithClose:(BOOL)close keepAlive:(BOOL)keepAlive upgrade:(BOOL)upgrade extraOptions:(NSArray<NSString *> *)extraOptions __attribute__((swift_name("init(close:keepAlive:upgrade:extraOptions:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL close __attribute__((swift_name("close")));
@property (readonly) NSArray<NSString *> *extraOptions __attribute__((swift_name("extraOptions")));
@property (readonly) BOOL keepAlive __attribute__((swift_name("keepAlive")));
@property (readonly) BOOL upgrade __attribute__((swift_name("upgrade")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConnectionOptions.Companion")))
@interface MVIMConnectionOptionsCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMConnectionOptions * _Nullable)parseConnection:(id _Nullable)connection __attribute__((swift_name("parse(connection:)")));
@property (readonly) MVIMConnectionOptions *Close __attribute__((swift_name("Close")));
@property (readonly) MVIMConnectionOptions *KeepAlive __attribute__((swift_name("KeepAlive")));
@property (readonly) MVIMConnectionOptions *Upgrade __attribute__((swift_name("Upgrade")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpHeadersMap")))
@interface MVIMHttpHeadersMap : MVIMBase
- (int32_t)findName:(NSString *)name fromIndex:(int32_t)fromIndex __attribute__((swift_name("find(name:fromIndex:)")));
- (id _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (id<MVIMKotlinSequence>)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (id)nameAtIdx:(int32_t)idx __attribute__((swift_name("nameAt(idx:)")));
- (void)putNameHash:(int32_t)nameHash valueHash:(int32_t)valueHash nameStartIndex:(int32_t)nameStartIndex nameEndIndex:(int32_t)nameEndIndex valueStartIndex:(int32_t)valueStartIndex valueEndIndex:(int32_t)valueEndIndex __attribute__((swift_name("put(nameHash:valueHash:nameStartIndex:nameEndIndex:valueStartIndex:valueEndIndex:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (id)valueAtIdx:(int32_t)idx __attribute__((swift_name("valueAt(idx:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("HttpMessage_")))
@interface MVIMHttpMessage : MVIMBase <MVIMCloseable_>
- (void)close __attribute__((swift_name("close()")));
- (void)release_ __attribute__((swift_name("release()")));
@property (readonly) MVIMHttpHeadersMap *headers __attribute__((swift_name("headers")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParserException")))
@interface MVIMParserException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Request")))
@interface MVIMRequest : MVIMHttpMessage
@property (readonly) MVIMHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) id uri __attribute__((swift_name("uri")));
@property (readonly) id version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RequestResponseBuilder")))
@interface MVIMRequestResponseBuilder : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMByteReadPacket *)build __attribute__((swift_name("build()")));
- (void)bytesContent:(MVIMKotlinByteArray *)content offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("bytes(content:offset:length:)")));
- (void)emptyLine __attribute__((swift_name("emptyLine()")));
- (void)headerLineName:(id)name value:(id)value __attribute__((swift_name("headerLine(name:value:)")));
- (void)lineLine:(id)line __attribute__((swift_name("line(line:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (void)requestLineMethod:(MVIMHttpMethod *)method uri:(id)uri version:(id)version __attribute__((swift_name("requestLine(method:uri:version:)")));
- (void)responseLineVersion:(id)version status:(int32_t)status statusText:(id)statusText __attribute__((swift_name("responseLine(version:status:statusText:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Response")))
@interface MVIMResponse : MVIMHttpMessage
@property (readonly) int32_t status __attribute__((swift_name("status")));
@property (readonly) id statusText __attribute__((swift_name("statusText")));
@property (readonly) id version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseReason")))
@interface MVIMCloseReason : MVIMBase
- (instancetype)initWithCode:(MVIMCloseReasonCodes *)code message:(NSString *)message __attribute__((swift_name("init(code:message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCode:(int16_t)code message_:(NSString *)message __attribute__((swift_name("init(code:message_:)"))) __attribute__((objc_designated_initializer));
- (int16_t)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (MVIMCloseReason *)doCopyCode:(int16_t)code message:(NSString *)message __attribute__((swift_name("doCopy(code:message:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int16_t code __attribute__((swift_name("code")));
@property (readonly) MVIMCloseReasonCodes * _Nullable knownReason __attribute__((swift_name("knownReason")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseReason.Codes")))
@interface MVIMCloseReasonCodes : MVIMKotlinEnum<MVIMCloseReasonCodes *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMCloseReasonCodes *normal __attribute__((swift_name("normal")));
@property (class, readonly) MVIMCloseReasonCodes *goingAway __attribute__((swift_name("goingAway")));
@property (class, readonly) MVIMCloseReasonCodes *protocolError __attribute__((swift_name("protocolError")));
@property (class, readonly) MVIMCloseReasonCodes *cannotAccept __attribute__((swift_name("cannotAccept")));
@property (class, readonly) MVIMCloseReasonCodes *closedAbnormally __attribute__((swift_name("closedAbnormally")));
@property (class, readonly) MVIMCloseReasonCodes *notConsistent __attribute__((swift_name("notConsistent")));
@property (class, readonly) MVIMCloseReasonCodes *violatedPolicy __attribute__((swift_name("violatedPolicy")));
@property (class, readonly) MVIMCloseReasonCodes *tooBig __attribute__((swift_name("tooBig")));
@property (class, readonly) MVIMCloseReasonCodes *noExtension __attribute__((swift_name("noExtension")));
@property (class, readonly) MVIMCloseReasonCodes *internalError __attribute__((swift_name("internalError")));
@property (class, readonly) MVIMCloseReasonCodes *serviceRestart __attribute__((swift_name("serviceRestart")));
@property (class, readonly) MVIMCloseReasonCodes *tryAgainLater __attribute__((swift_name("tryAgainLater")));
+ (MVIMKotlinArray<MVIMCloseReasonCodes *> *)values __attribute__((swift_name("values()")));
@property (readonly) int16_t code __attribute__((swift_name("code")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseReason.CodesCompanion")))
@interface MVIMCloseReasonCodesCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMCloseReasonCodes * _Nullable)byCodeCode:(int16_t)code __attribute__((swift_name("byCode(code:)")));
@property (readonly) MVIMCloseReasonCodes *UNEXPECTED_CONDITION __attribute__((swift_name("UNEXPECTED_CONDITION"))) __attribute__((deprecated("Use INTERNAL_ERROR instead.")));
@end;

__attribute__((swift_name("Frame")))
@interface MVIMFrame : MVIMBase
- (instancetype)initWithFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:frameType:data:disposableHandle:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer));
- (MVIMFrame *)doCopy __attribute__((swift_name("doCopy()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMKotlinByteArray *data __attribute__((swift_name("data")));
@property (readonly) id<MVIMDisposableHandle> disposableHandle __attribute__((swift_name("disposableHandle")));
@property (readonly) BOOL fin __attribute__((swift_name("fin")));
@property (readonly) MVIMFrameType *frameType __attribute__((swift_name("frameType")));
@property (readonly) BOOL rsv1 __attribute__((swift_name("rsv1")));
@property (readonly) BOOL rsv2 __attribute__((swift_name("rsv2")));
@property (readonly) BOOL rsv3 __attribute__((swift_name("rsv3")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Binary")))
@interface MVIMFrameBinary : MVIMFrame
- (instancetype)initWithFin:(BOOL)fin data:(MVIMKotlinByteArray *)data __attribute__((swift_name("init(fin:data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin packet:(MVIMByteReadPacket *)packet __attribute__((swift_name("init(fin:packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin data:(MVIMKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:data:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:frameType:data:disposableHandle:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Close")))
@interface MVIMFrameClose : MVIMFrame
- (instancetype)initWithReason:(MVIMCloseReason *)reason __attribute__((swift_name("init(reason:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithPacket:(MVIMByteReadPacket *)packet __attribute__((swift_name("init(packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithData:(MVIMKotlinByteArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:frameType:data:disposableHandle:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Companion")))
@interface MVIMFrameCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMFrame *)byTypeFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data __attribute__((swift_name("byType(fin:frameType:data:)")));
- (MVIMFrame *)byTypeFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("byType(fin:frameType:data:rsv1:rsv2:rsv3:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Ping")))
@interface MVIMFramePing : MVIMFrame
- (instancetype)initWithPacket:(MVIMByteReadPacket *)packet __attribute__((swift_name("init(packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(MVIMKotlinByteArray *)data __attribute__((swift_name("init(data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:frameType:data:disposableHandle:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Pong")))
@interface MVIMFramePong : MVIMFrame
- (instancetype)initWithPacket:(MVIMByteReadPacket *)packet __attribute__((swift_name("init(packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithData:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle __attribute__((swift_name("init(data:disposableHandle:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:frameType:data:disposableHandle:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Frame.Text")))
@interface MVIMFrameText : MVIMFrame
- (instancetype)initWithFin:(BOOL)fin data:(MVIMKotlinByteArray *)data __attribute__((swift_name("init(fin:data:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithText:(NSString *)text __attribute__((swift_name("init(text:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin packet:(MVIMByteReadPacket *)packet __attribute__((swift_name("init(fin:packet:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin data:(MVIMKotlinByteArray *)data rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:data:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithFin:(BOOL)fin frameType:(MVIMFrameType *)frameType data:(MVIMKotlinByteArray *)data disposableHandle:(id<MVIMDisposableHandle>)disposableHandle rsv1:(BOOL)rsv1 rsv2:(BOOL)rsv2 rsv3:(BOOL)rsv3 __attribute__((swift_name("init(fin:frameType:data:disposableHandle:rsv1:rsv2:rsv3:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrameType")))
@interface MVIMFrameType : MVIMKotlinEnum<MVIMFrameType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMFrameType *text __attribute__((swift_name("text")));
@property (class, readonly) MVIMFrameType *binary __attribute__((swift_name("binary")));
@property (class, readonly) MVIMFrameType *close __attribute__((swift_name("close")));
@property (class, readonly) MVIMFrameType *ping __attribute__((swift_name("ping")));
@property (class, readonly) MVIMFrameType *pong __attribute__((swift_name("pong")));
+ (MVIMKotlinArray<MVIMFrameType *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL controlFrame __attribute__((swift_name("controlFrame")));
@property (readonly) int32_t opcode __attribute__((swift_name("opcode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FrameType.Companion")))
@interface MVIMFrameTypeCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMFrameType * _Nullable)getOpcode:(int32_t)opcode __attribute__((swift_name("get(opcode:)")));
@end;

__attribute__((swift_name("WebSocketExtension")))
@protocol MVIMWebSocketExtension
@required
- (BOOL)clientNegotiationNegotiatedProtocols:(NSArray<MVIMWebSocketExtensionHeader *> *)negotiatedProtocols __attribute__((swift_name("clientNegotiation(negotiatedProtocols:)")));
- (MVIMFrame *)processIncomingFrameFrame:(MVIMFrame *)frame __attribute__((swift_name("processIncomingFrame(frame:)")));
- (MVIMFrame *)processOutgoingFrameFrame:(MVIMFrame *)frame __attribute__((swift_name("processOutgoingFrame(frame:)")));
- (NSArray<MVIMWebSocketExtensionHeader *> *)serverNegotiationRequestedProtocols:(NSArray<MVIMWebSocketExtensionHeader *> *)requestedProtocols __attribute__((swift_name("serverNegotiation(requestedProtocols:)")));
@property (readonly) id<MVIMWebSocketExtensionFactory> factory __attribute__((swift_name("factory")));
@property (readonly) NSArray<MVIMWebSocketExtensionHeader *> *protocols __attribute__((swift_name("protocols")));
@end;

__attribute__((swift_name("WebSocketExtensionFactory")))
@protocol MVIMWebSocketExtensionFactory
@required
- (id<MVIMWebSocketExtension>)installConfig:(void (^)(id))config __attribute__((swift_name("install(config:)")));
@property (readonly) MVIMAttributeKey<id<MVIMWebSocketExtension>> *key __attribute__((swift_name("key")));
@property (readonly) BOOL rsv1 __attribute__((swift_name("rsv1")));
@property (readonly) BOOL rsv2 __attribute__((swift_name("rsv2")));
@property (readonly) BOOL rsv3 __attribute__((swift_name("rsv3")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionHeader")))
@interface MVIMWebSocketExtensionHeader : MVIMBase
- (instancetype)initWithName:(NSString *)name parameters:(NSArray<NSString *> *)parameters __attribute__((swift_name("init(name:parameters:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMKotlinSequence>)parseParameters __attribute__((swift_name("parseParameters()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> *parameters __attribute__((swift_name("parameters")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionsConfig")))
@interface MVIMWebSocketExtensionsConfig : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSArray<id<MVIMWebSocketExtension>> *)build __attribute__((swift_name("build()")));
- (void)installExtension:(id<MVIMWebSocketExtensionFactory>)extension config:(void (^)(id))config __attribute__((swift_name("install(extension:config:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MutableRange")))
@interface MVIMMutableRange : MVIMBase
- (instancetype)initWithStart:(int32_t)start end:(int32_t)end __attribute__((swift_name("init(start:end:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property int32_t end __attribute__((swift_name("end")));
@property int32_t start __attribute__((swift_name("start")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BadContentTypeFormatException")))
@interface MVIMBadContentTypeFormatException : MVIMKotlinException
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("CacheControl_")))
@interface MVIMCacheControl_ : MVIMBase
- (instancetype)initWithVisibility:(MVIMCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(visibility:)"))) __attribute__((objc_designated_initializer));
@property (readonly) MVIMCacheControl_Visibility * _Nullable visibility __attribute__((swift_name("visibility")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.MaxAge")))
@interface MVIMCacheControl_MaxAge : MVIMCacheControl_
- (instancetype)initWithMaxAgeSeconds:(int32_t)maxAgeSeconds proxyMaxAgeSeconds:(MVIMInt * _Nullable)proxyMaxAgeSeconds mustRevalidate:(BOOL)mustRevalidate proxyRevalidate:(BOOL)proxyRevalidate visibility:(MVIMCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(maxAgeSeconds:proxyMaxAgeSeconds:mustRevalidate:proxyRevalidate:visibility:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithVisibility:(MVIMCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(visibility:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t maxAgeSeconds __attribute__((swift_name("maxAgeSeconds")));
@property (readonly) BOOL mustRevalidate __attribute__((swift_name("mustRevalidate")));
@property (readonly) MVIMInt * _Nullable proxyMaxAgeSeconds __attribute__((swift_name("proxyMaxAgeSeconds")));
@property (readonly) BOOL proxyRevalidate __attribute__((swift_name("proxyRevalidate")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.NoCache")))
@interface MVIMCacheControl_NoCache : MVIMCacheControl_
- (instancetype)initWithVisibility:(MVIMCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(visibility:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.NoStore")))
@interface MVIMCacheControl_NoStore : MVIMCacheControl_
- (instancetype)initWithVisibility:(MVIMCacheControl_Visibility * _Nullable)visibility __attribute__((swift_name("init(visibility:)"))) __attribute__((objc_designated_initializer));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CacheControl_.Visibility")))
@interface MVIMCacheControl_Visibility : MVIMKotlinEnum<MVIMCacheControl_Visibility *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMCacheControl_Visibility *public_ __attribute__((swift_name("public_")));
@property (class, readonly) MVIMCacheControl_Visibility *private_ __attribute__((swift_name("private_")));
+ (MVIMKotlinArray<MVIMCacheControl_Visibility *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("HeaderValueWithParameters")))
@interface MVIMHeaderValueWithParameters : MVIMBase
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<MVIMHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)parameterName:(NSString *)name __attribute__((swift_name("parameter(name:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) NSArray<MVIMHeaderValueParam *> *parameters __attribute__((swift_name("parameters")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentDisposition")))
@interface MVIMContentDisposition : MVIMHeaderValueWithParameters
- (instancetype)initWithDisposition:(NSString *)disposition parameters:(NSArray<MVIMHeaderValueParam *> *)parameters __attribute__((swift_name("init(disposition:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<MVIMHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (MVIMContentDisposition *)withParameterKey:(NSString *)key value:(NSString *)value __attribute__((swift_name("withParameter(key:value:)")));
- (MVIMContentDisposition *)withParametersNewParameters:(NSArray<MVIMHeaderValueParam *> *)newParameters __attribute__((swift_name("withParameters(newParameters:)")));
@property (readonly) NSString *disposition __attribute__((swift_name("disposition")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentDisposition.Companion")))
@interface MVIMContentDispositionCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMContentDisposition *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@property (readonly) MVIMContentDisposition *Attachment __attribute__((swift_name("Attachment")));
@property (readonly) MVIMContentDisposition *File __attribute__((swift_name("File")));
@property (readonly) MVIMContentDisposition *Inline __attribute__((swift_name("Inline")));
@property (readonly) MVIMContentDisposition *Mixed __attribute__((swift_name("Mixed")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentDisposition.Parameters")))
@interface MVIMContentDispositionParameters : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)parameters __attribute__((swift_name("init()")));
@property (readonly) NSString *CreationDate __attribute__((swift_name("CreationDate")));
@property (readonly) NSString *FileName __attribute__((swift_name("FileName")));
@property (readonly) NSString *FileNameAsterisk __attribute__((swift_name("FileNameAsterisk")));
@property (readonly) NSString *Handling __attribute__((swift_name("Handling")));
@property (readonly) NSString *ModificationDate __attribute__((swift_name("ModificationDate")));
@property (readonly) NSString *Name __attribute__((swift_name("Name")));
@property (readonly) NSString *ReadDate __attribute__((swift_name("ReadDate")));
@property (readonly) NSString *Size __attribute__((swift_name("Size")));
@end;

__attribute__((swift_name("ContentRange")))
@interface MVIMContentRange : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRange.Bounded")))
@interface MVIMContentRangeBounded : MVIMContentRange
- (instancetype)initWithFrom:(int64_t)from to:(int64_t)to __attribute__((swift_name("init(from:to:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (int64_t)component1 __attribute__((swift_name("component1()")));
- (int64_t)component2 __attribute__((swift_name("component2()")));
- (MVIMContentRangeBounded *)doCopyFrom:(int64_t)from to:(int64_t)to __attribute__((swift_name("doCopy(from:to:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t from __attribute__((swift_name("from")));
@property (readonly) int64_t to __attribute__((swift_name("to")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRange.Suffix")))
@interface MVIMContentRangeSuffix : MVIMContentRange
- (instancetype)initWithLastCount:(int64_t)lastCount __attribute__((swift_name("init(lastCount:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (int64_t)component1 __attribute__((swift_name("component1()")));
- (MVIMContentRangeSuffix *)doCopyLastCount:(int64_t)lastCount __attribute__((swift_name("doCopy(lastCount:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t lastCount __attribute__((swift_name("lastCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRange.TailFrom")))
@interface MVIMContentRangeTailFrom : MVIMContentRange
- (instancetype)initWithFrom:(int64_t)from __attribute__((swift_name("init(from:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (int64_t)component1 __attribute__((swift_name("component1()")));
- (MVIMContentRangeTailFrom *)doCopyFrom:(int64_t)from __attribute__((swift_name("doCopy(from:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t from __attribute__((swift_name("from")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType")))
@interface MVIMContentType : MVIMHeaderValueWithParameters
- (instancetype)initWithContentType:(NSString *)contentType contentSubtype:(NSString *)contentSubtype parameters:(NSArray<MVIMHeaderValueParam *> *)parameters __attribute__((swift_name("init(contentType:contentSubtype:parameters:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<MVIMHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)matchPattern:(MVIMContentType *)pattern __attribute__((swift_name("match(pattern:)")));
- (BOOL)matchPattern_:(NSString *)pattern __attribute__((swift_name("match(pattern_:)")));
- (MVIMContentType *)withParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withParameter(name:value:)")));
- (MVIMContentType *)withoutParameters __attribute__((swift_name("withoutParameters()")));
@property (readonly) NSString *contentSubtype __attribute__((swift_name("contentSubtype")));
@property (readonly) NSString *contentType __attribute__((swift_name("contentType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Application")))
@interface MVIMContentTypeApplication : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)application __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *Atom __attribute__((swift_name("Atom")));
@property (readonly) MVIMContentType *Cbor __attribute__((swift_name("Cbor")));
@property (readonly) MVIMContentType *FontWoff __attribute__((swift_name("FontWoff")));
@property (readonly) MVIMContentType *FormUrlEncoded __attribute__((swift_name("FormUrlEncoded")));
@property (readonly) MVIMContentType *GZip __attribute__((swift_name("GZip")));
@property (readonly) MVIMContentType *HalJson __attribute__((swift_name("HalJson")));
@property (readonly) MVIMContentType *JavaScript __attribute__((swift_name("JavaScript")));
@property (readonly) MVIMContentType *Json __attribute__((swift_name("Json")));
@property (readonly) MVIMContentType *OctetStream __attribute__((swift_name("OctetStream")));
@property (readonly) MVIMContentType *Pdf __attribute__((swift_name("Pdf")));
@property (readonly) MVIMContentType *ProblemJson __attribute__((swift_name("ProblemJson")));
@property (readonly) MVIMContentType *ProblemXml __attribute__((swift_name("ProblemXml")));
@property (readonly) MVIMContentType *ProtoBuf __attribute__((swift_name("ProtoBuf")));
@property (readonly) MVIMContentType *Rss __attribute__((swift_name("Rss")));
@property (readonly) MVIMContentType *Wasm __attribute__((swift_name("Wasm")));
@property (readonly) MVIMContentType *Xml __attribute__((swift_name("Xml")));
@property (readonly) MVIMContentType *Xml_Dtd __attribute__((swift_name("Xml_Dtd")));
@property (readonly) MVIMContentType *Zip __attribute__((swift_name("Zip")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Audio")))
@interface MVIMContentTypeAudio : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)audio __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *MP4 __attribute__((swift_name("MP4")));
@property (readonly) MVIMContentType *MPEG __attribute__((swift_name("MPEG")));
@property (readonly) MVIMContentType *OGG __attribute__((swift_name("OGG")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Companion")))
@interface MVIMContentTypeCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMContentType *)parseValue:(NSString *)value __attribute__((swift_name("parse(value:)")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Image")))
@interface MVIMContentTypeImage : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)image __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *GIF __attribute__((swift_name("GIF")));
@property (readonly) MVIMContentType *JPEG __attribute__((swift_name("JPEG")));
@property (readonly) MVIMContentType *PNG __attribute__((swift_name("PNG")));
@property (readonly) MVIMContentType *SVG __attribute__((swift_name("SVG")));
@property (readonly) MVIMContentType *XIcon __attribute__((swift_name("XIcon")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Message")))
@interface MVIMContentTypeMessage : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)message __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *Http __attribute__((swift_name("Http")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.MultiPart")))
@interface MVIMContentTypeMultiPart : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)multiPart __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Alternative __attribute__((swift_name("Alternative")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *ByteRanges __attribute__((swift_name("ByteRanges")));
@property (readonly) MVIMContentType *Encrypted __attribute__((swift_name("Encrypted")));
@property (readonly) MVIMContentType *FormData __attribute__((swift_name("FormData")));
@property (readonly) MVIMContentType *Mixed __attribute__((swift_name("Mixed")));
@property (readonly) MVIMContentType *Related __attribute__((swift_name("Related")));
@property (readonly) MVIMContentType *Signed __attribute__((swift_name("Signed")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Text")))
@interface MVIMContentTypeText : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)text __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *CSS __attribute__((swift_name("CSS")));
@property (readonly) MVIMContentType *CSV __attribute__((swift_name("CSV")));
@property (readonly) MVIMContentType *EventStream __attribute__((swift_name("EventStream")));
@property (readonly) MVIMContentType *Html __attribute__((swift_name("Html")));
@property (readonly) MVIMContentType *JavaScript __attribute__((swift_name("JavaScript")));
@property (readonly) MVIMContentType *Plain __attribute__((swift_name("Plain")));
@property (readonly) MVIMContentType *VCard __attribute__((swift_name("VCard")));
@property (readonly) MVIMContentType *Xml __attribute__((swift_name("Xml")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentType.Video")))
@interface MVIMContentTypeVideo : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)video __attribute__((swift_name("init()")));
@property (readonly) MVIMContentType *Any __attribute__((swift_name("Any")));
@property (readonly) MVIMContentType *MP4 __attribute__((swift_name("MP4")));
@property (readonly) MVIMContentType *MPEG __attribute__((swift_name("MPEG")));
@property (readonly) MVIMContentType *OGG __attribute__((swift_name("OGG")));
@property (readonly) MVIMContentType *QuickTime __attribute__((swift_name("QuickTime")));
@end;

__attribute__((swift_name("ContentTypeMatcher")))
@protocol MVIMContentTypeMatcher
@required
- (BOOL)containsContentType:(MVIMContentType *)contentType __attribute__((swift_name("contains(contentType:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Cookie")))
@interface MVIMCookie : MVIMBase
- (instancetype)initWithName:(NSString *)name value:(NSString *)value encoding:(MVIMCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(MVIMGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("init(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSDictionary<NSString *, id> *)component10 __attribute__((swift_name("component10()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (MVIMCookieEncoding *)component3 __attribute__((swift_name("component3()")));
- (int32_t)component4 __attribute__((swift_name("component4()")));
- (MVIMGMTDate * _Nullable)component5 __attribute__((swift_name("component5()")));
- (NSString * _Nullable)component6 __attribute__((swift_name("component6()")));
- (NSString * _Nullable)component7 __attribute__((swift_name("component7()")));
- (BOOL)component8 __attribute__((swift_name("component8()")));
- (BOOL)component9 __attribute__((swift_name("component9()")));
- (MVIMCookie *)doCopyName:(NSString *)name value:(NSString *)value encoding:(MVIMCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(MVIMGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("doCopy(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable domain __attribute__((swift_name("domain")));
@property (readonly) MVIMCookieEncoding *encoding __attribute__((swift_name("encoding")));
@property (readonly) MVIMGMTDate * _Nullable expires __attribute__((swift_name("expires")));
@property (readonly) NSDictionary<NSString *, id> *extensions __attribute__((swift_name("extensions")));
@property (readonly) BOOL httpOnly __attribute__((swift_name("httpOnly")));
@property (readonly) int32_t maxAge __attribute__((swift_name("maxAge")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString * _Nullable path __attribute__((swift_name("path")));
@property (readonly) BOOL secure __attribute__((swift_name("secure")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookieEncoding")))
@interface MVIMCookieEncoding : MVIMKotlinEnum<MVIMCookieEncoding *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMCookieEncoding *raw __attribute__((swift_name("raw")));
@property (class, readonly) MVIMCookieEncoding *dquotes __attribute__((swift_name("dquotes")));
@property (class, readonly) MVIMCookieEncoding *uriEncoding __attribute__((swift_name("uriEncoding")));
@property (class, readonly) MVIMCookieEncoding *base64Encoding __attribute__((swift_name("base64Encoding")));
+ (MVIMKotlinArray<MVIMCookieEncoding *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyHeaders")))
@interface MVIMEmptyHeaders : MVIMBase <MVIMHeaders>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)emptyHeaders __attribute__((swift_name("init()")));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end;

__attribute__((swift_name("Parameters")))
@protocol MVIMParameters <MVIMStringValues>
@required
@property (readonly) MVIMUrlEncodingOption *urlEncodingOption __attribute__((swift_name("urlEncodingOption")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmptyParameters")))
@interface MVIMEmptyParameters : MVIMBase <MVIMParameters>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)emptyParameters __attribute__((swift_name("init()")));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValue")))
@interface MVIMHeaderValue : MVIMBase
- (instancetype)initWithValue:(NSString *)value params:(NSArray<MVIMHeaderValueParam *> *)params __attribute__((swift_name("init(value:params:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSArray<MVIMHeaderValueParam *> *)component2 __attribute__((swift_name("component2()")));
- (MVIMHeaderValue *)doCopyValue:(NSString *)value params:(NSArray<MVIMHeaderValueParam *> *)params __attribute__((swift_name("doCopy(value:params:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<MVIMHeaderValueParam *> *params __attribute__((swift_name("params")));
@property (readonly) double quality __attribute__((swift_name("quality")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueParam")))
@interface MVIMHeaderValueParam : MVIMBase
- (instancetype)initWithName:(NSString *)name value:(NSString *)value __attribute__((swift_name("init(name:value:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (MVIMHeaderValueParam *)doCopyName:(NSString *)name value:(NSString *)value __attribute__((swift_name("doCopy(name:value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueWithParameters.Companion")))
@interface MVIMHeaderValueWithParametersCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id _Nullable)parseValue:(NSString *)value init:(id _Nullable (^)(NSString *, NSArray<MVIMHeaderValueParam *> *))init __attribute__((swift_name("parse(value:init:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersCompanion")))
@interface MVIMHeadersCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMHeaders>)buildBuilder:(void (^)(MVIMHeadersBuilder *))builder __attribute__((swift_name("build(builder:)")));
@property (readonly) id<MVIMHeaders> Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((swift_name("StringValuesBuilder")))
@interface MVIMStringValuesBuilder : MVIMBase
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer));
- (void)appendName:(NSString *)name value:(NSString *)value __attribute__((swift_name("append(name:value:)")));
- (void)appendAllStringValues:(id<MVIMStringValues>)stringValues __attribute__((swift_name("appendAll(stringValues:)")));
- (void)appendAllName:(NSString *)name values:(id)values __attribute__((swift_name("appendAll(name:values:)")));
- (void)appendMissingStringValues:(id<MVIMStringValues>)stringValues __attribute__((swift_name("appendMissing(stringValues:)")));
- (void)appendMissingName:(NSString *)name values:(id)values __attribute__((swift_name("appendMissing(name:values:)")));
- (id<MVIMStringValues>)build __attribute__((swift_name("build()")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (void)removeName:(NSString *)name __attribute__((swift_name("remove(name:)")));
- (BOOL)removeName:(NSString *)name value:(NSString *)value __attribute__((swift_name("remove(name:value:)")));
- (void)removeKeysWithNoEntries __attribute__((swift_name("removeKeysWithNoEntries()")));
- (void)setName:(NSString *)name value:(NSString *)value __attribute__((swift_name("set(name:value:)")));
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@property BOOL built __attribute__((swift_name("built")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@property (readonly) MVIMMutableDictionary<NSString *, NSMutableArray<NSString *> *> *values __attribute__((swift_name("values")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersBuilder")))
@interface MVIMHeadersBuilder : MVIMStringValuesBuilder
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<MVIMHeaders>)build __attribute__((swift_name("build()")));
- (void)validateNameName:(NSString *)name __attribute__((swift_name("validateName(name:)")));
- (void)validateValueValue:(NSString *)value __attribute__((swift_name("validateValue(value:)")));
@end;

__attribute__((swift_name("StringValuesImpl")))
@interface MVIMStringValuesImpl : MVIMBase <MVIMStringValues>
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName values:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(caseInsensitiveName:values:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@property (readonly) NSDictionary<NSString *, NSArray<NSString *> *> *values __attribute__((swift_name("values")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersImpl")))
@interface MVIMHeadersImpl : MVIMStringValuesImpl <MVIMHeaders>
- (instancetype)initWithValues:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName values:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(caseInsensitiveName:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("StringValuesSingleImpl")))
@interface MVIMStringValuesSingleImpl : MVIMBase <MVIMStringValues>
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName name:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(caseInsensitiveName:name:values:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsName:(NSString *)name __attribute__((swift_name("contains(name:)")));
- (BOOL)containsName:(NSString *)name value:(NSString *)value __attribute__((swift_name("contains(name:value:)")));
- (NSSet<id<MVIMKotlinMapEntry>> *)entries __attribute__((swift_name("entries()")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (void)forEachBody:(void (^)(NSString *, NSArray<NSString *> *))body __attribute__((swift_name("forEach(body:)")));
- (NSString * _Nullable)getName:(NSString *)name __attribute__((swift_name("get(name:)")));
- (NSArray<NSString *> * _Nullable)getAllName:(NSString *)name __attribute__((swift_name("getAll(name:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSSet<NSString *> *)names __attribute__((swift_name("names()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL caseInsensitiveName __attribute__((swift_name("caseInsensitiveName")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@property (readonly) NSArray<NSString *> *values __attribute__((swift_name("values")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersSingleImpl")))
@interface MVIMHeadersSingleImpl : MVIMStringValuesSingleImpl <MVIMHeaders>
- (instancetype)initWithName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(name:values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName name:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(caseInsensitiveName:name:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpHeaders")))
@interface MVIMHttpHeaders : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)httpHeaders __attribute__((swift_name("init()")));
- (void)checkHeaderNameName:(NSString *)name __attribute__((swift_name("checkHeaderName(name:)")));
- (void)checkHeaderValueValue:(NSString *)value __attribute__((swift_name("checkHeaderValue(value:)")));
- (BOOL)isUnsafeHeader:(NSString *)header __attribute__((swift_name("isUnsafe(header:)")));
@property (readonly) NSString *ALPN __attribute__((swift_name("ALPN")));
@property (readonly) NSString *Accept __attribute__((swift_name("Accept")));
@property (readonly) NSString *AcceptCharset __attribute__((swift_name("AcceptCharset")));
@property (readonly) NSString *AcceptEncoding __attribute__((swift_name("AcceptEncoding")));
@property (readonly) NSString *AcceptLanguage __attribute__((swift_name("AcceptLanguage")));
@property (readonly) NSString *AcceptRanges __attribute__((swift_name("AcceptRanges")));
@property (readonly) NSString *AccessControlAllowCredentials __attribute__((swift_name("AccessControlAllowCredentials")));
@property (readonly) NSString *AccessControlAllowHeaders __attribute__((swift_name("AccessControlAllowHeaders")));
@property (readonly) NSString *AccessControlAllowMethods __attribute__((swift_name("AccessControlAllowMethods")));
@property (readonly) NSString *AccessControlAllowOrigin __attribute__((swift_name("AccessControlAllowOrigin")));
@property (readonly) NSString *AccessControlExposeHeaders __attribute__((swift_name("AccessControlExposeHeaders")));
@property (readonly) NSString *AccessControlMaxAge __attribute__((swift_name("AccessControlMaxAge")));
@property (readonly) NSString *AccessControlRequestHeaders __attribute__((swift_name("AccessControlRequestHeaders")));
@property (readonly) NSString *AccessControlRequestMethod __attribute__((swift_name("AccessControlRequestMethod")));
@property (readonly) NSString *Age __attribute__((swift_name("Age")));
@property (readonly) NSString *Allow __attribute__((swift_name("Allow")));
@property (readonly) NSString *AuthenticationInfo __attribute__((swift_name("AuthenticationInfo")));
@property (readonly) NSString *Authorization __attribute__((swift_name("Authorization")));
@property (readonly) NSString *CacheControl __attribute__((swift_name("CacheControl")));
@property (readonly) NSString *Connection __attribute__((swift_name("Connection")));
@property (readonly) NSString *ContentDisposition __attribute__((swift_name("ContentDisposition")));
@property (readonly) NSString *ContentEncoding __attribute__((swift_name("ContentEncoding")));
@property (readonly) NSString *ContentLanguage __attribute__((swift_name("ContentLanguage")));
@property (readonly) NSString *ContentLength __attribute__((swift_name("ContentLength")));
@property (readonly) NSString *ContentLocation __attribute__((swift_name("ContentLocation")));
@property (readonly) NSString *ContentRange __attribute__((swift_name("ContentRange")));
@property (readonly) NSString *ContentType __attribute__((swift_name("ContentType")));
@property (readonly) NSString *Cookie __attribute__((swift_name("Cookie")));
@property (readonly) NSString *DASL __attribute__((swift_name("DASL")));
@property (readonly) NSString *DAV __attribute__((swift_name("DAV")));
@property (readonly) NSString *Date __attribute__((swift_name("Date")));
@property (readonly) NSString *Depth __attribute__((swift_name("Depth")));
@property (readonly) NSString *Destination __attribute__((swift_name("Destination")));
@property (readonly) NSString *ETag __attribute__((swift_name("ETag")));
@property (readonly) NSString *Expect __attribute__((swift_name("Expect")));
@property (readonly) NSString *Expires __attribute__((swift_name("Expires")));
@property (readonly) NSString *Forwarded __attribute__((swift_name("Forwarded")));
@property (readonly) NSString *From __attribute__((swift_name("From")));
@property (readonly) NSString *HTTP2Settings __attribute__((swift_name("HTTP2Settings")));
@property (readonly) NSString *Host __attribute__((swift_name("Host")));
@property (readonly) NSString *If __attribute__((swift_name("If")));
@property (readonly) NSString *IfMatch __attribute__((swift_name("IfMatch")));
@property (readonly) NSString *IfModifiedSince __attribute__((swift_name("IfModifiedSince")));
@property (readonly) NSString *IfNoneMatch __attribute__((swift_name("IfNoneMatch")));
@property (readonly) NSString *IfRange __attribute__((swift_name("IfRange")));
@property (readonly) NSString *IfScheduleTagMatch __attribute__((swift_name("IfScheduleTagMatch")));
@property (readonly) NSString *IfUnmodifiedSince __attribute__((swift_name("IfUnmodifiedSince")));
@property (readonly) NSString *LastModified __attribute__((swift_name("LastModified")));
@property (readonly) NSString *Link __attribute__((swift_name("Link")));
@property (readonly) NSString *Location __attribute__((swift_name("Location")));
@property (readonly) NSString *LockToken __attribute__((swift_name("LockToken")));
@property (readonly) NSString *MIMEVersion __attribute__((swift_name("MIMEVersion")));
@property (readonly) NSString *MaxForwards __attribute__((swift_name("MaxForwards")));
@property (readonly) NSString *OrderingType __attribute__((swift_name("OrderingType")));
@property (readonly) NSString *Origin __attribute__((swift_name("Origin")));
@property (readonly) NSString *Overwrite __attribute__((swift_name("Overwrite")));
@property (readonly) NSString *Position __attribute__((swift_name("Position")));
@property (readonly) NSString *Pragma __attribute__((swift_name("Pragma")));
@property (readonly) NSString *Prefer __attribute__((swift_name("Prefer")));
@property (readonly) NSString *PreferenceApplied __attribute__((swift_name("PreferenceApplied")));
@property (readonly) NSString *ProxyAuthenticate __attribute__((swift_name("ProxyAuthenticate")));
@property (readonly) NSString *ProxyAuthenticationInfo __attribute__((swift_name("ProxyAuthenticationInfo")));
@property (readonly) NSString *ProxyAuthorization __attribute__((swift_name("ProxyAuthorization")));
@property (readonly) NSString *PublicKeyPins __attribute__((swift_name("PublicKeyPins")));
@property (readonly) NSString *PublicKeyPinsReportOnly __attribute__((swift_name("PublicKeyPinsReportOnly")));
@property (readonly) NSString *Range __attribute__((swift_name("Range")));
@property (readonly) NSString *Referrer __attribute__((swift_name("Referrer")));
@property (readonly) NSString *RetryAfter __attribute__((swift_name("RetryAfter")));
@property (readonly) NSString *SLUG __attribute__((swift_name("SLUG")));
@property (readonly) NSString *ScheduleReply __attribute__((swift_name("ScheduleReply")));
@property (readonly) NSString *ScheduleTag __attribute__((swift_name("ScheduleTag")));
@property (readonly) NSString *SecWebSocketAccept __attribute__((swift_name("SecWebSocketAccept")));
@property (readonly) NSString *SecWebSocketExtensions __attribute__((swift_name("SecWebSocketExtensions")));
@property (readonly) NSString *SecWebSocketKey __attribute__((swift_name("SecWebSocketKey")));
@property (readonly) NSString *SecWebSocketProtocol __attribute__((swift_name("SecWebSocketProtocol")));
@property (readonly) NSString *SecWebSocketVersion __attribute__((swift_name("SecWebSocketVersion")));
@property (readonly) NSString *Server __attribute__((swift_name("Server")));
@property (readonly) NSString *SetCookie __attribute__((swift_name("SetCookie")));
@property (readonly) NSString *StrictTransportSecurity __attribute__((swift_name("StrictTransportSecurity")));
@property (readonly) NSString *TE __attribute__((swift_name("TE")));
@property (readonly) NSString *Timeout __attribute__((swift_name("Timeout")));
@property (readonly) NSString *Trailer __attribute__((swift_name("Trailer")));
@property (readonly) NSString *TransferEncoding __attribute__((swift_name("TransferEncoding")));
@property (readonly) MVIMKotlinArray<NSString *> *UnsafeHeaders __attribute__((swift_name("UnsafeHeaders"))) __attribute__((deprecated("Use UnsafeHeadersList instead.")));
@property (readonly) NSArray<NSString *> *UnsafeHeadersList __attribute__((swift_name("UnsafeHeadersList")));
@property (readonly) NSString *Upgrade __attribute__((swift_name("Upgrade")));
@property (readonly) NSString *UserAgent __attribute__((swift_name("UserAgent")));
@property (readonly) NSString *Vary __attribute__((swift_name("Vary")));
@property (readonly) NSString *Via __attribute__((swift_name("Via")));
@property (readonly) NSString *WWWAuthenticate __attribute__((swift_name("WWWAuthenticate")));
@property (readonly) NSString *Warning __attribute__((swift_name("Warning")));
@property (readonly) NSString *XCorrelationId __attribute__((swift_name("XCorrelationId")));
@property (readonly) NSString *XForwardedFor __attribute__((swift_name("XForwardedFor")));
@property (readonly) NSString *XForwardedHost __attribute__((swift_name("XForwardedHost")));
@property (readonly) NSString *XForwardedProto __attribute__((swift_name("XForwardedProto")));
@property (readonly) NSString *XForwardedServer __attribute__((swift_name("XForwardedServer")));
@property (readonly) NSString *XHttpMethodOverride __attribute__((swift_name("XHttpMethodOverride")));
@property (readonly) NSString *XRequestId __attribute__((swift_name("XRequestId")));
@property (readonly) NSString *XTotalCount __attribute__((swift_name("XTotalCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpMethod")))
@interface MVIMHttpMethod : MVIMBase
- (instancetype)initWithValue:(NSString *)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (MVIMHttpMethod *)doCopyValue:(NSString *)value __attribute__((swift_name("doCopy(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpMethod.Companion")))
@interface MVIMHttpMethodCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMHttpMethod *)parseMethod:(NSString *)method __attribute__((swift_name("parse(method:)")));
@property (readonly) NSArray<MVIMHttpMethod *> *DefaultMethods __attribute__((swift_name("DefaultMethods")));
@property (readonly) MVIMHttpMethod *Delete __attribute__((swift_name("Delete")));
@property (readonly) MVIMHttpMethod *Get __attribute__((swift_name("Get")));
@property (readonly) MVIMHttpMethod *Head __attribute__((swift_name("Head")));
@property (readonly) MVIMHttpMethod *Options __attribute__((swift_name("Options")));
@property (readonly) MVIMHttpMethod *Patch __attribute__((swift_name("Patch")));
@property (readonly) MVIMHttpMethod *Post __attribute__((swift_name("Post")));
@property (readonly) MVIMHttpMethod *Put __attribute__((swift_name("Put")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpProtocolVersion")))
@interface MVIMHttpProtocolVersion : MVIMBase
- (instancetype)initWithName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("init(name:major:minor:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (int32_t)component2 __attribute__((swift_name("component2()")));
- (int32_t)component3 __attribute__((swift_name("component3()")));
- (MVIMHttpProtocolVersion *)doCopyName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("doCopy(name:major:minor:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t major __attribute__((swift_name("major")));
@property (readonly) int32_t minor __attribute__((swift_name("minor")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpProtocolVersion.Companion")))
@interface MVIMHttpProtocolVersionCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMHttpProtocolVersion *)fromValueName:(NSString *)name major:(int32_t)major minor:(int32_t)minor __attribute__((swift_name("fromValue(name:major:minor:)")));
- (MVIMHttpProtocolVersion *)parseValue:(id)value __attribute__((swift_name("parse(value:)")));
@property (readonly) MVIMHttpProtocolVersion *HTTP_1_0 __attribute__((swift_name("HTTP_1_0")));
@property (readonly) MVIMHttpProtocolVersion *HTTP_1_1 __attribute__((swift_name("HTTP_1_1")));
@property (readonly) MVIMHttpProtocolVersion *HTTP_2_0 __attribute__((swift_name("HTTP_2_0")));
@property (readonly) MVIMHttpProtocolVersion *QUIC __attribute__((swift_name("QUIC")));
@property (readonly) MVIMHttpProtocolVersion *SPDY_3 __attribute__((swift_name("SPDY_3")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatusCode")))
@interface MVIMHttpStatusCode : MVIMBase
- (instancetype)initWithValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("init(value:description:)"))) __attribute__((objc_designated_initializer));
- (int32_t)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (MVIMHttpStatusCode *)doCopyValue:(int32_t)value description:(NSString *)description __attribute__((swift_name("doCopy(value:description:)")));
- (MVIMHttpStatusCode *)descriptionValue:(NSString *)value __attribute__((swift_name("description(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *description_ __attribute__((swift_name("description_")));
@property (readonly) int32_t value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpStatusCode.Companion")))
@interface MVIMHttpStatusCodeCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMHttpStatusCode *)fromValueValue:(int32_t)value __attribute__((swift_name("fromValue(value:)")));
@property (readonly) MVIMHttpStatusCode *Accepted __attribute__((swift_name("Accepted")));
@property (readonly) MVIMHttpStatusCode *BadGateway __attribute__((swift_name("BadGateway")));
@property (readonly) MVIMHttpStatusCode *BadRequest __attribute__((swift_name("BadRequest")));
@property (readonly) MVIMHttpStatusCode *Conflict __attribute__((swift_name("Conflict")));
@property (readonly) MVIMHttpStatusCode *Continue __attribute__((swift_name("Continue")));
@property (readonly) MVIMHttpStatusCode *Created __attribute__((swift_name("Created")));
@property (readonly) MVIMHttpStatusCode *ExpectationFailed __attribute__((swift_name("ExpectationFailed")));
@property (readonly) MVIMHttpStatusCode *FailedDependency __attribute__((swift_name("FailedDependency")));
@property (readonly) MVIMHttpStatusCode *Forbidden __attribute__((swift_name("Forbidden")));
@property (readonly) MVIMHttpStatusCode *Found __attribute__((swift_name("Found")));
@property (readonly) MVIMHttpStatusCode *GatewayTimeout __attribute__((swift_name("GatewayTimeout")));
@property (readonly) MVIMHttpStatusCode *Gone __attribute__((swift_name("Gone")));
@property (readonly) MVIMHttpStatusCode *InsufficientStorage __attribute__((swift_name("InsufficientStorage")));
@property (readonly) MVIMHttpStatusCode *InternalServerError __attribute__((swift_name("InternalServerError")));
@property (readonly) MVIMHttpStatusCode *LengthRequired __attribute__((swift_name("LengthRequired")));
@property (readonly) MVIMHttpStatusCode *Locked __attribute__((swift_name("Locked")));
@property (readonly) MVIMHttpStatusCode *MethodNotAllowed __attribute__((swift_name("MethodNotAllowed")));
@property (readonly) MVIMHttpStatusCode *MovedPermanently __attribute__((swift_name("MovedPermanently")));
@property (readonly) MVIMHttpStatusCode *MultiStatus __attribute__((swift_name("MultiStatus")));
@property (readonly) MVIMHttpStatusCode *MultipleChoices __attribute__((swift_name("MultipleChoices")));
@property (readonly) MVIMHttpStatusCode *NoContent __attribute__((swift_name("NoContent")));
@property (readonly) MVIMHttpStatusCode *NonAuthoritativeInformation __attribute__((swift_name("NonAuthoritativeInformation")));
@property (readonly) MVIMHttpStatusCode *NotAcceptable __attribute__((swift_name("NotAcceptable")));
@property (readonly) MVIMHttpStatusCode *NotFound __attribute__((swift_name("NotFound")));
@property (readonly) MVIMHttpStatusCode *NotImplemented __attribute__((swift_name("NotImplemented")));
@property (readonly) MVIMHttpStatusCode *NotModified __attribute__((swift_name("NotModified")));
@property (readonly) MVIMHttpStatusCode *OK __attribute__((swift_name("OK")));
@property (readonly) MVIMHttpStatusCode *PartialContent __attribute__((swift_name("PartialContent")));
@property (readonly) MVIMHttpStatusCode *PayloadTooLarge __attribute__((swift_name("PayloadTooLarge")));
@property (readonly) MVIMHttpStatusCode *PaymentRequired __attribute__((swift_name("PaymentRequired")));
@property (readonly) MVIMHttpStatusCode *PermanentRedirect __attribute__((swift_name("PermanentRedirect")));
@property (readonly) MVIMHttpStatusCode *PreconditionFailed __attribute__((swift_name("PreconditionFailed")));
@property (readonly) MVIMHttpStatusCode *Processing __attribute__((swift_name("Processing")));
@property (readonly) MVIMHttpStatusCode *ProxyAuthenticationRequired __attribute__((swift_name("ProxyAuthenticationRequired")));
@property (readonly) MVIMHttpStatusCode *RequestHeaderFieldTooLarge __attribute__((swift_name("RequestHeaderFieldTooLarge")));
@property (readonly) MVIMHttpStatusCode *RequestTimeout __attribute__((swift_name("RequestTimeout")));
@property (readonly) MVIMHttpStatusCode *RequestURITooLong __attribute__((swift_name("RequestURITooLong")));
@property (readonly) MVIMHttpStatusCode *RequestedRangeNotSatisfiable __attribute__((swift_name("RequestedRangeNotSatisfiable")));
@property (readonly) MVIMHttpStatusCode *ResetContent __attribute__((swift_name("ResetContent")));
@property (readonly) MVIMHttpStatusCode *SeeOther __attribute__((swift_name("SeeOther")));
@property (readonly) MVIMHttpStatusCode *ServiceUnavailable __attribute__((swift_name("ServiceUnavailable")));
@property (readonly) MVIMHttpStatusCode *SwitchProxy __attribute__((swift_name("SwitchProxy")));
@property (readonly) MVIMHttpStatusCode *SwitchingProtocols __attribute__((swift_name("SwitchingProtocols")));
@property (readonly) MVIMHttpStatusCode *TemporaryRedirect __attribute__((swift_name("TemporaryRedirect")));
@property (readonly) MVIMHttpStatusCode *TooManyRequests __attribute__((swift_name("TooManyRequests")));
@property (readonly) MVIMHttpStatusCode *Unauthorized __attribute__((swift_name("Unauthorized")));
@property (readonly) MVIMHttpStatusCode *UnprocessableEntity __attribute__((swift_name("UnprocessableEntity")));
@property (readonly) MVIMHttpStatusCode *UnsupportedMediaType __attribute__((swift_name("UnsupportedMediaType")));
@property (readonly) MVIMHttpStatusCode *UpgradeRequired __attribute__((swift_name("UpgradeRequired")));
@property (readonly) MVIMHttpStatusCode *UseProxy __attribute__((swift_name("UseProxy")));
@property (readonly) MVIMHttpStatusCode *VariantAlsoNegotiates __attribute__((swift_name("VariantAlsoNegotiates")));
@property (readonly) MVIMHttpStatusCode *VersionNotSupported __attribute__((swift_name("VersionNotSupported")));
@property (readonly) NSArray<MVIMHttpStatusCode *> *allStatusCodes __attribute__((swift_name("allStatusCodes")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IllegalHeaderNameException")))
@interface MVIMIllegalHeaderNameException : MVIMKotlinIllegalArgumentException
- (instancetype)initWithHeaderName:(NSString *)headerName position:(int32_t)position __attribute__((swift_name("init(headerName:position:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *headerName __attribute__((swift_name("headerName")));
@property (readonly) int32_t position __attribute__((swift_name("position")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IllegalHeaderValueException")))
@interface MVIMIllegalHeaderValueException : MVIMKotlinIllegalArgumentException
- (instancetype)initWithHeaderValue:(NSString *)headerValue position:(int32_t)position __attribute__((swift_name("init(headerValue:position:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *headerValue __attribute__((swift_name("headerValue")));
@property (readonly) int32_t position __attribute__((swift_name("position")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkHeader")))
@interface MVIMLinkHeader : MVIMHeaderValueWithParameters
- (instancetype)initWithUri:(NSString *)uri rel:(NSString *)rel __attribute__((swift_name("init(uri:rel:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUri:(NSString *)uri rel_:(MVIMKotlinArray<NSString *> *)rel __attribute__((swift_name("init(uri:rel_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUri:(NSString *)uri rel:(NSArray<NSString *> *)rel type:(MVIMContentType *)type __attribute__((swift_name("init(uri:rel:type:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUri:(NSString *)uri params:(NSArray<MVIMHeaderValueParam *> *)params __attribute__((swift_name("init(uri:params:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithContent:(NSString *)content parameters:(NSArray<MVIMHeaderValueParam *> *)parameters __attribute__((swift_name("init(content:parameters:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *uri __attribute__((swift_name("uri")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkHeader.Parameters")))
@interface MVIMLinkHeaderParameters : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)parameters __attribute__((swift_name("init()")));
@property (readonly) NSString *Anchor __attribute__((swift_name("Anchor")));
@property (readonly) NSString *HrefLang __attribute__((swift_name("HrefLang")));
@property (readonly) NSString *Media __attribute__((swift_name("Media")));
@property (readonly) NSString *Rel __attribute__((swift_name("Rel")));
@property (readonly) NSString *Rev __attribute__((swift_name("Rev")));
@property (readonly) NSString *Title __attribute__((swift_name("Title")));
@property (readonly) NSString *Type __attribute__((swift_name("Type")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LinkHeader.Rel")))
@interface MVIMLinkHeaderRel : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)rel __attribute__((swift_name("init()")));
@property (readonly) NSString *DnsPrefetch __attribute__((swift_name("DnsPrefetch")));
@property (readonly) NSString *Next __attribute__((swift_name("Next")));
@property (readonly) NSString *PreConnect __attribute__((swift_name("PreConnect")));
@property (readonly) NSString *PreLoad __attribute__((swift_name("PreLoad")));
@property (readonly) NSString *PreRender __attribute__((swift_name("PreRender")));
@property (readonly) NSString *Prefetch __attribute__((swift_name("Prefetch")));
@property (readonly) NSString *Stylesheet __attribute__((swift_name("Stylesheet")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersCompanion")))
@interface MVIMParametersCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMParameters>)buildBuilder:(void (^)(MVIMParametersBuilder *))builder __attribute__((swift_name("build(builder:)")));
@property (readonly) id<MVIMParameters> Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersBuilder")))
@interface MVIMParametersBuilder : MVIMStringValuesBuilder
- (instancetype)initWithSize:(int32_t)size urlEncodingOption:(MVIMUrlEncodingOption *)urlEncodingOption __attribute__((swift_name("init(size:urlEncodingOption:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName size:(int32_t)size __attribute__((swift_name("init(caseInsensitiveName:size:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<MVIMParameters>)build __attribute__((swift_name("build()")));
@property MVIMUrlEncodingOption *urlEncodingOption __attribute__((swift_name("urlEncodingOption")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersImpl")))
@interface MVIMParametersImpl : MVIMStringValuesImpl <MVIMParameters>
- (instancetype)initWithValues:(NSDictionary<NSString *, NSArray<NSString *> *> *)values urlEncodingOption:(MVIMUrlEncodingOption *)urlEncodingOption __attribute__((swift_name("init(values:urlEncodingOption:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName values:(NSDictionary<NSString *, NSArray<NSString *> *> *)values __attribute__((swift_name("init(caseInsensitiveName:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMUrlEncodingOption *urlEncodingOption __attribute__((swift_name("urlEncodingOption")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersSingleImpl")))
@interface MVIMParametersSingleImpl : MVIMStringValuesSingleImpl <MVIMParameters>
- (instancetype)initWithName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(name:values:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCaseInsensitiveName:(BOOL)caseInsensitiveName name:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("init(caseInsensitiveName:name:values:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RangeUnits")))
@interface MVIMRangeUnits : MVIMKotlinEnum<MVIMRangeUnits *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMRangeUnits *bytes __attribute__((swift_name("bytes")));
@property (class, readonly) MVIMRangeUnits *none __attribute__((swift_name("none")));
+ (MVIMKotlinArray<MVIMRangeUnits *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *unitToken __attribute__((swift_name("unitToken")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RangesSpecifier")))
@interface MVIMRangesSpecifier : MVIMBase
- (instancetype)initWithUnit:(MVIMRangeUnits *)unit ranges:(NSArray<MVIMContentRange *> *)ranges __attribute__((swift_name("init(unit:ranges:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithUnit:(NSString *)unit ranges_:(NSArray<MVIMContentRange *> *)ranges __attribute__((swift_name("init(unit:ranges_:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSArray<MVIMContentRange *> *)component2 __attribute__((swift_name("component2()")));
- (MVIMRangesSpecifier *)doCopyUnit:(NSString *)unit ranges:(NSArray<MVIMContentRange *> *)ranges __attribute__((swift_name("doCopy(unit:ranges:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isValidRangeUnitPredicate:(MVIMBoolean *(^)(NSString *))rangeUnitPredicate __attribute__((swift_name("isValid(rangeUnitPredicate:)")));
- (NSArray<MVIMKotlinLongRange *> *)mergeLength:(int64_t)length __attribute__((swift_name("merge(length:)")));
- (NSArray<MVIMKotlinLongRange *> *)mergeLength:(int64_t)length maxRangeCount:(int32_t)maxRangeCount __attribute__((swift_name("merge(length:maxRangeCount:)")));
- (MVIMKotlinLongRange * _Nullable)mergeToSingleLength:(int64_t)length __attribute__((swift_name("mergeToSingle(length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSArray<MVIMContentRange *> *ranges __attribute__((swift_name("ranges")));
@property (readonly) NSString *unit __attribute__((swift_name("unit")));
@end;

__attribute__((swift_name("RequestConnectionPoint")))
@protocol MVIMRequestConnectionPoint
@required
@property (readonly) NSString *host __attribute__((swift_name("host")));
@property (readonly) MVIMHttpMethod *method __attribute__((swift_name("method")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@property (readonly) NSString *remoteHost __attribute__((swift_name("remoteHost")));
@property (readonly) NSString *scheme __attribute__((swift_name("scheme")));
@property (readonly) NSString *uri __attribute__((swift_name("uri")));
@property (readonly) NSString *version_ __attribute__((swift_name("version_")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLBuilder")))
@interface MVIMURLBuilder : MVIMBase
- (instancetype)initWithProtocol:(MVIMURLProtocol *)protocol host:(NSString *)host port:(int32_t)port user:(NSString * _Nullable)user password:(NSString * _Nullable)password encodedPath:(NSString *)encodedPath parameters:(MVIMParametersBuilder *)parameters fragment:(NSString *)fragment trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("init(protocol:host:port:user:password:encodedPath:parameters:fragment:trailingQuery:)"))) __attribute__((objc_designated_initializer));
- (MVIMUrl *)build __attribute__((swift_name("build()")));
- (NSString *)buildString __attribute__((swift_name("buildString()")));
- (MVIMURLBuilder *)pathComponents:(MVIMKotlinArray<NSString *> *)components __attribute__((swift_name("path(components:)")));
- (MVIMURLBuilder *)pathComponents_:(NSArray<NSString *> *)components __attribute__((swift_name("path(components_:)")));
@property NSString *encodedPath __attribute__((swift_name("encodedPath")));
@property NSString *fragment __attribute__((swift_name("fragment")));
@property NSString *host __attribute__((swift_name("host")));
@property (readonly) MVIMParametersBuilder *parameters __attribute__((swift_name("parameters")));
@property NSString * _Nullable password __attribute__((swift_name("password")));
@property int32_t port __attribute__((swift_name("port")));
@property MVIMURLProtocol *protocol __attribute__((swift_name("protocol")));
@property BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property NSString * _Nullable user __attribute__((swift_name("user")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLBuilder.Companion")))
@interface MVIMURLBuilderCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLDecodeException")))
@interface MVIMURLDecodeException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLParserException")))
@interface MVIMURLParserException : MVIMKotlinIllegalStateException
- (instancetype)initWithUrlString:(NSString *)urlString cause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(urlString:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLProtocol")))
@interface MVIMURLProtocol : MVIMBase
- (instancetype)initWithName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("init(name:defaultPort:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (int32_t)component2 __attribute__((swift_name("component2()")));
- (MVIMURLProtocol *)doCopyName:(NSString *)name defaultPort:(int32_t)defaultPort __attribute__((swift_name("doCopy(name:defaultPort:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t defaultPort __attribute__((swift_name("defaultPort")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLProtocol.Companion")))
@interface MVIMURLProtocolCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMURLProtocol *)createOrDefaultName:(NSString *)name __attribute__((swift_name("createOrDefault(name:)")));
@property (readonly) MVIMURLProtocol *HTTP __attribute__((swift_name("HTTP")));
@property (readonly) MVIMURLProtocol *HTTPS __attribute__((swift_name("HTTPS")));
@property (readonly) MVIMURLProtocol *SOCKS __attribute__((swift_name("SOCKS")));
@property (readonly) MVIMURLProtocol *WS __attribute__((swift_name("WS")));
@property (readonly) MVIMURLProtocol *WSS __attribute__((swift_name("WSS")));
@property (readonly) NSDictionary<NSString *, MVIMURLProtocol *> *byName __attribute__((swift_name("byName")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsafeHeaderException")))
@interface MVIMUnsafeHeaderException : MVIMKotlinIllegalArgumentException
- (instancetype)initWithHeader:(NSString *)header __attribute__((swift_name("init(header:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Url")))
@interface MVIMUrl : MVIMBase
- (instancetype)initWithProtocol:(MVIMURLProtocol *)protocol host:(NSString *)host specifiedPort:(int32_t)specifiedPort encodedPath:(NSString *)encodedPath parameters:(id<MVIMParameters>)parameters fragment:(NSString *)fragment user:(NSString * _Nullable)user password:(NSString * _Nullable)password trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("init(protocol:host:specifiedPort:encodedPath:parameters:fragment:user:password:trailingQuery:)"))) __attribute__((objc_designated_initializer));
- (MVIMURLProtocol *)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (int32_t)component3 __attribute__((swift_name("component3()")));
- (NSString *)component4 __attribute__((swift_name("component4()")));
- (id<MVIMParameters>)component5 __attribute__((swift_name("component5()")));
- (NSString *)component6 __attribute__((swift_name("component6()")));
- (NSString * _Nullable)component7 __attribute__((swift_name("component7()")));
- (NSString * _Nullable)component8 __attribute__((swift_name("component8()")));
- (BOOL)component9 __attribute__((swift_name("component9()")));
- (MVIMUrl *)doCopyProtocol:(MVIMURLProtocol *)protocol host:(NSString *)host specifiedPort:(int32_t)specifiedPort encodedPath:(NSString *)encodedPath parameters:(id<MVIMParameters>)parameters fragment:(NSString *)fragment user:(NSString * _Nullable)user password:(NSString * _Nullable)password trailingQuery:(BOOL)trailingQuery __attribute__((swift_name("doCopy(protocol:host:specifiedPort:encodedPath:parameters:fragment:user:password:trailingQuery:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *encodedPath __attribute__((swift_name("encodedPath")));
@property (readonly) NSString *fragment __attribute__((swift_name("fragment")));
@property (readonly) NSString *host __attribute__((swift_name("host")));
@property (readonly) id<MVIMParameters> parameters __attribute__((swift_name("parameters")));
@property (readonly) NSString * _Nullable password __attribute__((swift_name("password")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@property (readonly) MVIMURLProtocol *protocol __attribute__((swift_name("protocol")));
@property (readonly) int32_t specifiedPort __attribute__((swift_name("specifiedPort")));
@property (readonly) BOOL trailingQuery __attribute__((swift_name("trailingQuery")));
@property (readonly) NSString * _Nullable user __attribute__((swift_name("user")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Url.Companion")))
@interface MVIMUrlCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UrlEncodingOption")))
@interface MVIMUrlEncodingOption : MVIMKotlinEnum<MVIMUrlEncodingOption *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMUrlEncodingOption *default_ __attribute__((swift_name("default_")));
@property (class, readonly) MVIMUrlEncodingOption *keyOnly __attribute__((swift_name("keyOnly")));
@property (class, readonly) MVIMUrlEncodingOption *valueOnly __attribute__((swift_name("valueOnly")));
@property (class, readonly) MVIMUrlEncodingOption *noEncoding __attribute__((swift_name("noEncoding")));
+ (MVIMKotlinArray<MVIMUrlEncodingOption *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AuthScheme")))
@interface MVIMAuthScheme : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)authScheme __attribute__((swift_name("init()")));
@property (readonly) NSString *Basic __attribute__((swift_name("Basic")));
@property (readonly) NSString *Bearer __attribute__((swift_name("Bearer")));
@property (readonly) NSString *Digest __attribute__((swift_name("Digest")));
@property (readonly) NSString *Negotiate __attribute__((swift_name("Negotiate")));
@property (readonly) NSString *OAuth __attribute__((swift_name("OAuth")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueEncoding")))
@interface MVIMHeaderValueEncoding : MVIMKotlinEnum<MVIMHeaderValueEncoding *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMHeaderValueEncoding *quotedWhenRequired __attribute__((swift_name("quotedWhenRequired")));
@property (class, readonly) MVIMHeaderValueEncoding *quotedAlways __attribute__((swift_name("quotedAlways")));
@property (class, readonly) MVIMHeaderValueEncoding *uriEncode __attribute__((swift_name("uriEncode")));
+ (MVIMKotlinArray<MVIMHeaderValueEncoding *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("HttpAuthHeader")))
@interface MVIMHttpAuthHeader : MVIMBase
- (instancetype)initWithAuthScheme:(NSString *)authScheme __attribute__((swift_name("init(authScheme:)"))) __attribute__((objc_designated_initializer));
- (NSString *)render __attribute__((swift_name("render()")));
- (NSString *)renderEncoding:(MVIMHeaderValueEncoding *)encoding __attribute__((swift_name("render(encoding:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *authScheme __attribute__((swift_name("authScheme")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Companion")))
@interface MVIMHttpAuthHeaderCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMHttpAuthHeaderParameterized *)basicAuthChallengeRealm:(NSString *)realm charset:(MVIMCharset * _Nullable)charset __attribute__((swift_name("basicAuthChallenge(realm:charset:)")));
- (MVIMHttpAuthHeaderParameterized *)digestAuthChallengeRealm:(NSString *)realm nonce:(NSString *)nonce domain:(NSArray<NSString *> *)domain opaque:(NSString * _Nullable)opaque stale:(MVIMBoolean * _Nullable)stale algorithm:(NSString *)algorithm __attribute__((swift_name("digestAuthChallenge(realm:nonce:domain:opaque:stale:algorithm:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Parameterized")))
@interface MVIMHttpAuthHeaderParameterized : MVIMHttpAuthHeader
- (instancetype)initWithAuthScheme:(NSString *)authScheme parameters:(NSDictionary<NSString *, NSString *> *)parameters encoding:(MVIMHeaderValueEncoding *)encoding __attribute__((swift_name("init(authScheme:parameters:encoding:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithAuthScheme:(NSString *)authScheme parameters:(NSArray<MVIMHeaderValueParam *> *)parameters encoding_:(MVIMHeaderValueEncoding *)encoding __attribute__((swift_name("init(authScheme:parameters:encoding_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithAuthScheme:(NSString *)authScheme __attribute__((swift_name("init(authScheme:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString * _Nullable)parameterName:(NSString *)name __attribute__((swift_name("parameter(name:)")));
- (NSString *)render __attribute__((swift_name("render()")));
- (NSString *)renderEncoding:(MVIMHeaderValueEncoding *)encoding __attribute__((swift_name("render(encoding:)")));
- (MVIMHttpAuthHeaderParameterized *)withParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withParameter(name:value:)")));
- (MVIMHttpAuthHeaderParameterized *)withReplacedParameterName:(NSString *)name value:(NSString *)value __attribute__((swift_name("withReplacedParameter(name:value:)")));
@property (readonly) MVIMHeaderValueEncoding *encoding __attribute__((swift_name("encoding")));
@property (readonly) NSArray<MVIMHeaderValueParam *> *parameters __attribute__((swift_name("parameters")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Parameters")))
@interface MVIMHttpAuthHeaderParameters : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)parameters __attribute__((swift_name("init()")));
@property (readonly) NSString *Charset __attribute__((swift_name("Charset")));
@property (readonly) NSString *OAuthCallback __attribute__((swift_name("OAuthCallback")));
@property (readonly) NSString *OAuthCallbackConfirmed __attribute__((swift_name("OAuthCallbackConfirmed")));
@property (readonly) NSString *OAuthConsumerKey __attribute__((swift_name("OAuthConsumerKey")));
@property (readonly) NSString *OAuthNonce __attribute__((swift_name("OAuthNonce")));
@property (readonly) NSString *OAuthSignature __attribute__((swift_name("OAuthSignature")));
@property (readonly) NSString *OAuthSignatureMethod __attribute__((swift_name("OAuthSignatureMethod")));
@property (readonly) NSString *OAuthTimestamp __attribute__((swift_name("OAuthTimestamp")));
@property (readonly) NSString *OAuthToken __attribute__((swift_name("OAuthToken")));
@property (readonly) NSString *OAuthTokenSecret __attribute__((swift_name("OAuthTokenSecret")));
@property (readonly) NSString *OAuthVerifier __attribute__((swift_name("OAuthVerifier")));
@property (readonly) NSString *OAuthVersion __attribute__((swift_name("OAuthVersion")));
@property (readonly) NSString *Realm __attribute__((swift_name("Realm")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeader.Single")))
@interface MVIMHttpAuthHeaderSingle : MVIMHttpAuthHeader
- (instancetype)initWithAuthScheme:(NSString *)authScheme blob:(NSString *)blob __attribute__((swift_name("init(authScheme:blob:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithAuthScheme:(NSString *)authScheme __attribute__((swift_name("init(authScheme:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)render __attribute__((swift_name("render()")));
- (NSString *)renderEncoding:(MVIMHeaderValueEncoding *)encoding __attribute__((swift_name("render(encoding:)")));
@property (readonly) NSString *blob __attribute__((swift_name("blob")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParseException")))
@interface MVIMParseException : MVIMKotlinIllegalArgumentException
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) MVIMKotlinThrowable * _Nullable cause __attribute__((swift_name("cause")));
@property (readonly) NSString *message __attribute__((swift_name("message")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteArrayContent")))
@interface MVIMByteArrayContent : MVIMOutgoingContentByteArrayContent
- (instancetype)initWithBytes:(MVIMKotlinByteArray *)bytes contentType:(MVIMContentType * _Nullable)contentType status:(MVIMHttpStatusCode * _Nullable)status __attribute__((swift_name("init(bytes:contentType:status:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (MVIMKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
@property (readonly) MVIMLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) MVIMContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly) MVIMHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CachingOptions")))
@interface MVIMCachingOptions : MVIMBase
- (instancetype)initWithCacheControl:(MVIMCacheControl_ * _Nullable)cacheControl expires:(MVIMGMTDate * _Nullable)expires __attribute__((swift_name("init(cacheControl:expires:)"))) __attribute__((objc_designated_initializer));
- (MVIMCacheControl_ * _Nullable)component1 __attribute__((swift_name("component1()")));
- (MVIMGMTDate * _Nullable)component2 __attribute__((swift_name("component2()")));
- (MVIMCachingOptions *)doCopyCacheControl:(MVIMCacheControl_ * _Nullable)cacheControl expires:(MVIMGMTDate * _Nullable)expires __attribute__((swift_name("doCopy(cacheControl:expires:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMCacheControl_ * _Nullable cacheControl __attribute__((swift_name("cacheControl")));
@property (readonly) MVIMGMTDate * _Nullable expires __attribute__((swift_name("expires")));
@end;

__attribute__((swift_name("MultiPartData")))
@protocol MVIMMultiPartData
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPartWithCompletionHandler:(void (^)(MVIMPartData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPart(completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiPartDataEmpty")))
@interface MVIMMultiPartDataEmpty : MVIMBase <MVIMMultiPartData>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)empty __attribute__((swift_name("init()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPartWithCompletionHandler:(void (^)(MVIMPartData * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPart(completionHandler:)")));
@end;

__attribute__((swift_name("OutgoingContent.ProtocolUpgrade")))
@interface MVIMOutgoingContentProtocolUpgrade : MVIMOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)upgradeInput:(id<MVIMByteReadChannel>)input output:(id<MVIMByteWriteChannel>)output engineContext:(id<MVIMKotlinCoroutineContext>)engineContext userContext:(id<MVIMKotlinCoroutineContext>)userContext completionHandler:(void (^)(id<MVIMJob> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("upgrade(input:output:engineContext:userContext:completionHandler:)")));
@property (readonly) MVIMHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@end;

__attribute__((swift_name("OutgoingContent.ReadChannelContent")))
@interface MVIMOutgoingContentReadChannelContent : MVIMOutgoingContent
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<MVIMByteReadChannel>)readFrom __attribute__((swift_name("readFrom()")));
- (id<MVIMByteReadChannel>)readFromRange:(MVIMKotlinLongRange *)range __attribute__((swift_name("readFrom(range:)")));
@end;

__attribute__((swift_name("PartData")))
@interface MVIMPartData : MVIMBase
- (instancetype)initWithDispose:(void (^)(void))dispose headers:(id<MVIMHeaders>)headers __attribute__((swift_name("init(dispose:headers:)"))) __attribute__((objc_designated_initializer));
@property (readonly) MVIMContentDisposition * _Nullable contentDisposition __attribute__((swift_name("contentDisposition")));
@property (readonly) MVIMContentType * _Nullable contentType __attribute__((swift_name("contentType")));
@property (readonly, getter=dispose_) void (^dispose)(void) __attribute__((swift_name("dispose")));
@property (readonly) id<MVIMHeaders> headers __attribute__((swift_name("headers")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) id<MVIMHeaders> partHeaders __attribute__((swift_name("partHeaders"))) __attribute__((unavailable("Use headers property instead")));
@property (readonly) NSString * _Nullable partName __attribute__((swift_name("partName"))) __attribute__((unavailable("Use name property instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.BinaryItem")))
@interface MVIMPartDataBinaryItem : MVIMPartData
- (instancetype)initWithProvider:(id<MVIMInput> (^)(void))provider dispose:(void (^)(void))dispose partHeaders:(id<MVIMHeaders>)partHeaders __attribute__((swift_name("init(provider:dispose:partHeaders:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithDispose:(void (^)(void))dispose headers:(id<MVIMHeaders>)headers __attribute__((swift_name("init(dispose:headers:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) id<MVIMInput> (^provider)(void) __attribute__((swift_name("provider")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.FileItem")))
@interface MVIMPartDataFileItem : MVIMPartData
- (instancetype)initWithProvider:(id<MVIMInput> (^)(void))provider dispose:(void (^)(void))dispose partHeaders:(id<MVIMHeaders>)partHeaders __attribute__((swift_name("init(provider:dispose:partHeaders:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithDispose:(void (^)(void))dispose headers:(id<MVIMHeaders>)headers __attribute__((swift_name("init(dispose:headers:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString * _Nullable originalFileName __attribute__((swift_name("originalFileName")));
@property (readonly) id<MVIMInput> (^provider)(void) __attribute__((swift_name("provider")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PartData.FormItem")))
@interface MVIMPartDataFormItem : MVIMPartData
- (instancetype)initWithValue:(NSString *)value dispose:(void (^)(void))dispose partHeaders:(id<MVIMHeaders>)partHeaders __attribute__((swift_name("init(value:dispose:partHeaders:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithDispose:(void (^)(void))dispose headers:(id<MVIMHeaders>)headers __attribute__((swift_name("init(dispose:headers:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TextContent")))
@interface MVIMTextContent : MVIMOutgoingContentByteArrayContent
- (instancetype)initWithText:(NSString *)text contentType:(MVIMContentType *)contentType status:(MVIMHttpStatusCode * _Nullable)status __attribute__((swift_name("init(text:contentType:status:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (MVIMKotlinByteArray *)bytes __attribute__((swift_name("bytes()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLong *contentLength __attribute__((swift_name("contentLength")));
@property (readonly) MVIMContentType *contentType __attribute__((swift_name("contentType")));
@property (readonly) MVIMHttpStatusCode * _Nullable status __attribute__((swift_name("status")));
@property (readonly) NSString *text __attribute__((swift_name("text")));
@end;

__attribute__((swift_name("NonceManager")))
@protocol MVIMNonceManager
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)doNewNonceWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doNewNonce(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)verifyNonceNonce:(NSString *)nonce completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("verifyNonce(nonce:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AlwaysFailNonceManager")))
@interface MVIMAlwaysFailNonceManager : MVIMBase <MVIMNonceManager>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)alwaysFailNonceManager __attribute__((swift_name("init()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)doNewNonceWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doNewNonce(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)verifyNonceNonce:(NSString *)nonce completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("verifyNonce(nonce:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AttributeKey")))
@interface MVIMAttributeKey<T> : MVIMBase
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((swift_name("Attributes")))
@protocol MVIMAttributes
@required
- (id)computeIfAbsentKey:(MVIMAttributeKey<id> *)key block:(id (^)(void))block __attribute__((swift_name("computeIfAbsent(key:block:)")));
- (BOOL)containsKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("contains(key:)")));
- (id)getKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("get(key:)")));
- (id _Nullable)getOrNullKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("getOrNull(key:)")));
- (void)putKey:(MVIMAttributeKey<id> *)key value:(id)value __attribute__((swift_name("put(key:value:)")));
- (void)removeKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("remove(key:)")));
- (id)takeKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("take(key:)")));
- (id _Nullable)takeOrNullKey:(MVIMAttributeKey<id> *)key __attribute__((swift_name("takeOrNull(key:)")));
@property (readonly) NSArray<MVIMAttributeKey<id> *> *allKeys __attribute__((swift_name("allKeys")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CaseInsensitiveMap")))
@interface MVIMCaseInsensitiveMap : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CaseInsensitiveSet")))
@interface MVIMCaseInsensitiveSet : NSObject
@end;

__attribute__((swift_name("Digest")))
@protocol MVIMDigest
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)buildWithCompletionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("build(completionHandler:)")));
- (void)plusAssignBytes:(MVIMKotlinByteArray *)bytes __attribute__((swift_name("plusAssign(bytes:)")));
- (void)reset __attribute__((swift_name("reset()")));
@end;

__attribute__((swift_name("Encoder_")))
@protocol MVIMEncoder_
@required
- (id<MVIMByteReadChannel>)decode:(id<MVIMCoroutineScope>)receiver source:(id<MVIMByteReadChannel>)source __attribute__((swift_name("decode(_:source:)")));
- (id<MVIMByteReadChannel>)encode:(id<MVIMCoroutineScope>)receiver source:(id<MVIMByteReadChannel>)source __attribute__((swift_name("encode(_:source:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GenerateOnlyNonceManager")))
@interface MVIMGenerateOnlyNonceManager : MVIMBase <MVIMNonceManager>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)generateOnlyNonceManager __attribute__((swift_name("init()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)doNewNonceWithCompletionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doNewNonce(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)verifyNonceNonce:(NSString *)nonce completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("verifyNonce(nonce:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Hash")))
@interface MVIMHash : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)hash_ __attribute__((swift_name("init()")));
- (int32_t)combineObjects:(MVIMKotlinArray<id> *)objects __attribute__((swift_name("combine(objects:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Identity")))
@interface MVIMIdentity : MVIMBase <MVIMEncoder_>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)identity __attribute__((swift_name("init()")));
- (id<MVIMByteReadChannel>)decode:(id<MVIMCoroutineScope>)receiver source:(id<MVIMByteReadChannel>)source __attribute__((swift_name("decode(_:source:)")));
- (id<MVIMByteReadChannel>)encode:(id<MVIMCoroutineScope>)receiver source:(id<MVIMByteReadChannel>)source __attribute__((swift_name("encode(_:source:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Lock")))
@interface MVIMLock : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
- (void)lock __attribute__((swift_name("lock()")));
- (void)unlock __attribute__((swift_name("unlock()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlatformUtils")))
@interface MVIMPlatformUtils : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)platformUtils __attribute__((swift_name("init()")));
@property (readonly) BOOL IS_BROWSER __attribute__((swift_name("IS_BROWSER")));
@property (readonly) BOOL IS_DEVELOPMENT_MODE __attribute__((swift_name("IS_DEVELOPMENT_MODE")));
@property (readonly) BOOL IS_JVM __attribute__((swift_name("IS_JVM")));
@property (readonly) BOOL IS_NATIVE __attribute__((swift_name("IS_NATIVE")));
@property (readonly) BOOL IS_NODE __attribute__((swift_name("IS_NODE")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringValuesCompanion")))
@interface MVIMStringValuesCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMStringValues>)buildCaseInsensitiveName:(BOOL)caseInsensitiveName builder:(void (^)(MVIMStringValuesBuilder *))builder __attribute__((swift_name("build(caseInsensitiveName:builder:)")));
@property (readonly) id<MVIMStringValues> Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NetworkAddress")))
@interface MVIMNetworkAddress : MVIMBase
- (instancetype)initWithHostname:(NSString *)hostname port:(int32_t)port explicitAddress:(id _Nullable)explicitAddress __attribute__((swift_name("init(hostname:port:explicitAddress:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property id explicitAddress __attribute__((swift_name("explicitAddress")));
@property (readonly) NSString *hostname __attribute__((swift_name("hostname")));
@property (readonly) int32_t port __attribute__((swift_name("port")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnresolvedAddressException")))
@interface MVIMUnresolvedAddressException : MVIMKotlinIllegalArgumentException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("ChannelIOException")))
@interface MVIMChannelIOException : MVIMIOException
- (instancetype)initWithMessage:(NSString *)message exception:(MVIMKotlinThrowable *)exception __attribute__((swift_name("init(message:exception:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelReadException")))
@interface MVIMChannelReadException : MVIMChannelIOException
- (instancetype)initWithMessage:(NSString *)message exception:(MVIMKotlinThrowable *)exception __attribute__((swift_name("init(message:exception:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelWriteException")))
@interface MVIMChannelWriteException : MVIMChannelIOException
- (instancetype)initWithMessage:(NSString *)message exception:(MVIMKotlinThrowable *)exception __attribute__((swift_name("init(message:exception:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("ConversionService")))
@protocol MVIMConversionService
@required
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(id<MVIMTypeInfo>)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion")))
@interface MVIMDataConversion : MVIMBase <MVIMConversionService>
- (instancetype)initWithConfiguration:(MVIMDataConversionConfiguration *)configuration __attribute__((swift_name("init(configuration:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(id<MVIMTypeInfo>)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DataConversion.Configuration")))
@interface MVIMDataConversionConfiguration : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)convertConfigure:(void (^)(MVIMDelegatingConversionServiceConfiguration<id> *))configure __attribute__((swift_name("convert(configure:)")));
- (void)convertType:(id<MVIMKotlinKClass>)type convertor:(id<MVIMConversionService>)convertor __attribute__((swift_name("convert(type:convertor:)")));
- (void)convertType:(id<MVIMKotlinKType>)type configure:(void (^)(MVIMDelegatingConversionServiceConfiguration<id> *))configure __attribute__((swift_name("convert(type:configure:)")));
@end;

__attribute__((swift_name("DataConversionException")))
@interface MVIMDataConversionException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultConversionService")))
@interface MVIMDefaultConversionService : MVIMBase <MVIMConversionService>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)defaultConversionService __attribute__((swift_name("init()")));
- (id)fromValueValue:(NSString *)value klass:(id<MVIMKotlinKClass>)klass __attribute__((swift_name("fromValue(value:klass:)")));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(id<MVIMTypeInfo>)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelegatingConversionService")))
@interface MVIMDelegatingConversionService : MVIMBase <MVIMConversionService>
- (instancetype)initWithKlass:(id<MVIMKotlinKClass>)klass decoder:(id _Nullable (^ _Nullable)(NSArray<NSString *> *))decoder encoder:(NSArray<NSString *> *(^ _Nullable)(id _Nullable))encoder __attribute__((swift_name("init(klass:decoder:encoder:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)fromValuesValues:(NSArray<NSString *> *)values type:(id<MVIMTypeInfo>)type __attribute__((swift_name("fromValues(values:type:)")));
- (NSArray<NSString *> *)toValuesValue:(id _Nullable)value __attribute__((swift_name("toValues(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelegatingConversionServiceConfiguration")))
@interface MVIMDelegatingConversionServiceConfiguration<T> : MVIMBase
- (void)decodeConverter:(T (^)(NSArray<NSString *> *))converter __attribute__((swift_name("decode(converter:)")));
- (void)encodeConverter:(NSArray<NSString *> *(^)(T))converter __attribute__((swift_name("encode(converter:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDate")))
@interface MVIMGMTDate : MVIMBase <MVIMKotlinComparable>
- (int32_t)compareToOther:(MVIMGMTDate *)other __attribute__((swift_name("compareTo(other:)")));
- (int32_t)component1 __attribute__((swift_name("component1()")));
- (int32_t)component2 __attribute__((swift_name("component2()")));
- (int32_t)component3 __attribute__((swift_name("component3()")));
- (MVIMWeekDay *)component4 __attribute__((swift_name("component4()")));
- (int32_t)component5 __attribute__((swift_name("component5()")));
- (int32_t)component6 __attribute__((swift_name("component6()")));
- (MVIMMonth_ *)component7 __attribute__((swift_name("component7()")));
- (int32_t)component8 __attribute__((swift_name("component8()")));
- (int64_t)component9 __attribute__((swift_name("component9()")));
- (MVIMGMTDate *)doCopySeconds:(int32_t)seconds minutes:(int32_t)minutes hours:(int32_t)hours dayOfWeek:(MVIMWeekDay *)dayOfWeek dayOfMonth:(int32_t)dayOfMonth dayOfYear:(int32_t)dayOfYear month:(MVIMMonth_ *)month year:(int32_t)year timestamp:(int64_t)timestamp __attribute__((swift_name("doCopy(seconds:minutes:hours:dayOfWeek:dayOfMonth:dayOfYear:month:year:timestamp:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t dayOfMonth __attribute__((swift_name("dayOfMonth")));
@property (readonly) MVIMWeekDay *dayOfWeek __attribute__((swift_name("dayOfWeek")));
@property (readonly) int32_t dayOfYear __attribute__((swift_name("dayOfYear")));
@property (readonly) int32_t hours __attribute__((swift_name("hours")));
@property (readonly) int32_t minutes __attribute__((swift_name("minutes")));
@property (readonly) MVIMMonth_ *month __attribute__((swift_name("month")));
@property (readonly) int32_t seconds __attribute__((swift_name("seconds")));
@property (readonly) int64_t timestamp __attribute__((swift_name("timestamp")));
@property (readonly) int32_t year __attribute__((swift_name("year")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDate.Companion")))
@interface MVIMGMTDateCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMGMTDate *START __attribute__((swift_name("START")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDateParser")))
@interface MVIMGMTDateParser : MVIMBase
- (instancetype)initWithPattern:(NSString *)pattern __attribute__((swift_name("init(pattern:)"))) __attribute__((objc_designated_initializer));
- (MVIMGMTDate *)parseDateString:(NSString *)dateString __attribute__((swift_name("parse(dateString:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GMTDateParser.Companion")))
@interface MVIMGMTDateParserCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) unichar ANY __attribute__((swift_name("ANY")));
@property (readonly) unichar DAY_OF_MONTH __attribute__((swift_name("DAY_OF_MONTH")));
@property (readonly) unichar HOURS __attribute__((swift_name("HOURS")));
@property (readonly) unichar MINUTES __attribute__((swift_name("MINUTES")));
@property (readonly) unichar MONTH __attribute__((swift_name("MONTH")));
@property (readonly) unichar SECONDS __attribute__((swift_name("SECONDS")));
@property (readonly) unichar YEAR __attribute__((swift_name("YEAR")));
@property (readonly) unichar ZONE __attribute__((swift_name("ZONE")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidDateStringException")))
@interface MVIMInvalidDateStringException : MVIMKotlinIllegalStateException
- (instancetype)initWithData:(NSString *)data at:(int32_t)at pattern:(NSString *)pattern __attribute__((swift_name("init(data:at:pattern:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Month_")))
@interface MVIMMonth_ : MVIMKotlinEnum<MVIMMonth_ *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMMonth_ *january __attribute__((swift_name("january")));
@property (class, readonly) MVIMMonth_ *february __attribute__((swift_name("february")));
@property (class, readonly) MVIMMonth_ *march __attribute__((swift_name("march")));
@property (class, readonly) MVIMMonth_ *april __attribute__((swift_name("april")));
@property (class, readonly) MVIMMonth_ *may __attribute__((swift_name("may")));
@property (class, readonly) MVIMMonth_ *june __attribute__((swift_name("june")));
@property (class, readonly) MVIMMonth_ *july __attribute__((swift_name("july")));
@property (class, readonly) MVIMMonth_ *august __attribute__((swift_name("august")));
@property (class, readonly) MVIMMonth_ *september __attribute__((swift_name("september")));
@property (class, readonly) MVIMMonth_ *october __attribute__((swift_name("october")));
@property (class, readonly) MVIMMonth_ *november __attribute__((swift_name("november")));
@property (class, readonly) MVIMMonth_ *december __attribute__((swift_name("december")));
+ (MVIMKotlinArray<MVIMMonth_ *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Month_.Companion")))
@interface MVIMMonth_Companion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMMonth_ *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (MVIMMonth_ *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WeekDay")))
@interface MVIMWeekDay : MVIMKotlinEnum<MVIMWeekDay *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMWeekDay *monday __attribute__((swift_name("monday")));
@property (class, readonly) MVIMWeekDay *tuesday __attribute__((swift_name("tuesday")));
@property (class, readonly) MVIMWeekDay *wednesday __attribute__((swift_name("wednesday")));
@property (class, readonly) MVIMWeekDay *thursday __attribute__((swift_name("thursday")));
@property (class, readonly) MVIMWeekDay *friday __attribute__((swift_name("friday")));
@property (class, readonly) MVIMWeekDay *saturday __attribute__((swift_name("saturday")));
@property (class, readonly) MVIMWeekDay *sunday __attribute__((swift_name("sunday")));
+ (MVIMKotlinArray<MVIMWeekDay *> *)values __attribute__((swift_name("values()")));
@property (readonly) NSString *value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WeekDay.Companion")))
@interface MVIMWeekDayCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMWeekDay *)fromOrdinal:(int32_t)ordinal __attribute__((swift_name("from(ordinal:)")));
- (MVIMWeekDay *)fromValue:(NSString *)value __attribute__((swift_name("from(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InvalidPhaseException")))
@interface MVIMInvalidPhaseException : MVIMKotlinThrowable
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("PipelineContext")))
@protocol MVIMPipelineContext <MVIMCoroutineScope>
@required
- (void)finish __attribute__((swift_name("finish()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)proceedWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("proceed(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)proceedWithSubject:(id)subject completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("proceedWith(subject:completionHandler:)")));
@property (readonly) id context __attribute__((swift_name("context")));
@property (readonly) id subject __attribute__((swift_name("subject")));
@end;

__attribute__((swift_name("PipelineExecutor")))
@protocol MVIMPipelineExecutor
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeInitial:(id _Nullable)initial completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(initial:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PipelinePhase")))
@interface MVIMPipelinePhase : MVIMBase
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((swift_name("KotlinCollection")))
@protocol MVIMKotlinCollection <MVIMKotlinIterable>
@required
- (BOOL)containsElement:(id _Nullable)element __attribute__((swift_name("contains(element:)")));
- (BOOL)containsAllElements:(id)elements __attribute__((swift_name("containsAll(elements:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinMutableIterable")))
@protocol MVIMKotlinMutableIterable <MVIMKotlinIterable>
@required
@end;

__attribute__((swift_name("KotlinMutableCollection")))
@protocol MVIMKotlinMutableCollection <MVIMKotlinCollection, MVIMKotlinMutableIterable>
@required
- (BOOL)addElement:(id _Nullable)element __attribute__((swift_name("add(element:)")));
- (BOOL)addAllElements:(id)elements __attribute__((swift_name("addAll(elements:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)removeElement:(id _Nullable)element __attribute__((swift_name("remove(element:)")));
- (BOOL)removeAllElements:(id)elements __attribute__((swift_name("removeAll(elements:)")));
- (BOOL)retainAllElements:(id)elements __attribute__((swift_name("retainAll(elements:)")));
@end;

__attribute__((swift_name("ConcurrentCollection")))
@interface MVIMConcurrentCollection<E> : MVIMBase <MVIMKotlinMutableCollection>
- (instancetype)initWithDelegate:(id)delegate lock:(MVIMLock *)lock __attribute__((swift_name("init(delegate:lock:)"))) __attribute__((objc_designated_initializer));
- (BOOL)addElement:(E _Nullable)element __attribute__((swift_name("add(element:)")));
- (BOOL)addAllElements:(id)elements __attribute__((swift_name("addAll(elements:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)containsElement:(E _Nullable)element __attribute__((swift_name("contains(element:)")));
- (BOOL)containsAllElements:(id)elements __attribute__((swift_name("containsAll(elements:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (id<MVIMKotlinMutableIterator>)iterator __attribute__((swift_name("iterator()")));
- (BOOL)removeElement:(E _Nullable)element __attribute__((swift_name("remove(element:)")));
- (BOOL)removeAllElements:(id)elements __attribute__((swift_name("removeAll(elements:)")));
- (BOOL)retainAllElements:(id)elements __attribute__((swift_name("retainAll(elements:)")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("ConcurrentList")))
@interface MVIMConcurrentList : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("ConcurrentMap")))
@interface MVIMConcurrentMap : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("ConcurrentSet")))
@interface MVIMConcurrentSet : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LockFreeMPSCQueue")))
@interface MVIMLockFreeMPSCQueue<E> : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)addLastElement:(E)element __attribute__((swift_name("addLast(element:)")));
- (void)close __attribute__((swift_name("close()")));
- (E _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
@property (readonly) BOOL isClosed __attribute__((swift_name("isClosed")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@end;

__attribute__((swift_name("ByteReadChannel")))
@protocol MVIMByteReadChannel
@required
- (BOOL)cancelCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardMax:(int64_t)max completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(max:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)peekToDestination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(MVIMIoBuffer *)dst completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBooleanWithCompletionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBoolean(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readByteWithCompletionHandler:(void (^)(MVIMByte * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readByte(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDoubleWithCompletionHandler:(void (^)(MVIMDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFloatWithCompletionHandler:(void (^)(MVIMFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(MVIMIoBuffer *)dst n:(int32_t)n completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:n:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(void *)dst offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readIntWithCompletionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readLongWithCompletionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPacketSize:(int32_t)size headerSizeHint:(int32_t)headerSizeHint completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(size:headerSizeHint:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readRemainingLimit:(int64_t)limit headerSizeHint:(int32_t)headerSizeHint completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(limit:headerSizeHint:completionHandler:)")));
- (void)readSessionConsumer:(void (^)(id<MVIMReadSession>))consumer __attribute__((swift_name("readSession(consumer:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readShortWithCompletionHandler:(void (^)(MVIMShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSuspendableSessionConsumer:(id<MVIMKotlinSuspendFunction1>)consumer completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readSuspendableSession(consumer:completionHandler:)"))) __attribute__((deprecated("Use read { } instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineLimit:(int32_t)limit completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(limit:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineToOut:(id<MVIMKotlinAppendable>)out limit:(int32_t)limit completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(out:limit:completionHandler:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@property (readonly) MVIMKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForRead __attribute__((swift_name("isClosedForRead")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property MVIMByteOrder *readByteOrder __attribute__((swift_name("readByteOrder"))) __attribute__((unavailable("Setting byte order is no longer supported. Read/write in big endian and use reverseByteOrder() extensions.")));
@property (readonly) int64_t totalBytesRead __attribute__((swift_name("totalBytesRead")));
@end;

__attribute__((swift_name("ByteWriteChannel")))
@protocol MVIMByteWriteChannel
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitFreeSpaceWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitFreeSpace(completionHandler:)")));
- (BOOL)closeCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(MVIMIoBuffer *)src completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(MVIMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeByteB:(int8_t)b completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(b:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDoubleD:(double)d completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(d:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFloatF:(float)f completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(f:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullyMemory:(MVIMMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(memory:startIndex:endIndex:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(MVIMBuffer *)src completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(MVIMIoBuffer *)src completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(MVIMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int32_t)offset length:(int32_t)length completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(void *)src offset:(int64_t)offset length:(int64_t)length completionHandler__:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler__:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeIntI:(int32_t)i completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(i:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeLongL:(int64_t)l completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(l:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writePacketPacket:(MVIMByteReadPacket *)packet completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(packet:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeShortS:(int16_t)s completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(s:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeSuspendSessionVisitor:(id<MVIMKotlinSuspendFunction1>)visitor completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeSuspendSession(visitor:completionHandler:)"))) __attribute__((deprecated("Use write { } instead.")));
@property (readonly) BOOL autoFlush __attribute__((swift_name("autoFlush")));
@property (readonly) int32_t availableForWrite __attribute__((swift_name("availableForWrite")));
@property (readonly) MVIMKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property (readonly) int64_t totalBytesWritten __attribute__((swift_name("totalBytesWritten"))) __attribute__((deprecated("Counter is no longer supported")));
@property MVIMByteOrder *writeByteOrder __attribute__((swift_name("writeByteOrder"))) __attribute__((unavailable("Setting byte order is no longer supported. Read/write in big endian and use reverseByteOrder() extensions.")));
@end;

__attribute__((swift_name("ByteChannel")))
@protocol MVIMByteChannel <MVIMByteReadChannel, MVIMByteWriteChannel>
@required
- (void)attachJobJob:(id<MVIMJob>)job __attribute__((swift_name("attachJob(job:)")));
@end;

__attribute__((swift_name("ReadSession")))
@protocol MVIMReadSession
@required
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (MVIMIoBuffer * _Nullable)requestAtLeast:(int32_t)atLeast __attribute__((swift_name("request(atLeast:)")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@end;

__attribute__((swift_name("SuspendableReadSession")))
@protocol MVIMSuspendableReadSession <MVIMReadSession>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitAtLeast:(int32_t)atLeast completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("await(atLeast:completionHandler:)")));
@end;

__attribute__((swift_name("ByteChannelSequentialBase")))
@interface MVIMByteChannelSequentialBase : MVIMBase <MVIMByteChannel, MVIMByteReadChannel, MVIMByteWriteChannel, MVIMSuspendableReadSession>
- (instancetype)initWithInitial:(MVIMIoBuffer *)initial autoFlush:(BOOL)autoFlush pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(initial:autoFlush:pool:)"))) __attribute__((objc_designated_initializer));
- (void)afterRead __attribute__((swift_name("afterRead()"))) __attribute__((unavailable("Consider providing consumed count of bytes")));
- (void)afterReadCount:(int32_t)count __attribute__((swift_name("afterRead(count:)")));
- (void)afterWrite __attribute__((swift_name("afterWrite()"))) __attribute__((unavailable("Consider providing written count of bytes")));
- (void)afterWriteCount:(int32_t)count __attribute__((swift_name("afterWrite(count:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitAtLeast:(int32_t)atLeast completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("await(atLeast:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitFreeSpaceWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitFreeSpace(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitSuspendAtLeast:(int32_t)atLeast completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitSuspend(atLeast:completionHandler:)")));
- (id<MVIMWriterSuspendSession>)beginWriteSession __attribute__((swift_name("beginWriteSession()")));
- (BOOL)cancelCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (BOOL)closeCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardMax:(int64_t)max completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(max:completionHandler:)")));
- (void)endReadSession __attribute__((swift_name("endReadSession()")));
- (void)endWriteSessionWritten:(int32_t)written __attribute__((swift_name("endWriteSession(written:)")));
- (void)flush __attribute__((swift_name("flush()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)peekToDestination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:completionHandler:)")));
- (void)prepareFlushedBytes __attribute__((swift_name("prepareFlushedBytes()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(MVIMIoBuffer *)dst completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readAvailableDst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(dst:offset:length:completionHandler:)")));
- (int32_t)readAvailableClosed __attribute__((swift_name("readAvailableClosed()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBooleanWithCompletionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBoolean(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readByteWithCompletionHandler:(void (^)(MVIMByte * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readByte(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readDoubleWithCompletionHandler:(void (^)(MVIMDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFloatWithCompletionHandler:(void (^)(MVIMFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(MVIMIoBuffer *)dst n:(int32_t)n completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:n:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readFullyDst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(dst:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readIntWithCompletionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readLongWithCompletionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readPacketSize:(int32_t)size headerSizeHint:(int32_t)headerSizeHint completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(size:headerSizeHint:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readRemainingLimit:(int64_t)limit headerSizeHint:(int32_t)headerSizeHint completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(limit:headerSizeHint:completionHandler:)")));
- (void)readSessionConsumer:(void (^)(id<MVIMReadSession>))consumer __attribute__((swift_name("readSession(consumer:)"))) __attribute__((deprecated("Use read instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readShortWithCompletionHandler:(void (^)(MVIMShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readSuspendableSessionConsumer:(id<MVIMKotlinSuspendFunction1>)consumer completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readSuspendableSession(consumer:completionHandler:)"))) __attribute__((deprecated("Use read instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineLimit:(int32_t)limit completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(limit:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readUTF8LineToOut:(id<MVIMKotlinAppendable>)out limit:(int32_t)limit completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(out:limit:completionHandler:)")));
- (MVIMIoBuffer * _Nullable)requestAtLeast:(int32_t)atLeast __attribute__((swift_name("request(atLeast:)")));
- (id<MVIMSuspendableReadSession>)startReadSession __attribute__((swift_name("startReadSession()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(MVIMIoBuffer *)src completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeAvailableSrc:(MVIMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(src:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeByteB:(int8_t)b completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(b:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeDoubleD:(double)d completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(d:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFloatF:(float)f completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(f:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullyMemory:(MVIMMemory *)memory startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(memory:startIndex:endIndex:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(MVIMBuffer *)src completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(MVIMIoBuffer *)src completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeFullySrc:(MVIMKotlinByteArray *)src offset:(int32_t)offset length:(int32_t)length completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(src:offset:length:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeIntI:(int32_t)i completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(i:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeLongL:(int64_t)l completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(l:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writePacketPacket:(MVIMByteReadPacket *)packet completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(packet:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeShortS:(int16_t)s completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(s:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)writeSuspendSessionVisitor:(id<MVIMKotlinSuspendFunction1>)visitor completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeSuspendSession(visitor:completionHandler:)"))) __attribute__((deprecated("Overrides deprecated member in 'io.ktor.utils.io.ByteChannel'. Use write { } instead.")));
@property (readonly) BOOL autoFlush __attribute__((swift_name("autoFlush")));
@property (readonly) int32_t availableForRead __attribute__((swift_name("availableForRead")));
@property (readonly) int32_t availableForWrite __attribute__((swift_name("availableForWrite")));
@property BOOL closed __attribute__((swift_name("closed")));
@property (readonly) MVIMKotlinThrowable * _Nullable closedCause __attribute__((swift_name("closedCause")));
@property (readonly) BOOL isClosedForRead __attribute__((swift_name("isClosedForRead")));
@property (readonly) BOOL isClosedForWrite __attribute__((swift_name("isClosedForWrite")));
@property MVIMByteOrder *readByteOrder __attribute__((swift_name("readByteOrder"))) __attribute__((unavailable("Setting byte order is no longer supported. Read/write in big endian and use reverseByteOrder() extensions.")));
@property (readonly) MVIMByteReadPacket *readable __attribute__((swift_name("readable")));
@property (readonly) int64_t totalBytesRead __attribute__((swift_name("totalBytesRead")));
@property (readonly) int64_t totalBytesWritten __attribute__((swift_name("totalBytesWritten"))) __attribute__((deprecated("Overrides deprecated member in 'io.ktor.utils.io.ByteChannel'. Counter is no longer supported")));
@property (readonly) MVIMBytePacketBuilder *writable __attribute__((swift_name("writable")));
@property MVIMByteOrder *writeByteOrder __attribute__((swift_name("writeByteOrder"))) __attribute__((unavailable("Setting byte order is no longer supported. Read/write in big endian and use reverseByteOrder() extensions.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadChannelCompanion")))
@interface MVIMByteReadChannelCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) id<MVIMByteReadChannel> Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedWriteChannelException")))
@interface MVIMClosedWriteChannelException : MVIMKotlinCancellationException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("KotlinCoroutineContext")))
@protocol MVIMKotlinCoroutineContext
@required
- (id _Nullable)foldInitial:(id _Nullable)initial operation:(id _Nullable (^)(id _Nullable, id<MVIMKotlinCoroutineContextElement>))operation __attribute__((swift_name("fold(initial:operation:)")));
- (id<MVIMKotlinCoroutineContextElement> _Nullable)getKey_:(id<MVIMKotlinCoroutineContextKey>)key __attribute__((swift_name("get(key_:)")));
- (id<MVIMKotlinCoroutineContext>)minusKeyKey:(id<MVIMKotlinCoroutineContextKey>)key __attribute__((swift_name("minusKey(key:)")));
- (id<MVIMKotlinCoroutineContext>)plusContext:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("plus(context:)")));
@end;

__attribute__((swift_name("KotlinCoroutineContextElement")))
@protocol MVIMKotlinCoroutineContextElement <MVIMKotlinCoroutineContext>
@required
@property (readonly) id<MVIMKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("Job")))
@protocol MVIMJob <MVIMKotlinCoroutineContextElement>
@required
- (id<MVIMChildHandle>)attachChildChild:(id<MVIMChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (MVIMKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (id<MVIMDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<MVIMDisposableHandle>)invokeOnCompletionHandler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (id<MVIMJob>)plusOther:(id<MVIMJob>)other __attribute__((swift_name("plus(other:)"))) __attribute__((unavailable("Operator '+' on two Job objects is meaningless. Job is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The job to the right of `+` just replaces the job the left of `+`.")));
- (BOOL)start __attribute__((swift_name("start()")));
@property (readonly) id<MVIMKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) id<MVIMSelectClause0> onJoin __attribute__((swift_name("onJoin")));
@end;

__attribute__((swift_name("ReaderJob")))
@protocol MVIMReaderJob <MVIMJob>
@required
@property (readonly) id<MVIMByteWriteChannel> channel __attribute__((swift_name("channel")));
@end;

__attribute__((swift_name("ReaderScope")))
@protocol MVIMReaderScope <MVIMCoroutineScope>
@required
@property (readonly) id<MVIMByteReadChannel> channel __attribute__((swift_name("channel")));
@end;

__attribute__((swift_name("WriterJob")))
@protocol MVIMWriterJob <MVIMJob>
@required
@property (readonly) id<MVIMByteReadChannel> channel __attribute__((swift_name("channel")));
@end;

__attribute__((swift_name("WriterScope")))
@protocol MVIMWriterScope <MVIMCoroutineScope>
@required
@property (readonly) id<MVIMByteWriteChannel> channel __attribute__((swift_name("channel")));
@end;

__attribute__((swift_name("WriterSession")))
@protocol MVIMWriterSession
@required
- (void)flush __attribute__((swift_name("flush()")));
- (MVIMIoBuffer * _Nullable)requestMin:(int32_t)min __attribute__((swift_name("request(min:)")));
- (void)writtenN:(int32_t)n __attribute__((swift_name("written(n:)")));
@end;

__attribute__((swift_name("WriterSuspendSession")))
@protocol MVIMWriterSuspendSession <MVIMWriterSession>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)tryAwaitN:(int32_t)n completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("tryAwait(n:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Memory")))
@interface MVIMMemory : MVIMBase
- (instancetype)initWithPointer:(void *)pointer size:(int64_t)size __attribute__((swift_name("init(pointer:size:)"))) __attribute__((objc_designated_initializer));
- (void)doCopyToDestination:(MVIMMemory *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset:)")));
- (void)doCopyToDestination:(MVIMMemory *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset_:)")));
- (int8_t)loadAtIndex:(int32_t)index __attribute__((swift_name("loadAt(index:)")));
- (int8_t)loadAtIndex_:(int64_t)index __attribute__((swift_name("loadAt(index_:)")));
- (MVIMMemory *)sliceOffset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("slice(offset:length:)")));
- (MVIMMemory *)sliceOffset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("slice(offset:length_:)")));
- (void)storeAtIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("storeAt(index:value:)")));
- (void)storeAtIndex:(int64_t)index value_:(int8_t)value __attribute__((swift_name("storeAt(index:value_:)")));
@property (readonly) void *pointer __attribute__((swift_name("pointer")));
@property (readonly) int64_t size __attribute__((swift_name("size")));
@property (readonly) int32_t size32 __attribute__((swift_name("size32")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Memory.Companion")))
@interface MVIMMemoryCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMMemory *Empty __attribute__((swift_name("Empty")));
@end;

__attribute__((swift_name("Input")))
@protocol MVIMInput <MVIMCloseable_>
@required
- (int64_t)discardN_:(int64_t)n __attribute__((swift_name("discard(n_:)")));
- (int64_t)peekToDestination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()")));
@property MVIMByteOrder *byteOrder __attribute__((swift_name("byteOrder"))) __attribute__((unavailable("Not supported anymore. All operations are big endian by default. Use readXXXLittleEndian or readXXX then X.reverseByteOrder() instead.")));
@property (readonly) BOOL endOfInput __attribute__((swift_name("endOfInput")));
@end;

__attribute__((swift_name("AbstractInput")))
@interface MVIMAbstractInput : MVIMBase <MVIMInput>
- (instancetype)initWithHead:(MVIMChunkBuffer *)head remaining:(int64_t)remaining pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("AbstractInput is deprecated and will be merged with Input in 2.0.0")));
- (BOOL)canRead __attribute__((swift_name("canRead()")));
- (void)close __attribute__((swift_name("close()")));
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (int32_t)discardN:(int32_t)n __attribute__((swift_name("discard(n:)")));
- (int64_t)discardN_:(int64_t)n __attribute__((swift_name("discard(n_:)")));
- (void)discardExactN:(int32_t)n __attribute__((swift_name("discardExact(n:)")));
- (MVIMChunkBuffer * _Nullable)ensureNextHeadCurrent:(MVIMChunkBuffer *)current __attribute__((swift_name("ensureNextHead(current:)")));
- (MVIMChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));
- (int32_t)fillDestination:(MVIMMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (void)fixGapAfterReadCurrent:(MVIMChunkBuffer *)current __attribute__((swift_name("fixGapAfterRead(current:)")));
- (BOOL)hasBytesN:(int32_t)n __attribute__((swift_name("hasBytes(n:)")));
- (void)markNoMoreChunksAvailable __attribute__((swift_name("markNoMoreChunksAvailable()")));
- (int64_t)peekToDestination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:)")));
- (MVIMChunkBuffer * _Nullable)prepareReadHeadMinSize:(int32_t)minSize __attribute__((swift_name("prepareReadHead(minSize:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (NSString *)readTextMin:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(min:max:)")));
- (int32_t)readTextOut:(id<MVIMKotlinAppendable>)out min:(int32_t)min max:(int32_t)max __attribute__((swift_name("readText(out:min:max:)")));
- (NSString *)readTextExactExactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(exactCharacters:)")));
- (void)readTextExactOut:(id<MVIMKotlinAppendable>)out exactCharacters:(int32_t)exactCharacters __attribute__((swift_name("readTextExact(out:exactCharacters:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()")));
- (void)updateHeadRemainingRemaining:(int32_t)remaining __attribute__((swift_name("updateHeadRemaining(remaining:)"))) __attribute__((unavailable("Not supported anymore.")));
@property MVIMByteOrder *byteOrder __attribute__((swift_name("byteOrder"))) __attribute__((unavailable("Not supported anymore. All operations are big endian by default.")));
@property (readonly) BOOL endOfInput __attribute__((swift_name("endOfInput")));
@property (readonly) id<MVIMObjectPool> pool __attribute__((swift_name("pool")));
@property (readonly) int64_t remaining __attribute__((swift_name("remaining")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbstractInput.Companion")))
@interface MVIMAbstractInputCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("KotlinAppendable")))
@protocol MVIMKotlinAppendable
@required
- (id<MVIMKotlinAppendable>)appendValue:(unichar)value __attribute__((swift_name("append(value:)")));
- (id<MVIMKotlinAppendable>)appendValue_:(id _Nullable)value __attribute__((swift_name("append(value_:)")));
- (id<MVIMKotlinAppendable>)appendValue:(id _Nullable)value startIndex:(int32_t)startIndex endIndex:(int32_t)endIndex __attribute__((swift_name("append(value:startIndex:endIndex:)")));
@end;

__attribute__((swift_name("Output")))
@protocol MVIMOutput <MVIMKotlinAppendable, MVIMCloseable_>
@required
- (id<MVIMKotlinAppendable>)appendCsq:(MVIMKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(csq:start:end:)")));
- (void)flush __attribute__((swift_name("flush()")));
- (void)writeByteV:(int8_t)v __attribute__((swift_name("writeByte(v:)")));
@property MVIMByteOrder *byteOrder __attribute__((swift_name("byteOrder"))) __attribute__((deprecated("Write with writeXXXLittleEndian or do X.reverseByteOrder() and then writeXXX instead.")));
@end;

__attribute__((swift_name("AbstractOutput")))
@interface MVIMAbstractOutput : MVIMBase <MVIMKotlinAppendable, MVIMOutput>
- (instancetype)initWithPool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("AbstractOutput is deprecated and will be merged with Input in 2.0.0")));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("AbstractOutput is deprecated and will be merged with Input in 2.0.0")));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)afterHeadWrite __attribute__((swift_name("afterHeadWrite()")));
- (MVIMAbstractOutput *)appendValue:(unichar)c __attribute__((swift_name("append(value:)")));
- (id<MVIMKotlinAppendable>)appendCsq:(MVIMKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(csq:start:end:)")));
- (MVIMAbstractOutput *)appendValue_:(id _Nullable)csq __attribute__((swift_name("append(value_:)")));
- (MVIMAbstractOutput *)appendValue:(id _Nullable)csq startIndex:(int32_t)start endIndex:(int32_t)end __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (void)close __attribute__((swift_name("close()")));
- (void)closeDestination __attribute__((swift_name("closeDestination()")));
- (void)flush __attribute__((swift_name("flush()")));
- (void)flushSource:(MVIMMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("flush(source:offset:length:)")));
- (MVIMChunkBuffer *)prepareWriteHeadN:(int32_t)n __attribute__((swift_name("prepareWriteHead(n:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (void)writeByteV:(int8_t)v __attribute__((swift_name("writeByte(v:)")));
- (void)writePacketP:(MVIMByteReadPacket *)p __attribute__((swift_name("writePacket(p:)")));
- (void)writePacketP:(MVIMByteReadPacket *)p n:(int32_t)n __attribute__((swift_name("writePacket(p:n:)")));
- (void)writePacketP:(MVIMByteReadPacket *)p n_:(int64_t)n __attribute__((swift_name("writePacket(p:n_:)")));
- (void)writeStringUtf8Cs:(id)cs __attribute__((swift_name("writeStringUtf8(cs:)"))) __attribute__((deprecated("Use writeText instead")));
- (void)writeStringUtf8S:(NSString *)s __attribute__((swift_name("writeStringUtf8(s:)"))) __attribute__((deprecated("Use writeText instead")));
@property int32_t _size __attribute__((swift_name("_size")));
@property MVIMByteOrder *byteOrder __attribute__((swift_name("byteOrder"))) __attribute__((unavailable("This is no longer supported. All operations are big endian by default. Use readXXXLittleEndian to read primitives in little endian")));
@property MVIMChunkBuffer *currentTail __attribute__((swift_name("currentTail"))) __attribute__((unavailable("Will be removed. Override flush(buffer) properly.")));
@property (readonly) id<MVIMObjectPool> pool __attribute__((swift_name("pool")));
@end;

__attribute__((swift_name("Buffer")))
@interface MVIMBuffer : MVIMBase
- (instancetype)initWithMemory:(MVIMMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer));
- (void)commitWrittenCount:(int32_t)count __attribute__((swift_name("commitWritten(count:)")));
- (int32_t)discardCount:(int32_t)count __attribute__((swift_name("discard(count:)"))) __attribute__((unavailable("Use discardExact instead.")));
- (int64_t)discardCount_:(int64_t)count __attribute__((swift_name("discard(count_:)"))) __attribute__((unavailable("Use discardExact instead.")));
- (void)discardExactCount:(int32_t)count __attribute__((swift_name("discardExact(count:)")));
- (MVIMBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)duplicateToCopy:(MVIMBuffer *)copy __attribute__((swift_name("duplicateTo(copy:)")));
- (int8_t)readByte __attribute__((swift_name("readByte()")));
- (void)reserveEndGapEndGap:(int32_t)endGap __attribute__((swift_name("reserveEndGap(endGap:)")));
- (void)reserveStartGapStartGap:(int32_t)startGap __attribute__((swift_name("reserveStartGap(startGap:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (void)resetForRead __attribute__((swift_name("resetForRead()")));
- (void)resetForWrite __attribute__((swift_name("resetForWrite()")));
- (void)resetForWriteLimit:(int32_t)limit __attribute__((swift_name("resetForWrite(limit:)")));
- (void)rewindCount:(int32_t)count __attribute__((swift_name("rewind(count:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int32_t)tryPeekByte __attribute__((swift_name("tryPeekByte()")));
- (int32_t)tryReadByte __attribute__((swift_name("tryReadByte()")));
- (void)writeByteValue:(int8_t)value __attribute__((swift_name("writeByte(value:)")));
@property id _Nullable attachment __attribute__((swift_name("attachment"))) __attribute__((deprecated("Will be removed. Inherit Buffer and add required fields instead.")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) int32_t endGap __attribute__((swift_name("endGap")));
@property (readonly) int32_t limit __attribute__((swift_name("limit")));
@property (readonly) MVIMMemory *memory __attribute__((swift_name("memory")));
@property (readonly) int32_t readPosition __attribute__((swift_name("readPosition")));
@property (readonly) int32_t readRemaining __attribute__((swift_name("readRemaining")));
@property (readonly) int32_t startGap __attribute__((swift_name("startGap")));
@property (readonly) int32_t writePosition __attribute__((swift_name("writePosition")));
@property (readonly) int32_t writeRemaining __attribute__((swift_name("writeRemaining")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Buffer.Companion")))
@interface MVIMBufferCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) int32_t ReservedSize __attribute__((swift_name("ReservedSize")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferLimitExceededException")))
@interface MVIMBufferLimitExceededException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrder")))
@interface MVIMByteOrder : MVIMKotlinEnum<MVIMByteOrder *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMByteOrder *bigEndian __attribute__((swift_name("bigEndian")));
@property (class, readonly) MVIMByteOrder *littleEndian __attribute__((swift_name("littleEndian")));
+ (MVIMKotlinArray<MVIMByteOrder *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrder.Companion")))
@interface MVIMByteOrderCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMByteOrder *)nativeOrder __attribute__((swift_name("nativeOrder()")));
@end;

__attribute__((swift_name("BytePacketBuilderBase")))
@interface MVIMBytePacketBuilderBase : MVIMAbstractOutput
- (instancetype)initWithPool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@end;

__attribute__((swift_name("BytePacketBuilderPlatformBase")))
@interface MVIMBytePacketBuilderPlatformBase : MVIMBytePacketBuilderBase
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BytePacketBuilder")))
@interface MVIMBytePacketBuilder : MVIMBytePacketBuilderPlatformBase
- (instancetype)initWithHeaderSizeHint:(int32_t)headerSizeHint pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(headerSizeHint:pool:)"))) __attribute__((objc_designated_initializer));
- (MVIMBytePacketBuilder *)appendValue:(unichar)c __attribute__((swift_name("append(value:)")));
- (MVIMBytePacketBuilder *)appendValue_:(id _Nullable)csq __attribute__((swift_name("append(value_:)")));
- (MVIMBytePacketBuilder *)appendValue:(id _Nullable)csq startIndex:(int32_t)start endIndex:(int32_t)end __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (MVIMByteReadPacket *)build __attribute__((swift_name("build()")));
- (void)closeDestination __attribute__((swift_name("closeDestination()")));
- (void)flushSource:(MVIMMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("flush(source:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isNotEmpty __attribute__((swift_name("isNotEmpty")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("ByteReadPacketBase")))
@interface MVIMByteReadPacketBase : MVIMAbstractInput
- (instancetype)initWithHead:(MVIMChunkBuffer *)head remaining:(int64_t)remaining pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Will be removed in the future releases. Use Input or AbstractInput instead.")));
@end;

__attribute__((swift_name("ByteReadPacketPlatformBase")))
@interface MVIMByteReadPacketPlatformBase : MVIMByteReadPacketBase
- (instancetype)initWithHead:(MVIMChunkBuffer *)head remaining:(int64_t)remaining pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("Will be removed in future releases.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacket")))
@interface MVIMByteReadPacket : MVIMByteReadPacketPlatformBase <MVIMInput>
- (instancetype)initWithHead:(MVIMChunkBuffer *)head pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(head:pool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithHead:(MVIMChunkBuffer *)head remaining:(int64_t)remaining pool:(id<MVIMObjectPool>)pool __attribute__((swift_name("init(head:remaining:pool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)closeSource __attribute__((swift_name("closeSource()")));
- (MVIMByteReadPacket *)doCopy __attribute__((swift_name("doCopy()")));
- (MVIMChunkBuffer * _Nullable)fill __attribute__((swift_name("fill()")));
- (int32_t)fillDestination:(MVIMMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("fill(destination:offset:length:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacket.Companion")))
@interface MVIMByteReadPacketCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMByteReadPacket *Empty __attribute__((swift_name("Empty")));
@property (readonly) int32_t ReservedSize __attribute__((swift_name("ReservedSize")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacketBase.Companion")))
@interface MVIMByteReadPacketBaseCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMByteReadPacket *Empty __attribute__((swift_name("Empty"))) __attribute__((unavailable("Use ByteReadPacket.Empty instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InsufficientSpaceException")))
@interface MVIMInsufficientSpaceException : MVIMKotlinException
- (instancetype)initWithSize:(int32_t)size availableSpace:(int32_t)availableSpace __attribute__((swift_name("init(size:availableSpace:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithName:(NSString *)name size:(int32_t)size availableSpace:(int32_t)availableSpace __attribute__((swift_name("init(name:size:availableSpace:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithSize:(int64_t)size availableSpace_:(int64_t)availableSpace __attribute__((swift_name("init(size:availableSpace_:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("ChunkBuffer")))
@interface MVIMChunkBuffer : MVIMBuffer
- (instancetype)initWithMemory:(MVIMMemory *)memory origin:(MVIMChunkBuffer * _Nullable)origin parentPool:(id<MVIMObjectPool> _Nullable)parentPool __attribute__((swift_name("init(memory:origin:parentPool:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMemory:(MVIMMemory *)memory __attribute__((swift_name("init(memory:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (MVIMChunkBuffer * _Nullable)cleanNext __attribute__((swift_name("cleanNext()")));
- (MVIMChunkBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)releasePool:(id<MVIMObjectPool>)pool __attribute__((swift_name("release(pool:)")));
- (void)reset __attribute__((swift_name("reset()")));
@property (getter=next_) MVIMChunkBuffer * _Nullable next __attribute__((swift_name("next")));
@property (readonly) MVIMChunkBuffer * _Nullable origin __attribute__((swift_name("origin")));
@property (readonly) int32_t referenceCount __attribute__((swift_name("referenceCount")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IoBuffer")))
@interface MVIMIoBuffer : MVIMChunkBuffer <MVIMInput, MVIMOutput>
- (instancetype)initWithMemory:(MVIMMemory *)memory origin:(MVIMChunkBuffer * _Nullable)origin __attribute__((swift_name("init(memory:origin:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Use Buffer instead.")));
- (instancetype)initWithContent:(void *)content contentCapacity:(int32_t)contentCapacity __attribute__((swift_name("init(content:contentCapacity:)"))) __attribute__((objc_designated_initializer)) __attribute__((deprecated("Use Buffer instead.")));
- (instancetype)initWithMemory:(MVIMMemory *)memory origin:(MVIMChunkBuffer * _Nullable)origin parentPool:(id<MVIMObjectPool> _Nullable)parentPool __attribute__((swift_name("init(memory:origin:parentPool:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (id<MVIMKotlinAppendable>)appendValue:(unichar)c __attribute__((swift_name("append(value:)")));
- (id<MVIMKotlinAppendable>)appendCsq:(MVIMKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(csq:start:end:)")));
- (id<MVIMKotlinAppendable>)appendValue_:(id _Nullable)csq __attribute__((swift_name("append(value_:)")));
- (id<MVIMKotlinAppendable>)appendValue:(id _Nullable)csq startIndex:(int32_t)start endIndex:(int32_t)end __attribute__((swift_name("append(value:startIndex:endIndex:)")));
- (int32_t)appendCharsCsq:(MVIMKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("appendChars(csq:start:end:)")));
- (int32_t)appendCharsCsq:(id)csq start:(int32_t)start end_:(int32_t)end __attribute__((swift_name("appendChars(csq:start:end_:)")));
- (void)close __attribute__((swift_name("close()")));
- (MVIMIoBuffer *)duplicate __attribute__((swift_name("duplicate()")));
- (void)flush __attribute__((swift_name("flush()")));
- (MVIMIoBuffer *)makeView __attribute__((swift_name("makeView()")));
- (int64_t)peekToDestination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset offset:(int64_t)offset min:(int64_t)min max:(int64_t)max __attribute__((swift_name("peekTo(destination:destinationOffset:offset:min:max:)")));
- (int32_t)readDirectBlock:(MVIMInt *(^)(id))block __attribute__((swift_name("readDirect(block:)")));
- (void)releasePool_:(id<MVIMObjectPool>)pool __attribute__((swift_name("release(pool_:)")));
- (NSString *)description __attribute__((swift_name("description()")));
- (int32_t)tryPeek __attribute__((swift_name("tryPeek()")));
- (int32_t)writeDirectBlock:(MVIMInt *(^)(id))block __attribute__((swift_name("writeDirect(block:)")));
@property MVIMByteOrder *byteOrder __attribute__((swift_name("byteOrder"))) __attribute__((unavailable("Not supported anymore. All operations are big endian by default.")));
@property (readonly) BOOL endOfInput __attribute__((swift_name("endOfInput")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IoBuffer.Companion")))
@interface MVIMIoBufferCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMIoBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) id<MVIMObjectPool> EmptyPool __attribute__((swift_name("EmptyPool")));
@property (readonly) id<MVIMObjectPool> NoPool __attribute__((swift_name("NoPool")));
@property (readonly) id<MVIMObjectPool> Pool __attribute__((swift_name("Pool")));
@property (readonly) int32_t ReservedSize __attribute__((swift_name("ReservedSize")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChunkBuffer.Companion")))
@interface MVIMChunkBufferCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) MVIMChunkBuffer *Empty __attribute__((swift_name("Empty")));
@property (readonly) id<MVIMObjectPool> EmptyPool __attribute__((swift_name("EmptyPool")));
@property (readonly) id<MVIMObjectPool> Pool __attribute__((swift_name("Pool")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MalformedUTF8InputException")))
@interface MVIMMalformedUTF8InputException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("ObjectPool")))
@protocol MVIMObjectPool <MVIMCloseable_>
@required
- (id)borrow __attribute__((swift_name("borrow()")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (void)recycleInstance:(id)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end;

__attribute__((swift_name("DefaultPool")))
@interface MVIMDefaultPool<T> : MVIMBase <MVIMObjectPool>
- (instancetype)initWithCapacity:(int32_t)capacity __attribute__((swift_name("init(capacity:)"))) __attribute__((objc_designated_initializer));
- (T)borrow __attribute__((swift_name("borrow()")));
- (T)clearInstanceInstance:(T)instance __attribute__((swift_name("clearInstance(instance:)")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (void)disposeInstanceInstance:(T)instance __attribute__((swift_name("disposeInstance(instance:)")));
- (T)produceInstance __attribute__((swift_name("produceInstance()")));
- (void)recycleInstance:(T)instance __attribute__((swift_name("recycle(instance:)")));
- (void)validateInstanceInstance:(T)instance __attribute__((swift_name("validateInstance(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) MVIMSynchronizedObject *lock __attribute__((swift_name("lock")));
@end;

__attribute__((swift_name("NoPoolImpl")))
@interface MVIMNoPoolImpl<T> : MVIMBase <MVIMObjectPool>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (void)recycleInstance:(T)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end;

__attribute__((swift_name("SingleInstancePool")))
@interface MVIMSingleInstancePool<T> : MVIMBase <MVIMObjectPool>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (T)borrow __attribute__((swift_name("borrow()")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (void)disposeInstanceInstance:(T)instance __attribute__((swift_name("disposeInstance(instance:)")));
- (T)produceInstance __attribute__((swift_name("produceInstance()")));
- (void)recycleInstance:(T)instance __attribute__((swift_name("recycle(instance:)")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@end;

__attribute__((swift_name("Charset")))
@interface MVIMCharset : MVIMBase
- (instancetype)initWith_name:(NSString *)_name __attribute__((swift_name("init(_name:)"))) __attribute__((objc_designated_initializer));
- (MVIMCharsetDecoder *)doNewDecoder __attribute__((swift_name("doNewDecoder()")));
- (MVIMCharsetEncoder *)doNewEncoder __attribute__((swift_name("doNewEncoder()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Charset.Companion")))
@interface MVIMCharsetCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMCharset *)forNameName:(NSString *)name __attribute__((swift_name("forName(name:)")));
@end;

__attribute__((swift_name("CharsetDecoder")))
@interface MVIMCharsetDecoder : MVIMBase
- (instancetype)initWith_charset:(MVIMCharset *)_charset __attribute__((swift_name("init(_charset:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("CharsetEncoder")))
@interface MVIMCharsetEncoder : MVIMBase
- (instancetype)initWith_charset:(MVIMCharset *)_charset __attribute__((swift_name("init(_charset:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Charsets")))
@interface MVIMCharsets : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)charsets __attribute__((swift_name("init()")));
@property (readonly) MVIMCharset *ISO_8859_1 __attribute__((swift_name("ISO_8859_1")));
@property (readonly) MVIMCharset *UTF_8 __attribute__((swift_name("UTF_8")));
@end;

__attribute__((swift_name("MalformedInputException")))
@interface MVIMMalformedInputException : MVIMKotlinThrowable
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TooLongLineException")))
@interface MVIMTooLongLineException : MVIMMalformedInputException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("EOFException")))
@interface MVIMEOFException : MVIMIOException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("PosixException")))
@interface MVIMPosixException : MVIMKotlinException
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) int32_t errno __attribute__((swift_name("errno")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.AddressAlreadyInUseException")))
@interface MVIMPosixExceptionAddressAlreadyInUseException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.BadFileDescriptorException")))
@interface MVIMPosixExceptionBadFileDescriptorException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.BadMessageException")))
@interface MVIMPosixExceptionBadMessageException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.Companion")))
@interface MVIMPosixExceptionCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMPosixException *)forErrnoErrno:(int32_t)errno posixFunctionName:(NSString * _Nullable)posixFunctionName __attribute__((swift_name("forErrno(errno:posixFunctionName:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.ConnectionAbortedException")))
@interface MVIMPosixExceptionConnectionAbortedException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.ConnectionRefusedException")))
@interface MVIMPosixExceptionConnectionRefusedException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.ConnectionResetException")))
@interface MVIMPosixExceptionConnectionResetException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.InterruptedException")))
@interface MVIMPosixExceptionInterruptedException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.InvalidArgumentException")))
@interface MVIMPosixExceptionInvalidArgumentException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NoMemoryException")))
@interface MVIMPosixExceptionNoMemoryException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NoSuchFileException")))
@interface MVIMPosixExceptionNoSuchFileException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NotConnectedException")))
@interface MVIMPosixExceptionNotConnectedException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.NotSocketException")))
@interface MVIMPosixExceptionNotSocketException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.OverflowException")))
@interface MVIMPosixExceptionOverflowException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.PosixErrnoException")))
@interface MVIMPosixExceptionPosixErrnoException : MVIMPosixException
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.TimeoutIOException")))
@interface MVIMPosixExceptionTimeoutIOException : MVIMPosixException
- (instancetype)initWithMessage:(NSString *)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixException.TryAgainException")))
@interface MVIMPosixExceptionTryAgainException : MVIMPosixException
- (instancetype)initWithErrno:(int32_t)errno message:(NSString *)message __attribute__((swift_name("init(errno:message:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("ChildJob")))
@protocol MVIMChildJob <MVIMJob>
@required
- (void)parentCancelledParentJob:(id<MVIMParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
@end;

__attribute__((swift_name("ParentJob")))
@protocol MVIMParentJob <MVIMJob>
@required
- (MVIMKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
@end;

__attribute__((swift_name("SelectClause0")))
@protocol MVIMSelectClause0
@required
- (void)registerSelectClause0Select:(id<MVIMSelectInstance>)select block:(id<MVIMKotlinSuspendFunction0>)block __attribute__((swift_name("registerSelectClause0(select:block:)")));
@end;

__attribute__((swift_name("JobSupport")))
@interface MVIMJobSupport : MVIMBase <MVIMJob, MVIMChildJob, MVIMParentJob, MVIMSelectClause0>
- (instancetype)initWithActive:(BOOL)active __attribute__((swift_name("init(active:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable("This is internal API and may be removed in the future releases")));
- (void)afterCompletionState:(id _Nullable)state __attribute__((swift_name("afterCompletion(state:)")));
- (id<MVIMChildHandle>)attachChildChild:(id<MVIMChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (BOOL)cancelCoroutineCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancelCoroutine(cause:)")));
- (void)cancelInternalCause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("cancelInternal(cause:)")));
- (NSString *)cancellationExceptionMessage __attribute__((swift_name("cancellationExceptionMessage()")));
- (BOOL)childCancelledCause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
- (MVIMKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (MVIMKotlinCancellationException *)getChildJobCancellationCause __attribute__((swift_name("getChildJobCancellationCause()")));
- (MVIMKotlinThrowable * _Nullable)getCompletionExceptionOrNull __attribute__((swift_name("getCompletionExceptionOrNull()")));
- (BOOL)handleJobExceptionException:(MVIMKotlinThrowable *)exception __attribute__((swift_name("handleJobException(exception:)")));
- (id<MVIMDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<MVIMDisposableHandle>)invokeOnCompletionHandler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (void)onCancellingCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("onCancelling(cause:)")));
- (void)onCompletionInternalState:(id _Nullable)state __attribute__((swift_name("onCompletionInternal(state:)")));
- (void)onStart __attribute__((swift_name("onStart()")));
- (void)parentCancelledParentJob:(id<MVIMParentJob>)parentJob __attribute__((swift_name("parentCancelled(parentJob:)")));
- (void)registerSelectClause0Select:(id<MVIMSelectInstance>)select block:(id<MVIMKotlinSuspendFunction0>)block __attribute__((swift_name("registerSelectClause0(select:block:)")));
- (BOOL)start __attribute__((swift_name("start()")));
- (NSString *)toDebugString __attribute__((swift_name("toDebugString()")));
- (NSString *)description __attribute__((swift_name("description()")));
- (MVIMKotlinCancellationException *)toCancellationException:(MVIMKotlinThrowable *)receiver message:(NSString * _Nullable)message __attribute__((swift_name("toCancellationException(_:message:)")));
@property (readonly) id<MVIMKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) MVIMKotlinThrowable * _Nullable completionCause __attribute__((swift_name("completionCause")));
@property (readonly) BOOL completionCauseHandled __attribute__((swift_name("completionCauseHandled")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) BOOL isCompletedExceptionally __attribute__((swift_name("isCompletedExceptionally")));
@property (readonly) BOOL isScopedCoroutine __attribute__((swift_name("isScopedCoroutine")));
@property (readonly) id<MVIMKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@property (readonly) id<MVIMSelectClause0> onJoin __attribute__((swift_name("onJoin")));
@end;

__attribute__((swift_name("KotlinContinuation")))
@protocol MVIMKotlinContinuation
@required
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
@property (readonly) id<MVIMKotlinCoroutineContext> context __attribute__((swift_name("context")));
@end;

__attribute__((swift_name("AbstractCoroutine")))
@interface MVIMAbstractCoroutine<__contravariant T> : MVIMJobSupport <MVIMJob, MVIMKotlinContinuation, MVIMCoroutineScope>
- (instancetype)initWithParentContext:(id<MVIMKotlinCoroutineContext>)parentContext initParentJob:(BOOL)initParentJob active:(BOOL)active __attribute__((swift_name("init(parentContext:initParentJob:active:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithActive:(BOOL)active __attribute__((swift_name("init(active:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)afterResumeState:(id _Nullable)state __attribute__((swift_name("afterResume(state:)")));
- (NSString *)cancellationExceptionMessage __attribute__((swift_name("cancellationExceptionMessage()")));
- (void)onCancelledCause:(MVIMKotlinThrowable *)cause handled:(BOOL)handled __attribute__((swift_name("onCancelled(cause:handled:)")));
- (void)onCompletedValue:(T _Nullable)value __attribute__((swift_name("onCompleted(value:)")));
- (void)onCompletionInternalState:(id _Nullable)state __attribute__((swift_name("onCompletionInternal(state:)")));
- (void)resumeWithResult:(id _Nullable)result __attribute__((swift_name("resumeWith(result:)")));
- (void)startStart:(MVIMCoroutineStart *)start receiver:(id _Nullable)receiver block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("start(start:receiver:block:)")));
@property (readonly) id<MVIMKotlinCoroutineContext> context __attribute__((swift_name("context")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@end;

__attribute__((swift_name("CancellableContinuation")))
@protocol MVIMCancellableContinuation <MVIMKotlinContinuation>
@required
- (BOOL)cancelCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(cause:)")));
- (void)completeResumeToken:(id)token __attribute__((swift_name("completeResume(token:)")));
- (void)doInitCancellability __attribute__((swift_name("doInitCancellability()")));
- (void)invokeOnCancellationHandler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCancellation(handler:)")));
- (void)resumeValue:(id _Nullable)value onCancellation:(void (^ _Nullable)(MVIMKotlinThrowable *))onCancellation __attribute__((swift_name("resume(value:onCancellation:)")));
- (id _Nullable)tryResumeValue:(id _Nullable)value idempotent:(id _Nullable)idempotent __attribute__((swift_name("tryResume(value:idempotent:)")));
- (id _Nullable)tryResumeValue:(id _Nullable)value idempotent:(id _Nullable)idempotent onCancellation:(void (^ _Nullable)(MVIMKotlinThrowable *))onCancellation __attribute__((swift_name("tryResume(value:idempotent:onCancellation:)")));
- (id _Nullable)tryResumeWithExceptionException:(MVIMKotlinThrowable *)exception __attribute__((swift_name("tryResumeWithException(exception:)")));
- (void)resumeUndispatched:(MVIMCoroutineDispatcher *)receiver value:(id _Nullable)value __attribute__((swift_name("resumeUndispatched(_:value:)")));
- (void)resumeUndispatchedWithException:(MVIMCoroutineDispatcher *)receiver exception:(MVIMKotlinThrowable *)exception __attribute__((swift_name("resumeUndispatchedWithException(_:exception:)")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@end;

__attribute__((swift_name("DisposableHandle")))
@protocol MVIMDisposableHandle
@required
- (void)dispose __attribute__((swift_name("dispose()")));
@end;

__attribute__((swift_name("ChildHandle")))
@protocol MVIMChildHandle <MVIMDisposableHandle>
@required
- (BOOL)childCancelledCause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
@property (readonly) id<MVIMJob> _Nullable parent __attribute__((swift_name("parent")));
@end;

__attribute__((swift_name("Deferred")))
@protocol MVIMDeferred <MVIMJob>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)awaitWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("await(completionHandler:)")));
- (id _Nullable)getCompleted __attribute__((swift_name("getCompleted()")));
- (MVIMKotlinThrowable * _Nullable)getCompletionExceptionOrNull __attribute__((swift_name("getCompletionExceptionOrNull()")));
@property (readonly) id<MVIMSelectClause1> onAwait __attribute__((swift_name("onAwait")));
@end;

__attribute__((swift_name("CompletableDeferred")))
@protocol MVIMCompletableDeferred <MVIMDeferred>
@required
- (BOOL)completeValue:(id _Nullable)value __attribute__((swift_name("complete(value:)")));
- (BOOL)completeExceptionallyException:(MVIMKotlinThrowable *)exception __attribute__((swift_name("completeExceptionally(exception:)")));
@end;

__attribute__((swift_name("CompletableJob")))
@protocol MVIMCompletableJob <MVIMJob>
@required
- (BOOL)complete __attribute__((swift_name("complete()")));
- (BOOL)completeExceptionallyException:(MVIMKotlinThrowable *)exception __attribute__((swift_name("completeExceptionally(exception:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompletionHandlerException")))
@interface MVIMCompletionHandlerException : MVIMKotlinRuntimeException
- (instancetype)initWithMessage:(NSString *)message cause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((swift_name("CopyableThrowable")))
@protocol MVIMCopyableThrowable
@required
- (MVIMKotlinThrowable * _Nullable)createCopy __attribute__((swift_name("createCopy()")));
@end;

__attribute__((swift_name("KotlinAbstractCoroutineContextElement")))
@interface MVIMKotlinAbstractCoroutineContextElement : MVIMBase <MVIMKotlinCoroutineContextElement>
- (instancetype)initWithKey:(id<MVIMKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer));
@property (readonly) id<MVIMKotlinCoroutineContextKey> key __attribute__((swift_name("key")));
@end;

__attribute__((swift_name("KotlinContinuationInterceptor")))
@protocol MVIMKotlinContinuationInterceptor <MVIMKotlinCoroutineContextElement>
@required
- (id<MVIMKotlinContinuation>)interceptContinuationContinuation:(id<MVIMKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (void)releaseInterceptedContinuationContinuation:(id<MVIMKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
@end;

__attribute__((swift_name("CoroutineDispatcher")))
@interface MVIMCoroutineDispatcher : MVIMKotlinAbstractCoroutineContextElement <MVIMKotlinContinuationInterceptor>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithKey:(id<MVIMKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (void)dispatchContext:(id<MVIMKotlinCoroutineContext>)context block:(id<MVIMRunnable>)block __attribute__((swift_name("dispatch(context:block:)")));
- (void)dispatchYieldContext:(id<MVIMKotlinCoroutineContext>)context block:(id<MVIMRunnable>)block __attribute__((swift_name("dispatchYield(context:block:)")));
- (id<MVIMKotlinContinuation>)interceptContinuationContinuation:(id<MVIMKotlinContinuation>)continuation __attribute__((swift_name("interceptContinuation(continuation:)")));
- (BOOL)isDispatchNeededContext:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("isDispatchNeeded(context:)")));
- (MVIMCoroutineDispatcher *)plusOther_:(MVIMCoroutineDispatcher *)other __attribute__((swift_name("plus(other_:)"))) __attribute__((unavailable("Operator '+' on two CoroutineDispatcher objects is meaningless. CoroutineDispatcher is a coroutine context element and `+` is a set-sum operator for coroutine contexts. The dispatcher to the right of `+` just replaces the dispatcher to the left.")));
- (void)releaseInterceptedContinuationContinuation:(id<MVIMKotlinContinuation>)continuation __attribute__((swift_name("releaseInterceptedContinuation(continuation:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("KotlinCoroutineContextKey")))
@protocol MVIMKotlinCoroutineContextKey
@required
@end;

__attribute__((swift_name("KotlinAbstractCoroutineContextKey")))
@interface MVIMKotlinAbstractCoroutineContextKey<B, E> : MVIMBase <MVIMKotlinCoroutineContextKey>
- (instancetype)initWithBaseKey:(id<MVIMKotlinCoroutineContextKey>)baseKey safeCast:(E _Nullable (^)(id<MVIMKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineDispatcher.Key")))
@interface MVIMCoroutineDispatcherKey : MVIMKotlinAbstractCoroutineContextKey<id<MVIMKotlinContinuationInterceptor>, MVIMCoroutineDispatcher *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithBaseKey:(id<MVIMKotlinCoroutineContextKey>)baseKey safeCast:(id<MVIMKotlinCoroutineContextElement> _Nullable (^)(id<MVIMKotlinCoroutineContextElement>))safeCast __attribute__((swift_name("init(baseKey:safeCast:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("CoroutineExceptionHandler")))
@protocol MVIMCoroutineExceptionHandler <MVIMKotlinCoroutineContextElement>
@required
- (void)handleExceptionContext:(id<MVIMKotlinCoroutineContext>)context exception:(MVIMKotlinThrowable *)exception __attribute__((swift_name("handleException(context:exception:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExceptionHandlerKey")))
@interface MVIMCoroutineExceptionHandlerKey : MVIMBase <MVIMKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineName")))
@interface MVIMCoroutineName : MVIMKotlinAbstractCoroutineContextElement
- (instancetype)initWithName:(NSString *)name __attribute__((swift_name("init(name:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithKey:(id<MVIMKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (MVIMCoroutineName *)doCopyName:(NSString *)name __attribute__((swift_name("doCopy(name:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineName.Key")))
@interface MVIMCoroutineNameKey : MVIMBase <MVIMKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineStart")))
@interface MVIMCoroutineStart : MVIMKotlinEnum<MVIMCoroutineStart *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMCoroutineStart *default_ __attribute__((swift_name("default_")));
@property (class, readonly) MVIMCoroutineStart *lazy __attribute__((swift_name("lazy")));
@property (class, readonly) MVIMCoroutineStart *atomic __attribute__((swift_name("atomic")));
@property (class, readonly) MVIMCoroutineStart *undispatched __attribute__((swift_name("undispatched")));
+ (MVIMKotlinArray<MVIMCoroutineStart *> *)values __attribute__((swift_name("values()")));
@property (readonly) BOOL isLazy __attribute__((swift_name("isLazy")));
@end;

__attribute__((swift_name("Delay")))
@protocol MVIMDelay
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)delayTime:(int64_t)time completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delay(time:completionHandler:)")));
- (id<MVIMDisposableHandle>)invokeOnTimeoutTimeMillis:(int64_t)timeMillis block:(id<MVIMRunnable>)block context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("invokeOnTimeout(timeMillis:block:context:)")));
- (void)scheduleResumeAfterDelayTimeMillis:(int64_t)timeMillis continuation:(id<MVIMCancellableContinuation>)continuation __attribute__((swift_name("scheduleResumeAfterDelay(timeMillis:continuation:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Dispatchers")))
@interface MVIMDispatchers : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)dispatchers __attribute__((swift_name("init()")));
@property (readonly) MVIMCoroutineDispatcher *Default __attribute__((swift_name("Default")));
@property (readonly) MVIMMainCoroutineDispatcher *Main __attribute__((swift_name("Main")));
@property (readonly) MVIMCoroutineDispatcher *Unconfined __attribute__((swift_name("Unconfined")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GlobalScope")))
@interface MVIMGlobalScope : MVIMBase <MVIMCoroutineScope>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)globalScope __attribute__((swift_name("init()")));
@property (readonly) id<MVIMKotlinCoroutineContext> coroutineContext __attribute__((swift_name("coroutineContext")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JobKey")))
@interface MVIMJobKey : MVIMBase <MVIMKotlinCoroutineContextKey>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)key __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("MainCoroutineDispatcher")))
@interface MVIMMainCoroutineDispatcher : MVIMCoroutineDispatcher
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)description __attribute__((swift_name("description()")));
- (NSString * _Nullable)toStringInternalImpl __attribute__((swift_name("toStringInternalImpl()")));
@property (readonly) MVIMMainCoroutineDispatcher *immediate __attribute__((swift_name("immediate")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NonCancellable")))
@interface MVIMNonCancellable : MVIMKotlinAbstractCoroutineContextElement <MVIMJob>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithKey:(id<MVIMKotlinCoroutineContextKey>)key __attribute__((swift_name("init(key:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)nonCancellable __attribute__((swift_name("init()")));
- (id<MVIMChildHandle>)attachChildChild:(id<MVIMChildJob>)child __attribute__((swift_name("attachChild(child:)")));
- (void)cancelCause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (MVIMKotlinCancellationException *)getCancellationException __attribute__((swift_name("getCancellationException()")));
- (id<MVIMDisposableHandle>)invokeOnCompletionOnCancelling:(BOOL)onCancelling invokeImmediately:(BOOL)invokeImmediately handler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(onCancelling:invokeImmediately:handler:)")));
- (id<MVIMDisposableHandle>)invokeOnCompletionHandler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnCompletion(handler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("join(completionHandler:)")));
- (BOOL)start __attribute__((swift_name("start()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMKotlinSequence> children __attribute__((swift_name("children")));
@property (readonly) BOOL isActive __attribute__((swift_name("isActive")));
@property (readonly) BOOL isCancelled __attribute__((swift_name("isCancelled")));
@property (readonly) BOOL isCompleted __attribute__((swift_name("isCompleted")));
@property (readonly) id<MVIMSelectClause0> onJoin __attribute__((swift_name("onJoin")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NonDisposableHandle")))
@interface MVIMNonDisposableHandle : MVIMBase <MVIMDisposableHandle, MVIMChildHandle>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)nonDisposableHandle __attribute__((swift_name("init()")));
- (BOOL)childCancelledCause:(MVIMKotlinThrowable *)cause __attribute__((swift_name("childCancelled(cause:)")));
- (void)dispose __attribute__((swift_name("dispose()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMJob> _Nullable parent __attribute__((swift_name("parent")));
@end;

__attribute__((swift_name("Runnable")))
@protocol MVIMRunnable
@required
- (void)run __attribute__((swift_name("run()")));
@end;

__attribute__((swift_name("SingleThreadDispatcher")))
@interface MVIMSingleThreadDispatcher : MVIMCoroutineDispatcher
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)close __attribute__((swift_name("close()")));
@property (readonly) int32_t worker __attribute__((swift_name("worker")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutCancellationException")))
@interface MVIMTimeoutCancellationException : MVIMKotlinCancellationException <MVIMCopyableThrowable>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (MVIMTimeoutCancellationException * _Nullable)createCopy __attribute__((swift_name("createCopy()")));
@end;

__attribute__((swift_name("SendChannel")))
@protocol MVIMSendChannel
@required
- (BOOL)closeCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)invokeOnCloseHandler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnClose(handler:)")));
- (BOOL)offerElement:(id _Nullable)element __attribute__((swift_name("offer(element:)"))) __attribute__((deprecated("Deprecated in the favour of 'trySend' method")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendElement:(id _Nullable)element completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("send(element:completionHandler:)")));
- (id _Nullable)trySendElement:(id _Nullable)element __attribute__((swift_name("trySend(element:)")));
@property (readonly) BOOL isClosedForSend __attribute__((swift_name("isClosedForSend")));
@property (readonly) id<MVIMSelectClause2> onSend __attribute__((swift_name("onSend")));
@end;

__attribute__((swift_name("BroadcastChannel")))
@protocol MVIMBroadcastChannel <MVIMSendChannel>
@required
- (void)cancelCause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (id<MVIMReceiveChannel>)openSubscription __attribute__((swift_name("openSubscription()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferOverflow")))
@interface MVIMBufferOverflow : MVIMKotlinEnum<MVIMBufferOverflow *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMBufferOverflow *suspend __attribute__((swift_name("suspend")));
@property (class, readonly) MVIMBufferOverflow *dropOldest __attribute__((swift_name("dropOldest")));
@property (class, readonly) MVIMBufferOverflow *dropLatest __attribute__((swift_name("dropLatest")));
+ (MVIMKotlinArray<MVIMBufferOverflow *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("ReceiveChannel")))
@protocol MVIMReceiveChannel
@required
- (void)cancelCause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (id<MVIMChannelIterator>)iterator __attribute__((swift_name("iterator()")));
- (id _Nullable)poll __attribute__((swift_name("poll()"))) __attribute__((deprecated("Deprecated in the favour of 'tryReceive'. Please note that the provided replacement does not rethrow channel's close cause as 'poll' did, for the precise replacement please refer to the 'poll' documentation")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveCatchingWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveCatching(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveOrNullWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveOrNull(completionHandler:)"))) __attribute__((unavailable("Deprecated in favor of 'receiveCatching'. Please note that the provided replacement does not rethrow channel's close cause as 'receiveOrNull' did, for the detailed replacement please refer to the 'receiveOrNull' documentation")));
- (id _Nullable)tryReceive __attribute__((swift_name("tryReceive()")));
@property (readonly) BOOL isClosedForReceive __attribute__((swift_name("isClosedForReceive")));
@property (readonly, getter=isEmpty__) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) id<MVIMSelectClause1> onReceive __attribute__((swift_name("onReceive")));
@property (readonly) id<MVIMSelectClause1> onReceiveCatching __attribute__((swift_name("onReceiveCatching")));
@property (readonly) id<MVIMSelectClause1> onReceiveOrNull __attribute__((swift_name("onReceiveOrNull"))) __attribute__((unavailable("Deprecated in favor of onReceiveCatching extension")));
@end;

__attribute__((swift_name("Channel")))
@protocol MVIMChannel <MVIMSendChannel, MVIMReceiveChannel>
@required
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelFactory")))
@interface MVIMChannelFactory : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)factory __attribute__((swift_name("init()")));
@property (readonly) int32_t BUFFERED __attribute__((swift_name("BUFFERED")));
@property (readonly) int32_t CONFLATED __attribute__((swift_name("CONFLATED")));
@property (readonly) NSString *DEFAULT_BUFFER_PROPERTY_NAME __attribute__((swift_name("DEFAULT_BUFFER_PROPERTY_NAME")));
@property (readonly) int32_t RENDEZVOUS __attribute__((swift_name("RENDEZVOUS")));
@property (readonly) int32_t UNLIMITED __attribute__((swift_name("UNLIMITED")));
@end;

__attribute__((swift_name("ChannelIterator")))
@protocol MVIMChannelIterator
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)hasNextWithCompletionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("hasNext(completionHandler:)")));
- (id _Nullable)next__ __attribute__((swift_name("next_()")));
@end;

__attribute__((swift_name("KotlinNoSuchElementException")))
@interface MVIMKotlinNoSuchElementException : MVIMKotlinRuntimeException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedReceiveChannelException")))
@interface MVIMClosedReceiveChannelException : MVIMKotlinNoSuchElementException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClosedSendChannelException")))
@interface MVIMClosedSendChannelException : MVIMKotlinIllegalStateException
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConflatedBroadcastChannel")))
@interface MVIMConflatedBroadcastChannel<E> : MVIMBase <MVIMBroadcastChannel>
- (instancetype)initWithValue:(E _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)cancelCause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(cause_:)")));
- (BOOL)closeCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("close(cause:)")));
- (void)invokeOnCloseHandler:(void (^)(MVIMKotlinThrowable * _Nullable))handler __attribute__((swift_name("invokeOnClose(handler:)")));
- (id<MVIMReceiveChannel>)openSubscription __attribute__((swift_name("openSubscription()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)sendElement:(E _Nullable)element completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("send(element:completionHandler:)")));
- (id _Nullable)trySendElement:(E _Nullable)element __attribute__((swift_name("trySend(element:)")));
@property (readonly) BOOL isClosedForSend __attribute__((swift_name("isClosedForSend")));
@property (readonly) id<MVIMSelectClause2> onSend __attribute__((swift_name("onSend")));
@property (readonly) E _Nullable value __attribute__((swift_name("value")));
@property (readonly) E _Nullable valueOrNull __attribute__((swift_name("valueOrNull")));
@end;

__attribute__((swift_name("ProducerScope")))
@protocol MVIMProducerScope <MVIMCoroutineScope, MVIMSendChannel>
@required
@property (readonly) id<MVIMSendChannel> channel __attribute__((swift_name("channel")));
@end;

__attribute__((swift_name("Flow")))
@protocol MVIMFlow
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<MVIMFlowCollector>)collector completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));
@end;

__attribute__((swift_name("AbstractFlow")))
@interface MVIMAbstractFlow<T> : MVIMBase <MVIMFlow>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<MVIMFlowCollector>)collector completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectSafelyCollector:(id<MVIMFlowCollector>)collector completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collectSafely(collector:completionHandler:)")));
@end;

__attribute__((swift_name("FlowCollector")))
@protocol MVIMFlowCollector
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(id _Nullable)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end;

__attribute__((swift_name("SharedFlow")))
@protocol MVIMSharedFlow <MVIMFlow>
@required
@property (readonly) NSArray<id> *replayCache __attribute__((swift_name("replayCache")));
@end;

__attribute__((swift_name("MutableSharedFlow")))
@protocol MVIMMutableSharedFlow <MVIMSharedFlow, MVIMFlowCollector>
@required
- (void)resetReplayCache __attribute__((swift_name("resetReplayCache()")));
- (BOOL)tryEmitValue:(id _Nullable)value __attribute__((swift_name("tryEmit(value:)")));
@property (readonly) id<MVIMStateFlow> subscriptionCount __attribute__((swift_name("subscriptionCount")));
@end;

__attribute__((swift_name("StateFlow")))
@protocol MVIMStateFlow <MVIMSharedFlow>
@required
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("MutableStateFlow")))
@protocol MVIMMutableStateFlow <MVIMStateFlow, MVIMMutableSharedFlow>
@required
- (BOOL)compareAndSetExpect:(id _Nullable)expect update:(id _Nullable)update __attribute__((swift_name("compareAndSet(expect:update:)")));
- (void)setValue:(id _Nullable)value __attribute__((swift_name("setValue(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharingCommand")))
@interface MVIMSharingCommand : MVIMKotlinEnum<MVIMSharingCommand *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMSharingCommand *start __attribute__((swift_name("start")));
@property (class, readonly) MVIMSharingCommand *stop __attribute__((swift_name("stop")));
@property (class, readonly) MVIMSharingCommand *stopAndResetReplayCache __attribute__((swift_name("stopAndResetReplayCache")));
+ (MVIMKotlinArray<MVIMSharingCommand *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("SharingStarted")))
@protocol MVIMSharingStarted
@required
- (id<MVIMFlow>)commandSubscriptionCount:(id<MVIMStateFlow>)subscriptionCount __attribute__((swift_name("command(subscriptionCount:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharingStartedCompanion")))
@interface MVIMSharingStartedCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMSharingStarted>)WhileSubscribedStopTimeoutMillis:(int64_t)stopTimeoutMillis replayExpirationMillis:(int64_t)replayExpirationMillis __attribute__((swift_name("WhileSubscribed(stopTimeoutMillis:replayExpirationMillis:)")));
@property (readonly) id<MVIMSharingStarted> Eagerly __attribute__((swift_name("Eagerly")));
@property (readonly) id<MVIMSharingStarted> Lazily __attribute__((swift_name("Lazily")));
@end;

__attribute__((swift_name("FusibleFlow")))
@protocol MVIMFusibleFlow <MVIMFlow>
@required
- (id<MVIMFlow>)fuseContext:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow __attribute__((swift_name("fuse(context:capacity:onBufferOverflow:)")));
@end;

__attribute__((swift_name("ChannelFlow")))
@interface MVIMChannelFlow<T> : MVIMBase <MVIMFusibleFlow>
- (instancetype)initWithContext:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow __attribute__((swift_name("init(context:capacity:onBufferOverflow:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)additionalToStringProps __attribute__((swift_name("additionalToStringProps()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectCollector:(id<MVIMFlowCollector>)collector completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collect(collector:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)collectToScope:(id<MVIMProducerScope>)scope completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collectTo(scope:completionHandler:)")));
- (MVIMChannelFlow<T> *)createContext:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow __attribute__((swift_name("create(context:capacity:onBufferOverflow:)")));
- (id<MVIMFlow> _Nullable)dropChannelOperators __attribute__((swift_name("dropChannelOperators()")));
- (id<MVIMFlow>)fuseContext:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow __attribute__((swift_name("fuse(context:capacity:onBufferOverflow:)")));
- (id<MVIMReceiveChannel>)produceImplScope:(id<MVIMCoroutineScope>)scope __attribute__((swift_name("produceImpl(scope:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t capacity __attribute__((swift_name("capacity")));
@property (readonly) id<MVIMKotlinCoroutineContext> context __attribute__((swift_name("context")));
@property (readonly) MVIMBufferOverflow *onBufferOverflow __attribute__((swift_name("onBufferOverflow")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SendingCollector")))
@interface MVIMSendingCollector<T> : MVIMBase <MVIMFlowCollector>
- (instancetype)initWithChannel:(id<MVIMSendChannel>)channel __attribute__((swift_name("init(channel:)"))) __attribute__((objc_designated_initializer));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)emitValue:(T _Nullable)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("emit(value:completionHandler:)")));
@end;

__attribute__((swift_name("SelectBuilder")))
@protocol MVIMSelectBuilder
@required
- (void)onTimeoutTimeMillis:(int64_t)timeMillis block:(id<MVIMKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(timeMillis:block:)")));
- (void)invoke:(id<MVIMSelectClause0>)receiver block:(id<MVIMKotlinSuspendFunction0>)block __attribute__((swift_name("invoke(_:block:)")));
- (void)invoke:(id<MVIMSelectClause1>)receiver block_:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:block_:)")));
- (void)invoke:(id<MVIMSelectClause2>)receiver param:(id _Nullable)param block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:param:block:)")));
- (void)invoke:(id<MVIMSelectClause2>)receiver block__:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("invoke(_:block__:)")));
@end;

__attribute__((swift_name("SelectClause1")))
@protocol MVIMSelectClause1
@required
- (void)registerSelectClause1Select:(id<MVIMSelectInstance>)select block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("registerSelectClause1(select:block:)")));
@end;

__attribute__((swift_name("SelectClause2")))
@protocol MVIMSelectClause2
@required
- (void)registerSelectClause2Select:(id<MVIMSelectInstance>)select param:(id _Nullable)param block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("registerSelectClause2(select:param:block:)")));
@end;

__attribute__((swift_name("SelectInstance")))
@protocol MVIMSelectInstance
@required
- (void)disposeOnSelectHandle:(id<MVIMDisposableHandle>)handle __attribute__((swift_name("disposeOnSelect(handle:)")));
- (id _Nullable)performAtomicTrySelectDesc:(MVIMAtomicDesc *)desc __attribute__((swift_name("performAtomicTrySelect(desc:)")));
- (void)resumeSelectWithExceptionException:(MVIMKotlinThrowable *)exception __attribute__((swift_name("resumeSelectWithException(exception:)")));
- (BOOL)trySelect __attribute__((swift_name("trySelect()")));
- (id _Nullable)trySelectOtherOtherOp:(MVIMLockFreeLinkedListNodePrepareOp * _Nullable)otherOp __attribute__((swift_name("trySelectOther(otherOp:)")));
@property (readonly) id<MVIMKotlinContinuation> completion __attribute__((swift_name("completion")));
@property (readonly) BOOL isSelected __attribute__((swift_name("isSelected")));
@end;

__attribute__((swift_name("AtomicDesc")))
@interface MVIMAtomicDesc : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeOp:(MVIMAtomicOp<id> *)op failure:(id _Nullable)failure __attribute__((swift_name("complete(op:failure:)")));
- (id _Nullable)prepareOp:(MVIMAtomicOp<id> *)op __attribute__((swift_name("prepare(op:)")));
@property MVIMAtomicOp<id> *atomicOp __attribute__((swift_name("atomicOp")));
@end;

__attribute__((swift_name("OpDescriptor")))
@interface MVIMOpDescriptor : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)isEarlierThanThat:(MVIMOpDescriptor *)that __attribute__((swift_name("isEarlierThan(that:)")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMAtomicOp<id> * _Nullable atomicOp __attribute__((swift_name("atomicOp")));
@end;

__attribute__((swift_name("AtomicOp")))
@interface MVIMAtomicOp<__contravariant T> : MVIMOpDescriptor
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeAffected:(T _Nullable)affected failure:(id _Nullable)failure __attribute__((swift_name("complete(affected:failure:)")));
- (id _Nullable)decideDecision:(id _Nullable)decision __attribute__((swift_name("decide(decision:)")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (id _Nullable)prepareAffected:(T _Nullable)affected __attribute__((swift_name("prepare(affected:)")));
@property (readonly) MVIMAtomicOp<id> *atomicOp __attribute__((swift_name("atomicOp")));
@property (readonly) id _Nullable consensus __attribute__((swift_name("consensus")));
@property (readonly) BOOL isDecided __attribute__((swift_name("isDecided")));
@property (readonly) int64_t opSequence __attribute__((swift_name("opSequence")));
@end;

__attribute__((swift_name("LockFreeLinkedListNode")))
@interface MVIMLockFreeLinkedListNode : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(MVIMLockFreeLinkedListNode *)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(MVIMLockFreeLinkedListNode *)node condition:(MVIMBoolean *(^)(void))condition __attribute__((swift_name("addLastIf(node:condition:)")));
- (BOOL)addLastIfPrevNode:(MVIMLockFreeLinkedListNode *)node predicate:(MVIMBoolean *(^)(MVIMLockFreeLinkedListNode *))predicate __attribute__((swift_name("addLastIfPrev(node:predicate:)")));
- (BOOL)addLastIfPrevAndIfNode:(MVIMLockFreeLinkedListNode *)node predicate:(MVIMBoolean *(^)(MVIMLockFreeLinkedListNode *))predicate condition:(MVIMBoolean *(^)(void))condition __attribute__((swift_name("addLastIfPrevAndIf(node:predicate:condition:)")));
- (BOOL)addOneIfEmptyNode:(MVIMLockFreeLinkedListNode *)node __attribute__((swift_name("addOneIfEmpty(node:)")));
- (MVIMLockFreeLinkedListNodeAddLastDesc<MVIMLockFreeLinkedListNode *> *)describeAddLastNode:(MVIMLockFreeLinkedListNode *)node __attribute__((swift_name("describeAddLast(node:)")));
- (MVIMLockFreeLinkedListNodeRemoveFirstDesc<MVIMLockFreeLinkedListNode *> *)describeRemoveFirst __attribute__((swift_name("describeRemoveFirst()")));
- (void)helpRemove __attribute__((swift_name("helpRemove()")));
- (MVIMLockFreeLinkedListNode * _Nullable)nextIfRemoved __attribute__((swift_name("nextIfRemoved()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
- (id _Nullable)removeFirstIfIsInstanceOfOrPeekIfPredicate:(MVIMBoolean *(^)(id _Nullable))predicate __attribute__((swift_name("removeFirstIfIsInstanceOfOrPeekIf(predicate:)")));
- (MVIMLockFreeLinkedListNode * _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@property (readonly, getter=next_) id _Nullable next __attribute__((swift_name("next")));
@property (readonly) MVIMLockFreeLinkedListNode *nextNode __attribute__((swift_name("nextNode")));
@property (readonly) MVIMLockFreeLinkedListNode *prevNode __attribute__((swift_name("prevNode")));
@end;

__attribute__((swift_name("LockFreeLinkedListHead")))
@interface MVIMLockFreeLinkedListHead : MVIMLockFreeLinkedListNode
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)forEachBlock:(void (^)(MVIMLockFreeLinkedListNode *))block __attribute__((swift_name("forEach(block:)")));
- (MVIMLockFreeLinkedListNode * _Nullable)nextIfRemoved __attribute__((swift_name("nextIfRemoved()")));
- (BOOL)remove __attribute__((swift_name("remove()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@end;

__attribute__((swift_name("LockFreeLinkedListNode.AbstractAtomicDesc")))
@interface MVIMLockFreeLinkedListNodeAbstractAtomicDesc : MVIMAtomicDesc
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)completeOp:(MVIMAtomicOp<id> *)op failure:(id _Nullable)failure __attribute__((swift_name("complete(op:failure:)")));
- (id _Nullable)failureAffected:(MVIMLockFreeLinkedListNode * _Nullable)affected __attribute__((swift_name("failure(affected:)")));
- (void)finishOnSuccessAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));
- (void)finishPreparePrepareOp:(MVIMLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("finishPrepare(prepareOp:)")));
- (id _Nullable)onPreparePrepareOp:(MVIMLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("onPrepare(prepareOp:)")));
- (void)onRemovedAffected:(MVIMLockFreeLinkedListNode *)affected __attribute__((swift_name("onRemoved(affected:)")));
- (id _Nullable)prepareOp:(MVIMAtomicOp<id> *)op __attribute__((swift_name("prepare(op:)")));
- (BOOL)retryAffected:(MVIMLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));
- (MVIMLockFreeLinkedListNode * _Nullable)takeAffectedNodeOp:(MVIMOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));
- (id)updatedNextAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));
@property (readonly) MVIMLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) MVIMLockFreeLinkedListNode * _Nullable originalNext __attribute__((swift_name("originalNext")));
@end;

__attribute__((swift_name("LockFreeLinkedListNodeAddLastDesc")))
@interface MVIMLockFreeLinkedListNodeAddLastDesc<T> : MVIMLockFreeLinkedListNodeAbstractAtomicDesc
- (instancetype)initWithQueue:(MVIMLockFreeLinkedListNode *)queue node:(T)node __attribute__((swift_name("init(queue:node:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)finishOnSuccessAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));
- (void)finishPreparePrepareOp:(MVIMLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("finishPrepare(prepareOp:)")));
- (BOOL)retryAffected:(MVIMLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));
- (MVIMLockFreeLinkedListNode * _Nullable)takeAffectedNodeOp:(MVIMOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));
- (id)updatedNextAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));
@property (readonly) MVIMLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) T node __attribute__((swift_name("node")));
@property (readonly) MVIMLockFreeLinkedListNode *originalNext __attribute__((swift_name("originalNext")));
@property (readonly) MVIMLockFreeLinkedListNode *queue __attribute__((swift_name("queue")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LockFreeLinkedListNode.PrepareOp")))
@interface MVIMLockFreeLinkedListNodePrepareOp : MVIMOpDescriptor
- (instancetype)initWithAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next desc:(MVIMLockFreeLinkedListNodeAbstractAtomicDesc *)desc __attribute__((swift_name("init(affected:next:desc:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)finishPrepare __attribute__((swift_name("finishPrepare()")));
- (id _Nullable)performAffected:(id _Nullable)affected __attribute__((swift_name("perform(affected:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLockFreeLinkedListNode *affected __attribute__((swift_name("affected")));
@property (readonly) MVIMAtomicOp<id> *atomicOp __attribute__((swift_name("atomicOp")));
@property (readonly) MVIMLockFreeLinkedListNodeAbstractAtomicDesc *desc __attribute__((swift_name("desc")));
@property (readonly) MVIMLockFreeLinkedListNode *next __attribute__((swift_name("next")));
@end;

__attribute__((swift_name("LockFreeLinkedListNodeRemoveFirstDesc")))
@interface MVIMLockFreeLinkedListNodeRemoveFirstDesc<T> : MVIMLockFreeLinkedListNodeAbstractAtomicDesc
- (instancetype)initWithQueue:(MVIMLockFreeLinkedListNode *)queue __attribute__((swift_name("init(queue:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (id _Nullable)failureAffected:(MVIMLockFreeLinkedListNode * _Nullable)affected __attribute__((swift_name("failure(affected:)")));
- (void)finishOnSuccessAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next __attribute__((swift_name("finishOnSuccess(affected:next:)")));
- (void)finishPreparePrepareOp:(MVIMLockFreeLinkedListNodePrepareOp *)prepareOp __attribute__((swift_name("finishPrepare(prepareOp:)")));
- (BOOL)retryAffected:(MVIMLockFreeLinkedListNode *)affected next:(id)next __attribute__((swift_name("retry(affected:next:)")));
- (MVIMLockFreeLinkedListNode * _Nullable)takeAffectedNodeOp:(MVIMOpDescriptor *)op __attribute__((swift_name("takeAffectedNode(op:)")));
- (id)updatedNextAffected:(MVIMLockFreeLinkedListNode *)affected next:(MVIMLockFreeLinkedListNode *)next __attribute__((swift_name("updatedNext(affected:next:)")));
@property (readonly) MVIMLockFreeLinkedListNode * _Nullable affectedNode __attribute__((swift_name("affectedNode")));
@property (readonly) MVIMLockFreeLinkedListNode * _Nullable originalNext __attribute__((swift_name("originalNext")));
@property (readonly) MVIMLockFreeLinkedListNode *queue __attribute__((swift_name("queue")));
@property (readonly) T _Nullable result __attribute__((swift_name("result")));
@end;

__attribute__((swift_name("MainDispatcherFactory")))
@protocol MVIMMainDispatcherFactory
@required
- (MVIMMainCoroutineDispatcher *)createDispatcherAllFactories:(NSArray<id<MVIMMainDispatcherFactory>> *)allFactories __attribute__((swift_name("createDispatcher(allFactories:)")));
- (NSString * _Nullable)hintOnError __attribute__((swift_name("hintOnError()")));
@property (readonly) int32_t loadPriority __attribute__((swift_name("loadPriority")));
@end;

__attribute__((swift_name("SynchronizedObject")))
@interface MVIMSynchronizedObject : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)lock __attribute__((swift_name("lock()")));
- (BOOL)tryLock __attribute__((swift_name("tryLock()")));
- (void)unlock __attribute__((swift_name("unlock()")));
@property (readonly, getter=lock_) MVIMKotlinAtomicReference<MVIMSynchronizedObjectLockState *> *lock __attribute__((swift_name("lock")));
@end;

__attribute__((swift_name("ThreadSafeHeap")))
@interface MVIMThreadSafeHeap<T> : MVIMSynchronizedObject
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)addLastNode:(T)node __attribute__((swift_name("addLast(node:)")));
- (BOOL)addLastIfNode:(T)node cond:(MVIMBoolean *(^)(T _Nullable))cond __attribute__((swift_name("addLastIf(node:cond:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (T _Nullable)peek __attribute__((swift_name("peek()")));
- (BOOL)removeNode:(T)node __attribute__((swift_name("remove(node:)")));
- (T _Nullable)removeFirstIfPredicate:(MVIMBoolean *(^)(T))predicate __attribute__((swift_name("removeFirstIf(predicate:)")));
- (T _Nullable)removeFirstOrNull __attribute__((swift_name("removeFirstOrNull()")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("ThreadSafeHeapNode")))
@protocol MVIMThreadSafeHeapNode
@required
@property MVIMThreadSafeHeap<id> * _Nullable heap __attribute__((swift_name("heap")));
@property int32_t index __attribute__((swift_name("index")));
@end;

__attribute__((swift_name("Mutex")))
@protocol MVIMMutex
@required
- (BOOL)holdsLockOwner:(id)owner __attribute__((swift_name("holdsLock(owner:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)lockOwner:(id _Nullable)owner completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("lock(owner:completionHandler:)")));
- (BOOL)tryLockOwner:(id _Nullable)owner __attribute__((swift_name("tryLock(owner:)")));
- (void)unlockOwner:(id _Nullable)owner __attribute__((swift_name("unlock(owner:)")));
@property (readonly) BOOL isLocked __attribute__((swift_name("isLocked")));
@property (readonly) id<MVIMSelectClause2> onLock __attribute__((swift_name("onLock")));
@end;

__attribute__((swift_name("Semaphore")))
@protocol MVIMSemaphore
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)acquireWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("acquire(completionHandler:)")));
- (void)release_ __attribute__((swift_name("release()")));
- (BOOL)tryAcquire __attribute__((swift_name("tryAcquire()")));
@property (readonly) int32_t availablePermits __attribute__((swift_name("availablePermits")));
@end;

__attribute__((swift_name("SerialFormat")))
@protocol MVIMSerialFormat
@required
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("StringFormat")))
@protocol MVIMStringFormat <MVIMSerialFormat>
@required
- (id _Nullable)decodeFromStringDeserializer:(id<MVIMDeserializationStrategy>)deserializer string:(NSString *)string __attribute__((swift_name("decodeFromString(deserializer:string:)")));
- (NSString *)encodeToStringSerializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToString(serializer:value:)")));
@end;

__attribute__((swift_name("Json")))
@interface MVIMJson : MVIMBase <MVIMStringFormat>
- (instancetype)initWithConfiguration:(MVIMJsonConfiguration *)configuration serializersModule:(MVIMSerializersModule *)serializersModule __attribute__((swift_name("init(configuration:serializersModule:)"))) __attribute__((objc_designated_initializer));
- (id _Nullable)decodeFromJsonElementDeserializer:(id<MVIMDeserializationStrategy>)deserializer element:(MVIMJsonElement *)element __attribute__((swift_name("decodeFromJsonElement(deserializer:element:)")));
- (id _Nullable)decodeFromStringDeserializer:(id<MVIMDeserializationStrategy>)deserializer string:(NSString *)string __attribute__((swift_name("decodeFromString(deserializer:string:)")));
- (MVIMJsonElement *)encodeToJsonElementSerializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToJsonElement(serializer:value:)")));
- (NSString *)encodeToStringSerializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToString(serializer:value:)")));
- (MVIMJsonElement *)parseToJsonElementString:(NSString *)string __attribute__((swift_name("parseToJsonElement(string:)")));
@property (readonly) MVIMJsonConfiguration *configuration __attribute__((swift_name("configuration")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Json.Default")))
@interface MVIMJsonDefault : MVIMJson
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithConfiguration:(MVIMJsonConfiguration *)configuration serializersModule:(MVIMSerializersModule *)serializersModule __attribute__((swift_name("init(configuration:serializersModule:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)default_ __attribute__((swift_name("init()")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("JsonArray")))
@interface MVIMJsonArray : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonArrayBuilder")))
@interface MVIMJsonArrayBuilder : MVIMBase
- (BOOL)addElement:(MVIMJsonElement *)element __attribute__((swift_name("add(element:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonBuilder")))
@interface MVIMJsonBuilder : MVIMBase
@property BOOL allowSpecialFloatingPointValues __attribute__((swift_name("allowSpecialFloatingPointValues")));
@property BOOL allowStructuredMapKeys __attribute__((swift_name("allowStructuredMapKeys")));
@property NSString *classDiscriminator __attribute__((swift_name("classDiscriminator")));
@property BOOL coerceInputValues __attribute__((swift_name("coerceInputValues")));
@property BOOL encodeDefaults __attribute__((swift_name("encodeDefaults")));
@property BOOL ignoreUnknownKeys __attribute__((swift_name("ignoreUnknownKeys")));
@property BOOL isLenient __attribute__((swift_name("isLenient")));
@property BOOL prettyPrint __attribute__((swift_name("prettyPrint")));
@property NSString *prettyPrintIndent __attribute__((swift_name("prettyPrintIndent")));
@property MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@property BOOL useAlternativeNames __attribute__((swift_name("useAlternativeNames")));
@property BOOL useArrayPolymorphism __attribute__((swift_name("useArrayPolymorphism")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonConfiguration")))
@interface MVIMJsonConfiguration : MVIMBase
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL allowSpecialFloatingPointValues __attribute__((swift_name("allowSpecialFloatingPointValues")));
@property (readonly) BOOL allowStructuredMapKeys __attribute__((swift_name("allowStructuredMapKeys")));
@property (readonly) NSString *classDiscriminator __attribute__((swift_name("classDiscriminator")));
@property (readonly) BOOL coerceInputValues __attribute__((swift_name("coerceInputValues")));
@property (readonly) BOOL encodeDefaults __attribute__((swift_name("encodeDefaults")));
@property (readonly) BOOL ignoreUnknownKeys __attribute__((swift_name("ignoreUnknownKeys")));
@property (readonly) BOOL isLenient __attribute__((swift_name("isLenient")));
@property (readonly) BOOL prettyPrint __attribute__((swift_name("prettyPrint")));
@property (readonly) NSString *prettyPrintIndent __attribute__((swift_name("prettyPrintIndent")));
@property (readonly) BOOL useAlternativeNames __attribute__((swift_name("useAlternativeNames")));
@property (readonly) BOOL useArrayPolymorphism __attribute__((swift_name("useArrayPolymorphism")));
@end;

__attribute__((swift_name("JsonContentPolymorphicSerializer")))
@interface MVIMJsonContentPolymorphicSerializer<T> : MVIMBase <MVIMKSerializer>
- (instancetype)initWithBaseClass:(id<MVIMKotlinKClass>)baseClass __attribute__((swift_name("init(baseClass:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (id<MVIMDeserializationStrategy>)selectDeserializerElement:(MVIMJsonElement *)element __attribute__((swift_name("selectDeserializer(element:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("Decoder")))
@protocol MVIMDecoder
@required
- (id<MVIMCompositeDecoder>)beginStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (int32_t)decodeEnumEnumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (id<MVIMDecoder>)decodeInlineInlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("decodeInline(inlineDescriptor:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));
- (MVIMKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));
- (id _Nullable)decodeNullableSerializableValueDeserializer:(id<MVIMDeserializationStrategy>)deserializer __attribute__((swift_name("decodeNullableSerializableValue(deserializer:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<MVIMDeserializationStrategy>)deserializer __attribute__((swift_name("decodeSerializableValue(deserializer:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("CompositeDecoder")))
@protocol MVIMCompositeDecoder
@required
- (BOOL)decodeBooleanElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByteElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeCharElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (int32_t)decodeCollectionSizeDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("decodeCollectionSize(descriptor:)")));
- (double)decodeDoubleElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeElementIndexDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("decodeElementIndex(descriptor:)")));
- (float)decodeFloatElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<MVIMDecoder>)decodeInlineElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeIntElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLongElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (BOOL)decodeSequentially __attribute__((swift_name("decodeSequentially()")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (int16_t)decodeShortElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeStringElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (void)endStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("JsonDecoder")))
@protocol MVIMJsonDecoder <MVIMDecoder, MVIMCompositeDecoder>
@required
- (MVIMJsonElement *)decodeJsonElement __attribute__((swift_name("decodeJsonElement()")));
@property (readonly) MVIMJson *json __attribute__((swift_name("json")));
@end;

__attribute__((swift_name("JsonElement")))
@interface MVIMJsonElement : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElement.Companion")))
@interface MVIMJsonElementCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("Encoder")))
@protocol MVIMEncoder
@required
- (id<MVIMCompositeEncoder>)beginCollectionDescriptor:(id<MVIMSerialDescriptor>)descriptor collectionSize:(int32_t)collectionSize __attribute__((swift_name("beginCollection(descriptor:collectionSize:)")));
- (id<MVIMCompositeEncoder>)beginStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeEnumEnumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (id<MVIMEncoder>)encodeInlineInlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("encodeInline(inlineDescriptor:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));
- (void)encodeNotNullMark __attribute__((swift_name("encodeNotNullMark()")));
- (void)encodeNull __attribute__((swift_name("encodeNull()")));
- (void)encodeNullableSerializableValueSerializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableValue(serializer:value:)")));
- (void)encodeSerializableValueSerializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableValue(serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("CompositeEncoder")))
@protocol MVIMCompositeEncoder
@required
- (void)encodeBooleanElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (void)encodeFloatElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<MVIMEncoder>)encodeInlineElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));
- (void)encodeNullableSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)endStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
- (BOOL)shouldEncodeElementDefaultDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("shouldEncodeElementDefault(descriptor:index:)")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("JsonEncoder")))
@protocol MVIMJsonEncoder <MVIMEncoder, MVIMCompositeEncoder>
@required
- (void)encodeJsonElementElement:(MVIMJsonElement *)element __attribute__((swift_name("encodeJsonElement(element:)")));
@property (readonly) MVIMJson *json __attribute__((swift_name("json")));
@end;

__attribute__((swift_name("JsonPrimitive")))
@interface MVIMJsonPrimitive : MVIMJsonElement
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) BOOL isString __attribute__((swift_name("isString")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonNull")))
@interface MVIMJsonNull : MVIMJsonPrimitive
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)jsonNull __attribute__((swift_name("init()")));
@property (readonly) NSString *content __attribute__((swift_name("content")));
@property (readonly) BOOL isString __attribute__((swift_name("isString")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("JsonObject")))
@interface MVIMJsonObject : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonObjectBuilder")))
@interface MVIMJsonObjectBuilder : MVIMBase
- (MVIMJsonElement * _Nullable)putKey:(NSString *)key element:(MVIMJsonElement *)element __attribute__((swift_name("put(key:element:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonPrimitive.Companion")))
@interface MVIMJsonPrimitiveCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((swift_name("JsonTransformingSerializer")))
@interface MVIMJsonTransformingSerializer<T> : MVIMBase <MVIMKSerializer>
- (instancetype)initWithTSerializer:(id<MVIMKSerializer>)tSerializer __attribute__((swift_name("init(tSerializer:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
- (MVIMJsonElement *)transformDeserializeElement:(MVIMJsonElement *)element __attribute__((swift_name("transformDeserialize(element:)")));
- (MVIMJsonElement *)transformSerializeElement:(MVIMJsonElement *)element __attribute__((swift_name("transformSerialize(element:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("Settings")))
@protocol MVIMSettings
@required
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)getBooleanKey:(NSString *)key defaultValue:(BOOL)defaultValue __attribute__((swift_name("getBoolean(key:defaultValue:)")));
- (MVIMBoolean * _Nullable)getBooleanOrNullKey:(NSString *)key __attribute__((swift_name("getBooleanOrNull(key:)")));
- (double)getDoubleKey:(NSString *)key defaultValue:(double)defaultValue __attribute__((swift_name("getDouble(key:defaultValue:)")));
- (MVIMDouble * _Nullable)getDoubleOrNullKey:(NSString *)key __attribute__((swift_name("getDoubleOrNull(key:)")));
- (float)getFloatKey:(NSString *)key defaultValue:(float)defaultValue __attribute__((swift_name("getFloat(key:defaultValue:)")));
- (MVIMFloat * _Nullable)getFloatOrNullKey:(NSString *)key __attribute__((swift_name("getFloatOrNull(key:)")));
- (int32_t)getIntKey:(NSString *)key defaultValue:(int32_t)defaultValue __attribute__((swift_name("getInt(key:defaultValue:)")));
- (MVIMInt * _Nullable)getIntOrNullKey:(NSString *)key __attribute__((swift_name("getIntOrNull(key:)")));
- (int64_t)getLongKey:(NSString *)key defaultValue:(int64_t)defaultValue __attribute__((swift_name("getLong(key:defaultValue:)")));
- (MVIMLong * _Nullable)getLongOrNullKey:(NSString *)key __attribute__((swift_name("getLongOrNull(key:)")));
- (NSString *)getStringKey:(NSString *)key defaultValue:(NSString *)defaultValue __attribute__((swift_name("getString(key:defaultValue:)")));
- (NSString * _Nullable)getStringOrNullKey:(NSString *)key __attribute__((swift_name("getStringOrNull(key:)")));
- (BOOL)hasKeyKey:(NSString *)key __attribute__((swift_name("hasKey(key:)")));
- (void)putBooleanKey:(NSString *)key value:(BOOL)value __attribute__((swift_name("putBoolean(key:value:)")));
- (void)putDoubleKey:(NSString *)key value:(double)value __attribute__((swift_name("putDouble(key:value:)")));
- (void)putFloatKey:(NSString *)key value:(float)value __attribute__((swift_name("putFloat(key:value:)")));
- (void)putIntKey:(NSString *)key value:(int32_t)value __attribute__((swift_name("putInt(key:value:)")));
- (void)putLongKey:(NSString *)key value:(int64_t)value __attribute__((swift_name("putLong(key:value:)")));
- (void)putStringKey:(NSString *)key value:(NSString *)value __attribute__((swift_name("putString(key:value:)")));
- (void)removeKey_:(NSString *)key __attribute__((swift_name("remove(key_:)")));
@property (readonly) NSSet<NSString *> *keys __attribute__((swift_name("keys")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("ObservableSettings")))
@protocol MVIMObservableSettings <MVIMSettings>
@required
- (id<MVIMSettingsListener>)addListenerKey:(NSString *)key callback:(void (^)(void))callback __attribute__((swift_name("addListener(key:callback:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AppleSettings")))
@interface MVIMAppleSettings : MVIMBase <MVIMObservableSettings>
- (instancetype)initWithDelegate:(NSUserDefaults *)delegate __attribute__((swift_name("init(delegate:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithDelegate:(NSUserDefaults *)delegate useFrozenListeners:(BOOL)useFrozenListeners __attribute__((swift_name("init(delegate:useFrozenListeners:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMSettingsListener>)addListenerKey:(NSString *)key callback:(void (^)(void))callback __attribute__((swift_name("addListener(key:callback:)")));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)getBooleanKey:(NSString *)key defaultValue:(BOOL)defaultValue __attribute__((swift_name("getBoolean(key:defaultValue:)")));
- (MVIMBoolean * _Nullable)getBooleanOrNullKey:(NSString *)key __attribute__((swift_name("getBooleanOrNull(key:)")));
- (double)getDoubleKey:(NSString *)key defaultValue:(double)defaultValue __attribute__((swift_name("getDouble(key:defaultValue:)")));
- (MVIMDouble * _Nullable)getDoubleOrNullKey:(NSString *)key __attribute__((swift_name("getDoubleOrNull(key:)")));
- (float)getFloatKey:(NSString *)key defaultValue:(float)defaultValue __attribute__((swift_name("getFloat(key:defaultValue:)")));
- (MVIMFloat * _Nullable)getFloatOrNullKey:(NSString *)key __attribute__((swift_name("getFloatOrNull(key:)")));
- (int32_t)getIntKey:(NSString *)key defaultValue:(int32_t)defaultValue __attribute__((swift_name("getInt(key:defaultValue:)")));
- (MVIMInt * _Nullable)getIntOrNullKey:(NSString *)key __attribute__((swift_name("getIntOrNull(key:)")));
- (int64_t)getLongKey:(NSString *)key defaultValue:(int64_t)defaultValue __attribute__((swift_name("getLong(key:defaultValue:)")));
- (MVIMLong * _Nullable)getLongOrNullKey:(NSString *)key __attribute__((swift_name("getLongOrNull(key:)")));
- (NSString *)getStringKey:(NSString *)key defaultValue:(NSString *)defaultValue __attribute__((swift_name("getString(key:defaultValue:)")));
- (NSString * _Nullable)getStringOrNullKey:(NSString *)key __attribute__((swift_name("getStringOrNull(key:)")));
- (BOOL)hasKeyKey:(NSString *)key __attribute__((swift_name("hasKey(key:)")));
- (void)putBooleanKey:(NSString *)key value:(BOOL)value __attribute__((swift_name("putBoolean(key:value:)")));
- (void)putDoubleKey:(NSString *)key value:(double)value __attribute__((swift_name("putDouble(key:value:)")));
- (void)putFloatKey:(NSString *)key value:(float)value __attribute__((swift_name("putFloat(key:value:)")));
- (void)putIntKey:(NSString *)key value:(int32_t)value __attribute__((swift_name("putInt(key:value:)")));
- (void)putLongKey:(NSString *)key value:(int64_t)value __attribute__((swift_name("putLong(key:value:)")));
- (void)putStringKey:(NSString *)key value:(NSString *)value __attribute__((swift_name("putString(key:value:)")));
- (void)removeKey_:(NSString *)key __attribute__((swift_name("remove(key_:)")));
@property (readonly) NSSet<NSString *> *keys __attribute__((swift_name("keys")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("SettingsFactory")))
@protocol MVIMSettingsFactory
@required
- (id<MVIMSettings>)createName:(NSString * _Nullable)name __attribute__((swift_name("create(name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AppleSettings.Factory")))
@interface MVIMAppleSettingsFactory : MVIMBase <MVIMSettingsFactory>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<MVIMSettings>)createName:(NSString * _Nullable)name __attribute__((swift_name("create(name:)")));
@end;

__attribute__((swift_name("SettingsListener")))
@protocol MVIMSettingsListener
@required
- (void)deactivate __attribute__((swift_name("deactivate()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AppleSettings.Listener")))
@interface MVIMAppleSettingsListener : MVIMBase <MVIMSettingsListener>
- (void)deactivate __attribute__((swift_name("deactivate()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KeychainSettings")))
@interface MVIMKeychainSettings : MVIMBase <MVIMSettings>
- (instancetype)initWithService:(NSString *)service __attribute__((swift_name("init(service:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithDefaultProperties:(MVIMKotlinArray<MVIMKotlinPair<id, id> *> *)defaultProperties __attribute__((swift_name("init(defaultProperties:)"))) __attribute__((objc_designated_initializer));
- (void)clear __attribute__((swift_name("clear()")));
- (BOOL)getBooleanKey:(NSString *)key defaultValue:(BOOL)defaultValue __attribute__((swift_name("getBoolean(key:defaultValue:)")));
- (MVIMBoolean * _Nullable)getBooleanOrNullKey:(NSString *)key __attribute__((swift_name("getBooleanOrNull(key:)")));
- (double)getDoubleKey:(NSString *)key defaultValue:(double)defaultValue __attribute__((swift_name("getDouble(key:defaultValue:)")));
- (MVIMDouble * _Nullable)getDoubleOrNullKey:(NSString *)key __attribute__((swift_name("getDoubleOrNull(key:)")));
- (float)getFloatKey:(NSString *)key defaultValue:(float)defaultValue __attribute__((swift_name("getFloat(key:defaultValue:)")));
- (MVIMFloat * _Nullable)getFloatOrNullKey:(NSString *)key __attribute__((swift_name("getFloatOrNull(key:)")));
- (int32_t)getIntKey:(NSString *)key defaultValue:(int32_t)defaultValue __attribute__((swift_name("getInt(key:defaultValue:)")));
- (MVIMInt * _Nullable)getIntOrNullKey:(NSString *)key __attribute__((swift_name("getIntOrNull(key:)")));
- (int64_t)getLongKey:(NSString *)key defaultValue:(int64_t)defaultValue __attribute__((swift_name("getLong(key:defaultValue:)")));
- (MVIMLong * _Nullable)getLongOrNullKey:(NSString *)key __attribute__((swift_name("getLongOrNull(key:)")));
- (NSString *)getStringKey:(NSString *)key defaultValue:(NSString *)defaultValue __attribute__((swift_name("getString(key:defaultValue:)")));
- (NSString * _Nullable)getStringOrNullKey:(NSString *)key __attribute__((swift_name("getStringOrNull(key:)")));
- (BOOL)hasKeyKey:(NSString *)key __attribute__((swift_name("hasKey(key:)")));
- (void)putBooleanKey:(NSString *)key value:(BOOL)value __attribute__((swift_name("putBoolean(key:value:)")));
- (void)putDoubleKey:(NSString *)key value:(double)value __attribute__((swift_name("putDouble(key:value:)")));
- (void)putFloatKey:(NSString *)key value:(float)value __attribute__((swift_name("putFloat(key:value:)")));
- (void)putIntKey:(NSString *)key value:(int32_t)value __attribute__((swift_name("putInt(key:value:)")));
- (void)putLongKey:(NSString *)key value:(int64_t)value __attribute__((swift_name("putLong(key:value:)")));
- (void)putStringKey:(NSString *)key value:(NSString *)value __attribute__((swift_name("putString(key:value:)")));
- (void)removeKey_:(NSString *)key __attribute__((swift_name("remove(key_:)")));
@property (readonly) NSSet<NSString *> *keys __attribute__((swift_name("keys")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SettingsCompanion")))
@interface MVIMSettingsCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("AbstractSharedLinkedList")))
@interface MVIMAbstractSharedLinkedList : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CopyOnIterateLinkedList")))
@interface MVIMCopyOnIterateLinkedList : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("CopyOnWriteList")))
@interface MVIMCopyOnWriteList : NSObject
@end;

__attribute__((swift_name("LruCache")))
@protocol MVIMLruCache
@required
- (BOOL)existsKey:(id _Nullable)key __attribute__((swift_name("exists(key:)")));
- (id _Nullable)getKey__:(id _Nullable)key __attribute__((swift_name("get(key__:)")));
- (id _Nullable)putKey:(id _Nullable)key value_:(id _Nullable)value __attribute__((swift_name("put(key:value_:)")));
- (id _Nullable)removeKey:(id _Nullable)key skipCallback:(BOOL)skipCallback __attribute__((swift_name("remove(key:skipCallback:)")));
- (void)removeAllSkipCallback:(BOOL)skipCallback __attribute__((swift_name("removeAll(skipCallback:)")));
@property (readonly, getter=entries_) MVIMMutableSet<id<MVIMKotlinMutableMapMutableEntry>> *entries __attribute__((swift_name("entries")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ObjectPool_")))
@interface MVIMObjectPool<T> : MVIMBase
- (instancetype)initWithMaxSize:(int32_t)maxSize createBlock:(T _Nullable (^)(void))createBlock cleanupBlock:(void (^ _Nullable)(T _Nullable))cleanupBlock __attribute__((swift_name("init(maxSize:createBlock:cleanupBlock:)"))) __attribute__((objc_designated_initializer));
- (void)clear __attribute__((swift_name("clear()")));
- (T _Nullable)pop __attribute__((swift_name("pop()")));
- (BOOL)pushT:(T _Nullable)t __attribute__((swift_name("push(t:)")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("SharedHashMap")))
@interface MVIMSharedHashMap : NSObject
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("SharedLinkedList")))
@interface MVIMSharedLinkedList : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedLruCache")))
@interface MVIMSharedLruCache<K, V> : MVIMBase <MVIMLruCache>
- (instancetype)initWithMaxCacheSize:(int32_t)maxCacheSize onRemove:(void (^)(id<MVIMKotlinMutableMapMutableEntry>))onRemove __attribute__((swift_name("init(maxCacheSize:onRemove:)"))) __attribute__((objc_designated_initializer));
- (BOOL)existsKey:(K _Nullable)key __attribute__((swift_name("exists(key:)")));
- (V _Nullable)getKey__:(K _Nullable)key __attribute__((swift_name("get(key__:)")));
- (V _Nullable)putKey:(K _Nullable)key value_:(V _Nullable)value __attribute__((swift_name("put(key:value_:)")));
- (V _Nullable)removeKey:(K _Nullable)key skipCallback:(BOOL)skipCallback __attribute__((swift_name("remove(key:skipCallback:)")));
- (void)removeAllSkipCallback:(BOOL)skipCallback __attribute__((swift_name("removeAll(skipCallback:)")));
@property (readonly, getter=entries_) MVIMMutableSet<id<MVIMKotlinMutableMapMutableEntry>> *entries __attribute__((swift_name("entries")));
@property (readonly, getter=size_) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedLruCacheCacheEntry")))
@interface MVIMSharedLruCacheCacheEntry<K, V> : MVIMBase
- (instancetype)initWithV:(V _Nullable)v node:(MVIMAbstractSharedLinkedListNode<K> *)node __attribute__((swift_name("init(v:node:)"))) __attribute__((objc_designated_initializer));
- (V _Nullable)component1 __attribute__((swift_name("component1()")));
- (MVIMAbstractSharedLinkedListNode<K> *)component2 __attribute__((swift_name("component2()")));
- (MVIMSharedLruCacheCacheEntry<K, V> *)doCopyV:(V _Nullable)v node:(MVIMAbstractSharedLinkedListNode<K> *)node __attribute__((swift_name("doCopy(v:node:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMAbstractSharedLinkedListNode<K> *node __attribute__((swift_name("node")));
@property (readonly) V _Nullable v __attribute__((swift_name("v")));
@end;

__attribute__((swift_name("KotlinMapEntry")))
@protocol MVIMKotlinMapEntry
@required
@property (readonly) id _Nullable key __attribute__((swift_name("key")));
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((swift_name("KotlinMutableDictionaryMutableEntry")))
@protocol MVIMKotlinMutableMapMutableEntry <MVIMKotlinMapEntry>
@required
- (id _Nullable)setValueNewValue:(id _Nullable)newValue __attribute__((swift_name("setValue(newValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedLruCacheLruEntry")))
@interface MVIMSharedLruCacheLruEntry<K, V> : MVIMBase <MVIMKotlinMutableMapMutableEntry>
- (instancetype)initWithKey:(K _Nullable)key value:(V _Nullable)value __attribute__((swift_name("init(key:value:)"))) __attribute__((objc_designated_initializer));
- (V _Nullable)setValueNewValue:(V _Nullable)newValue __attribute__((swift_name("setValue(newValue:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) K _Nullable key __attribute__((swift_name("key")));
@property (readonly) V _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((unavailable("can't be imported")))
__attribute__((swift_name("SharedSet")))
@interface MVIMSharedSet : NSObject
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicBoolean_")))
@interface MVIMAtomicBoolean_ : MVIMBase
- (instancetype)initWithValue_:(BOOL)value_ __attribute__((swift_name("init(value_:)"))) __attribute__((objc_designated_initializer));
- (BOOL)compareAndSetExpected:(BOOL)expected new:(BOOL)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
@property BOOL value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicInt")))
@interface MVIMAtomicInt : MVIMBase
- (instancetype)initWithInitialValue:(int32_t)initialValue __attribute__((swift_name("init(initialValue:)"))) __attribute__((objc_designated_initializer));
- (int32_t)addAndGetDelta:(int32_t)delta __attribute__((swift_name("addAndGet(delta:)")));
- (BOOL)compareAndSetExpected:(int32_t)expected new:(int32_t)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (int32_t)decrementAndGet __attribute__((swift_name("decrementAndGet()")));
- (int32_t)get __attribute__((swift_name("get()")));
- (int32_t)incrementAndGet __attribute__((swift_name("incrementAndGet()")));
- (void)setNewValue:(int32_t)newValue __attribute__((swift_name("set(newValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicLong")))
@interface MVIMAtomicLong : MVIMBase
- (instancetype)initWithInitialValue:(int64_t)initialValue __attribute__((swift_name("init(initialValue:)"))) __attribute__((objc_designated_initializer));
- (int64_t)addAndGetDelta:(int64_t)delta __attribute__((swift_name("addAndGet(delta:)")));
- (BOOL)compareAndSetExpected:(int64_t)expected new:(int64_t)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (int64_t)decrementAndGet __attribute__((swift_name("decrementAndGet()")));
- (int64_t)get __attribute__((swift_name("get()")));
- (int64_t)incrementAndGet __attribute__((swift_name("incrementAndGet()")));
- (void)setNewValue:(int64_t)newValue __attribute__((swift_name("set(newValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicReference")))
@interface MVIMAtomicReference<V> : MVIMBase
- (instancetype)initWithInitialValue:(V _Nullable)initialValue __attribute__((swift_name("init(initialValue:)"))) __attribute__((objc_designated_initializer));
- (BOOL)compareAndSetExpected:(V _Nullable)expected new:(V _Nullable)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (V _Nullable)get __attribute__((swift_name("get()")));
- (void)setValue_:(V _Nullable)value_ __attribute__((swift_name("set(value_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("GuardedStableRef")))
@interface MVIMGuardedStableRef<T> : MVIMBase
- (instancetype)initWithT:(T)t __attribute__((swift_name("init(t:)"))) __attribute__((objc_designated_initializer));
- (void)dispose __attribute__((swift_name("dispose()")));
@property (readonly) T state __attribute__((swift_name("state")));
@end;

__attribute__((swift_name("ThreadLocalRef")))
@interface MVIMThreadLocalRef<T> : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (T _Nullable)get __attribute__((swift_name("get()")));
- (void)remove __attribute__((swift_name("remove()")));
- (void)setValue_:(T _Nullable)value __attribute__((swift_name("set(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ThreadRef")))
@interface MVIMThreadRef : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (BOOL)same __attribute__((swift_name("same()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicArray")))
@interface MVIMAtomicArray<T> : MVIMBase
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicBooleanArray")))
@interface MVIMAtomicBooleanArray : MVIMBase
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicIntArray")))
@interface MVIMAtomicIntArray : MVIMBase
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicLongArray")))
@interface MVIMAtomicLongArray : MVIMBase
- (instancetype)initWithSize:(int32_t)size __attribute__((swift_name("init(size:)"))) __attribute__((objc_designated_initializer));
- (id)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("TraceBase")))
@interface MVIMTraceBase : MVIMBase
- (void)appendEvent:(id)event __attribute__((swift_name("append(event:)")));
- (void)appendEvent1:(id)event1 event2:(id)event2 __attribute__((swift_name("append(event1:event2:)")));
- (void)appendEvent1:(id)event1 event2:(id)event2 event3:(id)event3 __attribute__((swift_name("append(event1:event2:event3:)")));
- (void)appendEvent1:(id)event1 event2:(id)event2 event3:(id)event3 event4:(id)event4 __attribute__((swift_name("append(event1:event2:event3:event4:)")));
- (void)invokeEvent:(id (^)(void))event __attribute__((swift_name("invoke(event:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TraceBase.None")))
@interface MVIMTraceBaseNone : MVIMTraceBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)none __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("TraceFormat")))
@interface MVIMTraceFormat : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)formatIndex:(int32_t)index event:(id)event __attribute__((swift_name("format(index:event:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MutexPool")))
@interface MVIMMutexPool : MVIMBase
- (instancetype)initWithCapacity:(int32_t)capacity __attribute__((swift_name("init(capacity:)"))) __attribute__((objc_designated_initializer));
- (void *)allocate __attribute__((swift_name("allocate()")));
- (void)releaseMutexNode:(void *)mutexNode __attribute__((swift_name("release(mutexNode:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedObject.LockState")))
@interface MVIMSynchronizedObjectLockState : MVIMBase
- (instancetype)initWithStatus:(MVIMSynchronizedObjectStatus *)status nestedLocks:(int32_t)nestedLocks waiters:(int32_t)waiters ownerThreadId:(void * _Nullable)ownerThreadId mutex:(void * _Nullable)mutex __attribute__((swift_name("init(status:nestedLocks:waiters:ownerThreadId:mutex:)"))) __attribute__((objc_designated_initializer));
@property (readonly) void * _Nullable mutex __attribute__((swift_name("mutex")));
@property (readonly) int32_t nestedLocks __attribute__((swift_name("nestedLocks")));
@property (readonly) void * _Nullable ownerThreadId __attribute__((swift_name("ownerThreadId")));
@property (readonly) MVIMSynchronizedObjectStatus *status __attribute__((swift_name("status")));
@property (readonly) int32_t waiters __attribute__((swift_name("waiters")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedObject.Status")))
@interface MVIMSynchronizedObjectStatus : MVIMKotlinEnum<MVIMSynchronizedObjectStatus *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMSynchronizedObjectStatus *unlocked __attribute__((swift_name("unlocked")));
@property (class, readonly) MVIMSynchronizedObjectStatus *thin __attribute__((swift_name("thin")));
@property (class, readonly) MVIMSynchronizedObjectStatus *fat __attribute__((swift_name("fat")));
+ (MVIMKotlinArray<MVIMSynchronizedObjectStatus *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("BinaryFormat")))
@protocol MVIMBinaryFormat <MVIMSerialFormat>
@required
- (id _Nullable)decodeFromByteArrayDeserializer:(id<MVIMDeserializationStrategy>)deserializer bytes:(MVIMKotlinByteArray *)bytes __attribute__((swift_name("decodeFromByteArray(deserializer:bytes:)")));
- (MVIMKotlinByteArray *)encodeToByteArraySerializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToByteArray(serializer:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextualSerializer")))
@interface MVIMContextualSerializer<T> : MVIMBase <MVIMKSerializer>
- (instancetype)initWithSerializableClass:(id<MVIMKotlinKClass>)serializableClass __attribute__((swift_name("init(serializableClass:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithSerializableClass:(id<MVIMKotlinKClass>)serializableClass fallbackSerializer:(id<MVIMKSerializer> _Nullable)fallbackSerializer typeArgumentsSerializers:(MVIMKotlinArray<id<MVIMKSerializer>> *)typeArgumentsSerializers __attribute__((swift_name("init(serializableClass:fallbackSerializer:typeArgumentsSerializers:)"))) __attribute__((objc_designated_initializer));
- (T)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(T)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicSerializer")))
@interface MVIMPolymorphicSerializer<T> : MVIMAbstractPolymorphicSerializer<T>
- (instancetype)initWithBaseClass:(id<MVIMKotlinKClass>)baseClass __attribute__((swift_name("init(baseClass:)"))) __attribute__((objc_designated_initializer));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SealedClassSerializer")))
@interface MVIMSealedClassSerializer<T> : MVIMAbstractPolymorphicSerializer<T>
- (instancetype)initWithSerialName:(NSString *)serialName baseClass:(id<MVIMKotlinKClass>)baseClass subclasses:(MVIMKotlinArray<id<MVIMKotlinKClass>> *)subclasses subclassSerializers:(MVIMKotlinArray<id<MVIMKSerializer>> *)subclassSerializers __attribute__((swift_name("init(serialName:baseClass:subclasses:subclassSerializers:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMDeserializationStrategy> _Nullable)findPolymorphicSerializerOrNullDecoder:(id<MVIMCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializerOrNull(decoder:klassName:)")));
- (id<MVIMSerializationStrategy> _Nullable)findPolymorphicSerializerOrNullEncoder:(id<MVIMEncoder>)encoder value:(T)value __attribute__((swift_name("findPolymorphicSerializerOrNull(encoder:value:)")));
@property (readonly) id<MVIMKotlinKClass> baseClass __attribute__((swift_name("baseClass")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("SerializationException")))
@interface MVIMSerializationException : MVIMKotlinIllegalArgumentException
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer));
@end;

__attribute__((swift_name("AbstractCollectionSerializer")))
@interface MVIMAbstractCollectionSerializer<Element, Collection, Builder> : MVIMBase <MVIMKSerializer>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (Builder _Nullable)builder __attribute__((swift_name("builder()")));
- (Collection _Nullable)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (Collection _Nullable)mergeDecoder:(id<MVIMDecoder>)decoder previous:(Collection _Nullable)previous __attribute__((swift_name("merge(decoder:previous:)")));
- (void)readAllDecoder:(id<MVIMCompositeDecoder>)decoder builder:(Builder _Nullable)builder startIndex:(int32_t)startIndex size:(int32_t)size __attribute__((swift_name("readAll(decoder:builder:startIndex:size:)")));
- (void)readElementDecoder:(id<MVIMCompositeDecoder>)decoder index:(int32_t)index builder:(Builder _Nullable)builder checkIndex:(BOOL)checkIndex __attribute__((swift_name("readElement(decoder:index:builder:checkIndex:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(Collection _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));
- (int32_t)builderSize:(Builder _Nullable)receiver __attribute__((swift_name("builderSize(_:)")));
- (void)checkCapacity:(Builder _Nullable)receiver size:(int32_t)size __attribute__((swift_name("checkCapacity(_:size:)")));
- (id<MVIMKotlinIterator>)collectionIterator:(Collection _Nullable)receiver __attribute__((swift_name("collectionIterator(_:)")));
- (int32_t)collectionSize:(Collection _Nullable)receiver __attribute__((swift_name("collectionSize(_:)")));
- (Builder _Nullable)toBuilder:(Collection _Nullable)receiver __attribute__((swift_name("toBuilder(_:)")));
- (Collection _Nullable)toResult:(Builder _Nullable)receiver __attribute__((swift_name("toResult(_:)")));
@end;

__attribute__((swift_name("GeneratedSerializer")))
@protocol MVIMGeneratedSerializer <MVIMKSerializer>
@required
- (MVIMKotlinArray<id<MVIMKSerializer>> *)childSerializers __attribute__((swift_name("childSerializers()")));
- (MVIMKotlinArray<id<MVIMKSerializer>> *)typeParametersSerializers __attribute__((swift_name("typeParametersSerializers()")));
@end;

__attribute__((swift_name("MapLikeSerializer")))
@interface MVIMMapLikeSerializer<Key, Value, Collection, Builder> : MVIMAbstractCollectionSerializer<id<MVIMKotlinMapEntry>, Collection, MVIMMutableDictionary<id, id> *>
- (instancetype)initWithKeySerializer:(id<MVIMKSerializer>)keySerializer valueSerializer:(id<MVIMKSerializer>)valueSerializer __attribute__((swift_name("init(keySerializer:valueSerializer:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (void)readAllDecoder:(id<MVIMCompositeDecoder>)decoder builder:(MVIMMutableDictionary<id, id> *)builder startIndex:(int32_t)startIndex size:(int32_t)size __attribute__((swift_name("readAll(decoder:builder:startIndex:size:)")));
- (void)readElementDecoder:(id<MVIMCompositeDecoder>)decoder index:(int32_t)index builder:(MVIMMutableDictionary<id, id> *)builder checkIndex:(BOOL)checkIndex __attribute__((swift_name("readElement(decoder:index:builder:checkIndex:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(Collection _Nullable)value __attribute__((swift_name("serialize(encoder:value:)")));
- (void)insertKeyValuePair:(MVIMMutableDictionary<id, id> *)receiver index:(int32_t)index key:(Key _Nullable)key value:(Value _Nullable)value __attribute__((swift_name("insertKeyValuePair(_:index:key:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@property (readonly) id<MVIMKSerializer> keySerializer __attribute__((swift_name("keySerializer")));
@property (readonly) id<MVIMKSerializer> valueSerializer __attribute__((swift_name("valueSerializer")));
@end;

__attribute__((swift_name("TaggedDecoder")))
@interface MVIMTaggedDecoder<Tag> : MVIMBase <MVIMDecoder, MVIMCompositeDecoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<MVIMCompositeDecoder>)beginStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)doCopyTagsToOther:(MVIMTaggedDecoder<Tag> *)other __attribute__((swift_name("doCopyTagsTo(other:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (BOOL)decodeBooleanElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (int8_t)decodeByteElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (unichar)decodeCharElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (double)decodeDoubleElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeEnumEnumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (float)decodeFloatElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<MVIMDecoder>)decodeInlineInlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("decodeInline(inlineDescriptor:)")));
- (id<MVIMDecoder>)decodeInlineElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int32_t)decodeIntElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));
- (int64_t)decodeLongElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));
- (MVIMKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableValue(deserializer:previousValue:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (int16_t)decodeShortElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
- (NSString *)decodeStringElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (BOOL)decodeTaggedBooleanTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedBoolean(tag:)")));
- (int8_t)decodeTaggedByteTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedByte(tag:)")));
- (unichar)decodeTaggedCharTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedChar(tag:)")));
- (double)decodeTaggedDoubleTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedDouble(tag:)")));
- (int32_t)decodeTaggedEnumTag:(Tag _Nullable)tag enumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeTaggedEnum(tag:enumDescriptor:)")));
- (float)decodeTaggedFloatTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedFloat(tag:)")));
- (id<MVIMDecoder>)decodeTaggedInlineTag:(Tag _Nullable)tag inlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("decodeTaggedInline(tag:inlineDescriptor:)")));
- (int32_t)decodeTaggedIntTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedInt(tag:)")));
- (int64_t)decodeTaggedLongTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedLong(tag:)")));
- (BOOL)decodeTaggedNotNullMarkTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedNotNullMark(tag:)")));
- (MVIMKotlinNothing * _Nullable)decodeTaggedNullTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedNull(tag:)")));
- (int16_t)decodeTaggedShortTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedShort(tag:)")));
- (NSString *)decodeTaggedStringTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedString(tag:)")));
- (id)decodeTaggedValueTag:(Tag _Nullable)tag __attribute__((swift_name("decodeTaggedValue(tag:)")));
- (void)endStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
- (Tag _Nullable)popTag __attribute__((swift_name("popTag()")));
- (void)pushTagName:(Tag _Nullable)name __attribute__((swift_name("pushTag(name:)")));
- (Tag _Nullable)getTag:(id<MVIMSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));
@property (readonly) Tag _Nullable currentTag __attribute__((swift_name("currentTag")));
@property (readonly) Tag _Nullable currentTagOrNull __attribute__((swift_name("currentTagOrNull")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("NamedValueDecoder")))
@interface MVIMNamedValueDecoder : MVIMTaggedDecoder<NSString *>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)composeNameParentName:(NSString *)parentName childName:(NSString *)childName __attribute__((swift_name("composeName(parentName:childName:)")));
- (NSString *)elementNameDesc:(id<MVIMSerialDescriptor>)desc index:(int32_t)index __attribute__((swift_name("elementName(desc:index:)")));
- (NSString *)nestedNestedName:(NSString *)nestedName __attribute__((swift_name("nested(nestedName:)")));
- (NSString *)getTag:(id<MVIMSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));
@end;

__attribute__((swift_name("TaggedEncoder")))
@interface MVIMTaggedEncoder<Tag> : MVIMBase <MVIMEncoder, MVIMCompositeEncoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<MVIMCompositeEncoder>)beginStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeBooleanElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeByteElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeCharElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeDoubleElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (void)encodeEnumEnumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (void)encodeFloatElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<MVIMEncoder>)encodeInlineInlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("encodeInline(inlineDescriptor:)")));
- (id<MVIMEncoder>)encodeInlineElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeIntElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));
- (void)encodeLongElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));
- (void)encodeNotNullMark __attribute__((swift_name("encodeNotNullMark()")));
- (void)encodeNull __attribute__((swift_name("encodeNull()")));
- (void)encodeNullableSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeShortElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
- (void)encodeStringElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)encodeTaggedBooleanTag:(Tag _Nullable)tag value:(BOOL)value __attribute__((swift_name("encodeTaggedBoolean(tag:value:)")));
- (void)encodeTaggedByteTag:(Tag _Nullable)tag value:(int8_t)value __attribute__((swift_name("encodeTaggedByte(tag:value:)")));
- (void)encodeTaggedCharTag:(Tag _Nullable)tag value:(unichar)value __attribute__((swift_name("encodeTaggedChar(tag:value:)")));
- (void)encodeTaggedDoubleTag:(Tag _Nullable)tag value:(double)value __attribute__((swift_name("encodeTaggedDouble(tag:value:)")));
- (void)encodeTaggedEnumTag:(Tag _Nullable)tag enumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor ordinal:(int32_t)ordinal __attribute__((swift_name("encodeTaggedEnum(tag:enumDescriptor:ordinal:)")));
- (void)encodeTaggedFloatTag:(Tag _Nullable)tag value:(float)value __attribute__((swift_name("encodeTaggedFloat(tag:value:)")));
- (id<MVIMEncoder>)encodeTaggedInlineTag:(Tag _Nullable)tag inlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("encodeTaggedInline(tag:inlineDescriptor:)")));
- (void)encodeTaggedIntTag:(Tag _Nullable)tag value:(int32_t)value __attribute__((swift_name("encodeTaggedInt(tag:value:)")));
- (void)encodeTaggedLongTag:(Tag _Nullable)tag value:(int64_t)value __attribute__((swift_name("encodeTaggedLong(tag:value:)")));
- (void)encodeTaggedNullTag:(Tag _Nullable)tag __attribute__((swift_name("encodeTaggedNull(tag:)")));
- (void)encodeTaggedShortTag:(Tag _Nullable)tag value:(int16_t)value __attribute__((swift_name("encodeTaggedShort(tag:value:)")));
- (void)encodeTaggedStringTag:(Tag _Nullable)tag value:(NSString *)value __attribute__((swift_name("encodeTaggedString(tag:value:)")));
- (void)encodeTaggedValueTag:(Tag _Nullable)tag value:(id)value __attribute__((swift_name("encodeTaggedValue(tag:value:)")));
- (void)endEncodeDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endEncode(descriptor:)")));
- (void)endStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
- (Tag _Nullable)popTag __attribute__((swift_name("popTag()")));
- (void)pushTagName:(Tag _Nullable)name __attribute__((swift_name("pushTag(name:)")));
- (Tag _Nullable)getTag:(id<MVIMSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));
@property (readonly) Tag _Nullable currentTag __attribute__((swift_name("currentTag")));
@property (readonly) Tag _Nullable currentTagOrNull __attribute__((swift_name("currentTagOrNull")));
@property (readonly) MVIMSerializersModule *serializersModule __attribute__((swift_name("serializersModule")));
@end;

__attribute__((swift_name("NamedValueEncoder")))
@interface MVIMNamedValueEncoder : MVIMTaggedEncoder<NSString *>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSString *)composeNameParentName:(NSString *)parentName childName:(NSString *)childName __attribute__((swift_name("composeName(parentName:childName:)")));
- (NSString *)elementNameDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("elementName(descriptor:index:)")));
- (NSString *)nestedNestedName:(NSString *)nestedName __attribute__((swift_name("nested(nestedName:)")));
- (NSString *)getTag:(id<MVIMSerialDescriptor>)receiver index:(int32_t)index __attribute__((swift_name("getTag(_:index:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicModuleBuilder")))
@interface MVIMPolymorphicModuleBuilder<__contravariant Base> : MVIMBase
- (void)defaultDefaultSerializerProvider:(id<MVIMDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultSerializerProvider __attribute__((swift_name("default(defaultSerializerProvider:)")));
- (void)subclassSubclass:(id<MVIMKotlinKClass>)subclass serializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("subclass(subclass:serializer:)")));
@end;

__attribute__((swift_name("SerializersModule")))
@interface MVIMSerializersModule : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)dumpToCollector:(id<MVIMSerializersModuleCollector>)collector __attribute__((swift_name("dumpTo(collector:)")));
- (id<MVIMKSerializer> _Nullable)getContextualKClass:(id<MVIMKotlinKClass>)kClass typeArgumentsSerializers:(NSArray<id<MVIMKSerializer>> *)typeArgumentsSerializers __attribute__((swift_name("getContextual(kClass:typeArgumentsSerializers:)")));
- (id<MVIMSerializationStrategy> _Nullable)getPolymorphicBaseClass:(id<MVIMKotlinKClass>)baseClass value:(id)value __attribute__((swift_name("getPolymorphic(baseClass:value:)")));
- (id<MVIMDeserializationStrategy> _Nullable)getPolymorphicBaseClass:(id<MVIMKotlinKClass>)baseClass serializedClassName:(NSString * _Nullable)serializedClassName __attribute__((swift_name("getPolymorphic(baseClass:serializedClassName:)")));
@end;

__attribute__((swift_name("SerializersModuleCollector")))
@protocol MVIMSerializersModuleCollector
@required
- (void)contextualKClass:(id<MVIMKotlinKClass>)kClass provider:(id<MVIMKSerializer> (^)(NSArray<id<MVIMKSerializer>> *))provider __attribute__((swift_name("contextual(kClass:provider:)")));
- (void)contextualKClass:(id<MVIMKotlinKClass>)kClass serializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("contextual(kClass:serializer:)")));
- (void)polymorphicBaseClass:(id<MVIMKotlinKClass>)baseClass actualClass:(id<MVIMKotlinKClass>)actualClass actualSerializer:(id<MVIMKSerializer>)actualSerializer __attribute__((swift_name("polymorphic(baseClass:actualClass:actualSerializer:)")));
- (void)polymorphicDefaultBaseClass:(id<MVIMKotlinKClass>)baseClass defaultSerializerProvider:(id<MVIMDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultSerializerProvider __attribute__((swift_name("polymorphicDefault(baseClass:defaultSerializerProvider:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersModuleBuilder")))
@interface MVIMSerializersModuleBuilder : MVIMBase <MVIMSerializersModuleCollector>
- (void)contextualKClass:(id<MVIMKotlinKClass>)kClass provider:(id<MVIMKSerializer> (^)(NSArray<id<MVIMKSerializer>> *))provider __attribute__((swift_name("contextual(kClass:provider:)")));
- (void)contextualKClass:(id<MVIMKotlinKClass>)kClass serializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("contextual(kClass:serializer:)")));
- (void)includeModule:(MVIMSerializersModule *)module __attribute__((swift_name("include(module:)")));
- (void)polymorphicBaseClass:(id<MVIMKotlinKClass>)baseClass actualClass:(id<MVIMKotlinKClass>)actualClass actualSerializer:(id<MVIMKSerializer>)actualSerializer __attribute__((swift_name("polymorphic(baseClass:actualClass:actualSerializer:)")));
- (void)polymorphicDefaultBaseClass:(id<MVIMKotlinKClass>)baseClass defaultSerializerProvider:(id<MVIMDeserializationStrategy> _Nullable (^)(NSString * _Nullable))defaultSerializerProvider __attribute__((swift_name("polymorphicDefault(baseClass:defaultSerializerProvider:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClassSerialDescriptorBuilder")))
@interface MVIMClassSerialDescriptorBuilder : MVIMBase
- (void)elementElementName:(NSString *)elementName descriptor:(id<MVIMSerialDescriptor>)descriptor annotations:(NSArray<id<MVIMKotlinAnnotation>> *)annotations isOptional:(BOOL)isOptional __attribute__((swift_name("element(elementName:descriptor:annotations:isOptional:)")));
@property NSArray<id<MVIMKotlinAnnotation>> *annotations __attribute__((swift_name("annotations")));
@property BOOL isNullable __attribute__((swift_name("isNullable")));
@property (readonly) NSString *serialName __attribute__((swift_name("serialName")));
@end;

__attribute__((swift_name("SerialKind")))
@interface MVIMSerialKind : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

__attribute__((swift_name("PolymorphicKind")))
@interface MVIMPolymorphicKind : MVIMSerialKind
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicKind.OPEN")))
@interface MVIMPolymorphicKindOPEN : MVIMPolymorphicKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)oPEN __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PolymorphicKind.SEALED")))
@interface MVIMPolymorphicKindSEALED : MVIMPolymorphicKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)sEALED __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("PrimitiveKind")))
@interface MVIMPrimitiveKind : MVIMSerialKind
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.BOOLEAN")))
@interface MVIMPrimitiveKindBOOLEAN : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)bOOLEAN __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.BYTE")))
@interface MVIMPrimitiveKindBYTE : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)bYTE __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.CHAR")))
@interface MVIMPrimitiveKindCHAR : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)cHAR __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.DOUBLE")))
@interface MVIMPrimitiveKindDOUBLE : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)dOUBLE __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.FLOAT")))
@interface MVIMPrimitiveKindFLOAT : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)fLOAT __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.INT")))
@interface MVIMPrimitiveKindINT : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)iNT __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.LONG")))
@interface MVIMPrimitiveKindLONG : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)lONG __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.SHORT")))
@interface MVIMPrimitiveKindSHORT : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)sHORT __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PrimitiveKind.STRING")))
@interface MVIMPrimitiveKindSTRING : MVIMPrimitiveKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)sTRING __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("SerialDescriptor")))
@protocol MVIMSerialDescriptor
@required
- (NSArray<id<MVIMKotlinAnnotation>> *)getElementAnnotationsIndex:(int32_t)index __attribute__((swift_name("getElementAnnotations(index:)")));
- (id<MVIMSerialDescriptor>)getElementDescriptorIndex:(int32_t)index __attribute__((swift_name("getElementDescriptor(index:)")));
- (int32_t)getElementIndexName:(NSString *)name __attribute__((swift_name("getElementIndex(name:)")));
- (NSString *)getElementNameIndex:(int32_t)index __attribute__((swift_name("getElementName(index:)")));
- (BOOL)isElementOptionalIndex:(int32_t)index __attribute__((swift_name("isElementOptional(index:)")));
@property (readonly) NSArray<id<MVIMKotlinAnnotation>> *annotations __attribute__((swift_name("annotations")));
@property (readonly) int32_t elementsCount __attribute__((swift_name("elementsCount")));
@property (readonly) BOOL isInline __attribute__((swift_name("isInline")));
@property (readonly) BOOL isNullable __attribute__((swift_name("isNullable")));
@property (readonly) MVIMSerialKind *kind __attribute__((swift_name("kind")));
@property (readonly) NSString *serialName __attribute__((swift_name("serialName")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialKind.CONTEXTUAL")))
@interface MVIMSerialKindCONTEXTUAL : MVIMSerialKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)cONTEXTUAL __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialKind.ENUM")))
@interface MVIMSerialKindENUM : MVIMSerialKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)eNUM __attribute__((swift_name("init()")));
@end;

__attribute__((swift_name("StructureKind")))
@interface MVIMStructureKind : MVIMSerialKind
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.CLASS")))
@interface MVIMStructureKindCLASS : MVIMStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)cLASS __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.LIST")))
@interface MVIMStructureKindLIST : MVIMStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)lIST __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.MAP")))
@interface MVIMStructureKindMAP : MVIMStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)mAP __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StructureKind.OBJECT")))
@interface MVIMStructureKindOBJECT : MVIMStructureKind
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
+ (instancetype)oBJECT __attribute__((swift_name("init()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LongAsStringSerializer")))
@interface MVIMLongAsStringSerializer : MVIMBase <MVIMKSerializer>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)longAsStringSerializer __attribute__((swift_name("init()")));
- (MVIMLong *)deserializeDecoder:(id<MVIMDecoder>)decoder __attribute__((swift_name("deserialize(decoder:)")));
- (void)serializeEncoder:(id<MVIMEncoder>)encoder value:(MVIMLong *)value __attribute__((swift_name("serialize(encoder:value:)")));
@property (readonly) id<MVIMSerialDescriptor> descriptor __attribute__((swift_name("descriptor")));
@end;

__attribute__((swift_name("AbstractDecoder")))
@interface MVIMAbstractDecoder : MVIMBase <MVIMDecoder, MVIMCompositeDecoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<MVIMCompositeDecoder>)beginStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (BOOL)decodeBoolean __attribute__((swift_name("decodeBoolean()")));
- (BOOL)decodeBooleanElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeBooleanElement(descriptor:index:)")));
- (int8_t)decodeByte __attribute__((swift_name("decodeByte()")));
- (int8_t)decodeByteElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeByteElement(descriptor:index:)")));
- (unichar)decodeChar __attribute__((swift_name("decodeChar()")));
- (unichar)decodeCharElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeCharElement(descriptor:index:)")));
- (double)decodeDouble __attribute__((swift_name("decodeDouble()")));
- (double)decodeDoubleElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeDoubleElement(descriptor:index:)")));
- (int32_t)decodeEnumEnumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor __attribute__((swift_name("decodeEnum(enumDescriptor:)")));
- (float)decodeFloat __attribute__((swift_name("decodeFloat()")));
- (float)decodeFloatElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeFloatElement(descriptor:index:)")));
- (id<MVIMDecoder>)decodeInlineInlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("decodeInline(inlineDescriptor:)")));
- (id<MVIMDecoder>)decodeInlineElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeInlineElement(descriptor:index:)")));
- (int32_t)decodeInt __attribute__((swift_name("decodeInt()")));
- (int32_t)decodeIntElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeIntElement(descriptor:index:)")));
- (int64_t)decodeLong __attribute__((swift_name("decodeLong()")));
- (int64_t)decodeLongElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeLongElement(descriptor:index:)")));
- (BOOL)decodeNotNullMark __attribute__((swift_name("decodeNotNullMark()")));
- (MVIMKotlinNothing * _Nullable)decodeNull __attribute__((swift_name("decodeNull()")));
- (id _Nullable)decodeNullableSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeNullableSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index deserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableElement(descriptor:index:deserializer:previousValue:)")));
- (id _Nullable)decodeSerializableValueDeserializer:(id<MVIMDeserializationStrategy>)deserializer previousValue:(id _Nullable)previousValue __attribute__((swift_name("decodeSerializableValue(deserializer:previousValue:)")));
- (int16_t)decodeShort __attribute__((swift_name("decodeShort()")));
- (int16_t)decodeShortElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeShortElement(descriptor:index:)")));
- (NSString *)decodeString __attribute__((swift_name("decodeString()")));
- (NSString *)decodeStringElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("decodeStringElement(descriptor:index:)")));
- (id)decodeValue __attribute__((swift_name("decodeValue()")));
- (void)endStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@end;

__attribute__((swift_name("AbstractEncoder")))
@interface MVIMAbstractEncoder : MVIMBase <MVIMEncoder, MVIMCompositeEncoder>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id<MVIMCompositeEncoder>)beginStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("beginStructure(descriptor:)")));
- (void)encodeBooleanValue:(BOOL)value __attribute__((swift_name("encodeBoolean(value:)")));
- (void)encodeBooleanElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(BOOL)value __attribute__((swift_name("encodeBooleanElement(descriptor:index:value:)")));
- (void)encodeByteValue:(int8_t)value __attribute__((swift_name("encodeByte(value:)")));
- (void)encodeByteElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int8_t)value __attribute__((swift_name("encodeByteElement(descriptor:index:value:)")));
- (void)encodeCharValue:(unichar)value __attribute__((swift_name("encodeChar(value:)")));
- (void)encodeCharElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(unichar)value __attribute__((swift_name("encodeCharElement(descriptor:index:value:)")));
- (void)encodeDoubleValue:(double)value __attribute__((swift_name("encodeDouble(value:)")));
- (void)encodeDoubleElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(double)value __attribute__((swift_name("encodeDoubleElement(descriptor:index:value:)")));
- (BOOL)encodeElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeElement(descriptor:index:)")));
- (void)encodeEnumEnumDescriptor:(id<MVIMSerialDescriptor>)enumDescriptor index:(int32_t)index __attribute__((swift_name("encodeEnum(enumDescriptor:index:)")));
- (void)encodeFloatValue:(float)value __attribute__((swift_name("encodeFloat(value:)")));
- (void)encodeFloatElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(float)value __attribute__((swift_name("encodeFloatElement(descriptor:index:value:)")));
- (id<MVIMEncoder>)encodeInlineInlineDescriptor:(id<MVIMSerialDescriptor>)inlineDescriptor __attribute__((swift_name("encodeInline(inlineDescriptor:)")));
- (id<MVIMEncoder>)encodeInlineElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index __attribute__((swift_name("encodeInlineElement(descriptor:index:)")));
- (void)encodeIntValue:(int32_t)value __attribute__((swift_name("encodeInt(value:)")));
- (void)encodeIntElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int32_t)value __attribute__((swift_name("encodeIntElement(descriptor:index:value:)")));
- (void)encodeLongValue:(int64_t)value __attribute__((swift_name("encodeLong(value:)")));
- (void)encodeLongElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int64_t)value __attribute__((swift_name("encodeLongElement(descriptor:index:value:)")));
- (void)encodeNull __attribute__((swift_name("encodeNull()")));
- (void)encodeNullableSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeNullableSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeSerializableElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeSerializableElement(descriptor:index:serializer:value:)")));
- (void)encodeShortValue:(int16_t)value __attribute__((swift_name("encodeShort(value:)")));
- (void)encodeShortElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(int16_t)value __attribute__((swift_name("encodeShortElement(descriptor:index:value:)")));
- (void)encodeStringValue:(NSString *)value __attribute__((swift_name("encodeString(value:)")));
- (void)encodeStringElementDescriptor:(id<MVIMSerialDescriptor>)descriptor index:(int32_t)index value:(NSString *)value __attribute__((swift_name("encodeStringElement(descriptor:index:value:)")));
- (void)encodeValueValue:(id)value __attribute__((swift_name("encodeValue(value:)")));
- (void)endStructureDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("endStructure(descriptor:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompositeDecoderCompanion")))
@interface MVIMCompositeDecoderCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int32_t DECODE_DONE __attribute__((swift_name("DECODE_DONE")));
@property (readonly) int32_t UNKNOWN_NAME __attribute__((swift_name("UNKNOWN_NAME")));
@end;

__attribute__((swift_name("Cursor")))
@protocol MVIMCursor
@required
- (NSString *)columnNameIndex:(int32_t)index __attribute__((swift_name("columnName(index:)")));
- (MVIMKotlinByteArray *)getBytesIndex:(int32_t)index __attribute__((swift_name("getBytes(index:)")));
- (double)getDoubleIndex_:(int32_t)index __attribute__((swift_name("getDouble(index_:)")));
- (int64_t)getLongIndex_:(int32_t)index __attribute__((swift_name("getLong(index_:)")));
- (NSString *)getStringIndex:(int32_t)index __attribute__((swift_name("getString(index:)")));
- (MVIMFieldType *)getTypeIndex:(int32_t)index __attribute__((swift_name("getType(index:)")));
- (BOOL)isNullIndex:(int32_t)index __attribute__((swift_name("isNull(index:)")));
- (BOOL)next __attribute__((swift_name("next()")));
@property (readonly) int32_t columnCount __attribute__((swift_name("columnCount")));
@property (readonly) NSDictionary<NSString *, MVIMInt *> *columnNames __attribute__((swift_name("columnNames")));
@property (readonly) id<MVIMStatement> statement __attribute__((swift_name("statement")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseConfiguration")))
@interface MVIMDatabaseConfiguration : MVIMBase
- (instancetype)initWithName:(NSString * _Nullable)name version:(int32_t)version create:(void (^)(id<MVIMDatabaseConnection>))create upgrade:(void (^)(id<MVIMDatabaseConnection>, MVIMInt *, MVIMInt *))upgrade inMemory:(BOOL)inMemory journalMode:(MVIMJournalMode *)journalMode extendedConfig:(MVIMDatabaseConfigurationExtended *)extendedConfig loggingConfig:(MVIMDatabaseConfigurationLogging *)loggingConfig lifecycleConfig:(MVIMDatabaseConfigurationLifecycle *)lifecycleConfig encryptionConfig:(MVIMDatabaseConfigurationEncryption *)encryptionConfig __attribute__((swift_name("init(name:version:create:upgrade:inMemory:journalMode:extendedConfig:loggingConfig:lifecycleConfig:encryptionConfig:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()")));
- (MVIMDatabaseConfigurationEncryption *)component10 __attribute__((swift_name("component10()")));
- (int32_t)component2 __attribute__((swift_name("component2()")));
- (void (^)(id<MVIMDatabaseConnection>))component3 __attribute__((swift_name("component3()")));
- (void (^)(id<MVIMDatabaseConnection>, MVIMInt *, MVIMInt *))component4 __attribute__((swift_name("component4()")));
- (BOOL)component5 __attribute__((swift_name("component5()")));
- (MVIMJournalMode *)component6 __attribute__((swift_name("component6()")));
- (MVIMDatabaseConfigurationExtended *)component7 __attribute__((swift_name("component7()")));
- (MVIMDatabaseConfigurationLogging *)component8 __attribute__((swift_name("component8()")));
- (MVIMDatabaseConfigurationLifecycle *)component9 __attribute__((swift_name("component9()")));
- (MVIMDatabaseConfiguration *)doCopyName:(NSString * _Nullable)name version:(int32_t)version create:(void (^)(id<MVIMDatabaseConnection>))create upgrade:(void (^)(id<MVIMDatabaseConnection>, MVIMInt *, MVIMInt *))upgrade inMemory:(BOOL)inMemory journalMode:(MVIMJournalMode *)journalMode extendedConfig:(MVIMDatabaseConfigurationExtended *)extendedConfig loggingConfig:(MVIMDatabaseConfigurationLogging *)loggingConfig lifecycleConfig:(MVIMDatabaseConfigurationLifecycle *)lifecycleConfig encryptionConfig:(MVIMDatabaseConfigurationEncryption *)encryptionConfig __attribute__((swift_name("doCopy(name:version:create:upgrade:inMemory:journalMode:extendedConfig:loggingConfig:lifecycleConfig:encryptionConfig:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) void (^create)(id<MVIMDatabaseConnection>) __attribute__((swift_name("create")));
@property (readonly) MVIMDatabaseConfigurationEncryption *encryptionConfig __attribute__((swift_name("encryptionConfig")));
@property (readonly) MVIMDatabaseConfigurationExtended *extendedConfig __attribute__((swift_name("extendedConfig")));
@property (readonly) BOOL inMemory __attribute__((swift_name("inMemory")));
@property (readonly) MVIMJournalMode *journalMode __attribute__((swift_name("journalMode")));
@property (readonly) MVIMDatabaseConfigurationLifecycle *lifecycleConfig __attribute__((swift_name("lifecycleConfig")));
@property (readonly) MVIMDatabaseConfigurationLogging *loggingConfig __attribute__((swift_name("loggingConfig")));
@property (readonly) NSString * _Nullable name __attribute__((swift_name("name")));
@property (readonly) void (^upgrade)(id<MVIMDatabaseConnection>, MVIMInt *, MVIMInt *) __attribute__((swift_name("upgrade")));
@property (readonly) int32_t version __attribute__((swift_name("version")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseConfiguration.Encryption")))
@interface MVIMDatabaseConfigurationEncryption : MVIMBase
- (instancetype)initWithKey:(NSString * _Nullable)key rekey:(NSString * _Nullable)rekey __attribute__((swift_name("init(key:rekey:)"))) __attribute__((objc_designated_initializer));
- (NSString * _Nullable)component1 __attribute__((swift_name("component1()")));
- (NSString * _Nullable)component2 __attribute__((swift_name("component2()")));
- (MVIMDatabaseConfigurationEncryption *)doCopyKey:(NSString * _Nullable)key rekey:(NSString * _Nullable)rekey __attribute__((swift_name("doCopy(key:rekey:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable key __attribute__((swift_name("key")));
@property (readonly) NSString * _Nullable rekey __attribute__((swift_name("rekey")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseConfiguration.Extended")))
@interface MVIMDatabaseConfigurationExtended : MVIMBase
- (instancetype)initWithForeignKeyConstraints:(BOOL)foreignKeyConstraints busyTimeout:(int32_t)busyTimeout pageSize:(MVIMInt * _Nullable)pageSize basePath:(NSString * _Nullable)basePath __attribute__((swift_name("init(foreignKeyConstraints:busyTimeout:pageSize:basePath:)"))) __attribute__((objc_designated_initializer));
- (BOOL)component1 __attribute__((swift_name("component1()")));
- (int32_t)component2 __attribute__((swift_name("component2()")));
- (MVIMInt * _Nullable)component3 __attribute__((swift_name("component3()")));
- (NSString * _Nullable)component4 __attribute__((swift_name("component4()")));
- (MVIMDatabaseConfigurationExtended *)doCopyForeignKeyConstraints:(BOOL)foreignKeyConstraints busyTimeout:(int32_t)busyTimeout pageSize:(MVIMInt * _Nullable)pageSize basePath:(NSString * _Nullable)basePath __attribute__((swift_name("doCopy(foreignKeyConstraints:busyTimeout:pageSize:basePath:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString * _Nullable basePath __attribute__((swift_name("basePath")));
@property (readonly) int32_t busyTimeout __attribute__((swift_name("busyTimeout")));
@property (readonly) BOOL foreignKeyConstraints __attribute__((swift_name("foreignKeyConstraints")));
@property (readonly) MVIMInt * _Nullable pageSize __attribute__((swift_name("pageSize")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseConfiguration.Lifecycle")))
@interface MVIMDatabaseConfigurationLifecycle : MVIMBase
- (instancetype)initWithOnCreateConnection:(void (^)(id<MVIMDatabaseConnection>))onCreateConnection onCloseConnection:(void (^)(id<MVIMDatabaseConnection>))onCloseConnection __attribute__((swift_name("init(onCreateConnection:onCloseConnection:)"))) __attribute__((objc_designated_initializer));
- (void (^)(id<MVIMDatabaseConnection>))component1 __attribute__((swift_name("component1()")));
- (void (^)(id<MVIMDatabaseConnection>))component2 __attribute__((swift_name("component2()")));
- (MVIMDatabaseConfigurationLifecycle *)doCopyOnCreateConnection:(void (^)(id<MVIMDatabaseConnection>))onCreateConnection onCloseConnection:(void (^)(id<MVIMDatabaseConnection>))onCloseConnection __attribute__((swift_name("doCopy(onCreateConnection:onCloseConnection:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) void (^onCloseConnection)(id<MVIMDatabaseConnection>) __attribute__((swift_name("onCloseConnection")));
@property (readonly) void (^onCreateConnection)(id<MVIMDatabaseConnection>) __attribute__((swift_name("onCreateConnection")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseConfiguration.Logging")))
@interface MVIMDatabaseConfigurationLogging : MVIMBase
- (instancetype)initWithLogger:(id<MVIMLogger_>)logger verboseDataCalls:(BOOL)verboseDataCalls __attribute__((swift_name("init(logger:verboseDataCalls:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMLogger_>)component1 __attribute__((swift_name("component1()")));
- (BOOL)component2 __attribute__((swift_name("component2()")));
- (MVIMDatabaseConfigurationLogging *)doCopyLogger:(id<MVIMLogger_>)logger verboseDataCalls:(BOOL)verboseDataCalls __attribute__((swift_name("doCopy(logger:verboseDataCalls:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMLogger_> logger __attribute__((swift_name("logger")));
@property (readonly) BOOL verboseDataCalls __attribute__((swift_name("verboseDataCalls")));
@end;

__attribute__((swift_name("DatabaseConnection")))
@protocol MVIMDatabaseConnection
@required
- (void)beginTransaction __attribute__((swift_name("beginTransaction()")));
- (void)close __attribute__((swift_name("close()")));
- (id<MVIMStatement>)createStatementSql:(NSString *)sql __attribute__((swift_name("createStatement(sql:)")));
- (void)endTransaction __attribute__((swift_name("endTransaction()")));
- (void)setTransactionSuccessful __attribute__((swift_name("setTransactionSuccessful()")));
@property (readonly) BOOL closed __attribute__((swift_name("closed")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseFileContext")))
@interface MVIMDatabaseFileContext : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)databaseFileContext __attribute__((swift_name("init()")));
- (NSString *)databasePathDatabaseName:(NSString *)databaseName datapathPath:(NSString * _Nullable)datapathPath __attribute__((swift_name("databasePath(databaseName:datapathPath:)")));
- (void)deleteDatabaseName:(NSString *)name basePath:(NSString * _Nullable)basePath __attribute__((swift_name("deleteDatabase(name:basePath:)")));
@end;

__attribute__((swift_name("DatabaseManager")))
@protocol MVIMDatabaseManager
@required
- (id<MVIMDatabaseConnection>)createMultiThreadedConnection __attribute__((swift_name("createMultiThreadedConnection()")));
- (id<MVIMDatabaseConnection>)createSingleThreadedConnection __attribute__((swift_name("createSingleThreadedConnection()")));
@property (readonly) MVIMDatabaseConfiguration *configuration __attribute__((swift_name("configuration")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FieldType")))
@interface MVIMFieldType : MVIMKotlinEnum<MVIMFieldType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMFieldType *typeInteger __attribute__((swift_name("typeInteger")));
@property (class, readonly) MVIMFieldType *typeFloat __attribute__((swift_name("typeFloat")));
@property (class, readonly) MVIMFieldType *typeBlob __attribute__((swift_name("typeBlob")));
@property (class, readonly) MVIMFieldType *typeNull __attribute__((swift_name("typeNull")));
@property (class, readonly) MVIMFieldType *typeText __attribute__((swift_name("typeText")));
+ (MVIMKotlinArray<MVIMFieldType *> *)values __attribute__((swift_name("values()")));
@property (readonly) int32_t nativeCode __attribute__((swift_name("nativeCode")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FieldType.Companion")))
@interface MVIMFieldTypeCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMFieldType *)forCodeNativeCode:(int32_t)nativeCode __attribute__((swift_name("forCode(nativeCode:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JournalMode")))
@interface MVIMJournalMode : MVIMKotlinEnum<MVIMJournalMode *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMJournalMode *delete_ __attribute__((swift_name("delete_")));
@property (class, readonly) MVIMJournalMode *wal __attribute__((swift_name("wal")));
+ (MVIMKotlinArray<MVIMJournalMode *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JournalMode.Companion")))
@interface MVIMJournalModeCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
- (MVIMJournalMode *)forStringS:(NSString *)s __attribute__((swift_name("forString(s:)")));
@end;

__attribute__((swift_name("Statement")))
@protocol MVIMStatement
@required
- (void)bindBlobIndex:(int32_t)index value:(MVIMKotlinByteArray *)value __attribute__((swift_name("bindBlob(index:value:)")));
- (void)bindDoubleIndex:(int32_t)index value:(double)value __attribute__((swift_name("bindDouble(index:value:)")));
- (void)bindLongIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("bindLong(index:value:)")));
- (void)bindNullIndex:(int32_t)index __attribute__((swift_name("bindNull(index:)")));
- (int32_t)bindParameterIndexParamName:(NSString *)paramName __attribute__((swift_name("bindParameterIndex(paramName:)")));
- (void)bindStringIndex:(int32_t)index value:(NSString *)value __attribute__((swift_name("bindString(index:value:)")));
- (void)clearBindings __attribute__((swift_name("clearBindings()")));
- (void)execute_ __attribute__((swift_name("execute_()")));
- (int64_t)executeInsert __attribute__((swift_name("executeInsert()")));
- (int32_t)executeUpdateDelete __attribute__((swift_name("executeUpdateDelete()")));
- (void)finalizeStatement __attribute__((swift_name("finalizeStatement()")));
- (id<MVIMCursor>)query __attribute__((swift_name("query()")));
- (void)resetStatement __attribute__((swift_name("resetStatement()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConcurrentDatabaseConnection")))
@interface MVIMConcurrentDatabaseConnection : MVIMBase <MVIMDatabaseConnection>
- (instancetype)initWithDelegateConnection:(id<MVIMDatabaseConnection>)delegateConnection __attribute__((swift_name("init(delegateConnection:)"))) __attribute__((objc_designated_initializer));
- (void)beginTransaction __attribute__((swift_name("beginTransaction()")));
- (void)close __attribute__((swift_name("close()")));
- (id<MVIMStatement>)createStatementSql:(NSString *)sql __attribute__((swift_name("createStatement(sql:)")));
- (void)endTransaction __attribute__((swift_name("endTransaction()")));
- (void)setTransactionSuccessful __attribute__((swift_name("setTransactionSuccessful()")));
@property (readonly) BOOL closed __attribute__((swift_name("closed")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConcurrentDatabaseConnection.ConcurrentCursor")))
@interface MVIMConcurrentDatabaseConnectionConcurrentCursor : MVIMBase <MVIMCursor>
- (instancetype)initWith:(MVIMConcurrentDatabaseConnection *)receiver delegateCursor:(id<MVIMCursor>)delegateCursor __attribute__((swift_name("init(_:delegateCursor:)"))) __attribute__((objc_designated_initializer));
- (NSString *)columnNameIndex:(int32_t)index __attribute__((swift_name("columnName(index:)")));
- (MVIMKotlinByteArray *)getBytesIndex:(int32_t)index __attribute__((swift_name("getBytes(index:)")));
- (double)getDoubleIndex_:(int32_t)index __attribute__((swift_name("getDouble(index_:)")));
- (int64_t)getLongIndex_:(int32_t)index __attribute__((swift_name("getLong(index_:)")));
- (NSString *)getStringIndex:(int32_t)index __attribute__((swift_name("getString(index:)")));
- (MVIMFieldType *)getTypeIndex:(int32_t)index __attribute__((swift_name("getType(index:)")));
- (BOOL)isNullIndex:(int32_t)index __attribute__((swift_name("isNull(index:)")));
- (BOOL)next __attribute__((swift_name("next()")));
@property (readonly) int32_t columnCount __attribute__((swift_name("columnCount")));
@property (readonly) NSDictionary<NSString *, MVIMInt *> *columnNames __attribute__((swift_name("columnNames")));
@property (readonly) id<MVIMStatement> statement __attribute__((swift_name("statement")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConcurrentDatabaseConnection.ConcurrentStatement")))
@interface MVIMConcurrentDatabaseConnectionConcurrentStatement : MVIMBase <MVIMStatement>
- (instancetype)initWith:(MVIMConcurrentDatabaseConnection *)receiver delegateStatement:(id<MVIMStatement>)delegateStatement __attribute__((swift_name("init(_:delegateStatement:)"))) __attribute__((objc_designated_initializer));
- (void)bindBlobIndex:(int32_t)index value:(MVIMKotlinByteArray *)value __attribute__((swift_name("bindBlob(index:value:)")));
- (void)bindDoubleIndex:(int32_t)index value:(double)value __attribute__((swift_name("bindDouble(index:value:)")));
- (void)bindLongIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("bindLong(index:value:)")));
- (void)bindNullIndex:(int32_t)index __attribute__((swift_name("bindNull(index:)")));
- (int32_t)bindParameterIndexParamName:(NSString *)paramName __attribute__((swift_name("bindParameterIndex(paramName:)")));
- (void)bindStringIndex:(int32_t)index value:(NSString *)value __attribute__((swift_name("bindString(index:value:)")));
- (void)clearBindings __attribute__((swift_name("clearBindings()")));
- (void)execute_ __attribute__((swift_name("execute_()")));
- (int64_t)executeInsert __attribute__((swift_name("executeInsert()")));
- (int32_t)executeUpdateDelete __attribute__((swift_name("executeUpdateDelete()")));
- (void)finalizeStatement __attribute__((swift_name("finalizeStatement()")));
- (id<MVIMCursor>)query __attribute__((swift_name("query()")));
- (void)resetStatement __attribute__((swift_name("resetStatement()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SingleThreadDatabaseConnection")))
@interface MVIMSingleThreadDatabaseConnection : MVIMBase <MVIMDatabaseConnection>
- (instancetype)initWithDelegateConnection:(id<MVIMDatabaseConnection>)delegateConnection __attribute__((swift_name("init(delegateConnection:)"))) __attribute__((objc_designated_initializer));
- (void)beginTransaction __attribute__((swift_name("beginTransaction()")));
- (void)close __attribute__((swift_name("close()")));
- (id<MVIMStatement>)createStatementSql:(NSString *)sql __attribute__((swift_name("createStatement(sql:)")));
- (void)endTransaction __attribute__((swift_name("endTransaction()")));
- (void)setTransactionSuccessful __attribute__((swift_name("setTransactionSuccessful()")));
@property (readonly) BOOL closed __attribute__((swift_name("closed")));
@end;

__attribute__((swift_name("SqliteStatement")))
@protocol MVIMSqliteStatement
@required
- (void)bindBlobIndex:(int32_t)index value:(MVIMKotlinByteArray *)value __attribute__((swift_name("bindBlob(index:value:)")));
- (void)bindDoubleIndex:(int32_t)index value:(double)value __attribute__((swift_name("bindDouble(index:value:)")));
- (void)bindLongIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("bindLong(index:value:)")));
- (void)bindNullIndex:(int32_t)index __attribute__((swift_name("bindNull(index:)")));
- (int32_t)bindParameterIndexParamName:(NSString *)paramName __attribute__((swift_name("bindParameterIndex(paramName:)")));
- (void)bindStringIndex:(int32_t)index value:(NSString *)value __attribute__((swift_name("bindString(index:value:)")));
- (void)clearBindings __attribute__((swift_name("clearBindings()")));
- (int32_t)columnCount_ __attribute__((swift_name("columnCount()")));
- (MVIMKotlinByteArray *)columnGetBlobColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetBlob(columnIndex:)")));
- (double)columnGetDoubleColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetDouble(columnIndex:)")));
- (int64_t)columnGetLongColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetLong(columnIndex:)")));
- (NSString *)columnGetStringColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetString(columnIndex:)")));
- (NSString *)columnNameColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnName(columnIndex:)")));
- (int32_t)columnTypeColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnType(columnIndex:)")));
- (void)execute_ __attribute__((swift_name("execute_()")));
- (int32_t)executeForChangedRowCount __attribute__((swift_name("executeForChangedRowCount()")));
- (int64_t)executeForLastInsertedRowId __attribute__((swift_name("executeForLastInsertedRowId()")));
- (int32_t)executeNonQuery __attribute__((swift_name("executeNonQuery()")));
- (void)finalizeStatement __attribute__((swift_name("finalizeStatement()")));
- (BOOL)isNullIndex:(int32_t)index __attribute__((swift_name("isNull(index:)")));
- (void)resetStatement __attribute__((swift_name("resetStatement()")));
- (BOOL)step __attribute__((swift_name("step()")));
- (void)traceLogCallbackMessage:(NSString *)message __attribute__((swift_name("traceLogCallback(message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ActualSqliteStatement")))
@interface MVIMActualSqliteStatement : MVIMBase <MVIMSqliteStatement>
- (instancetype)initWithDb:(MVIMSqliteDatabase *)db stmtPointer:(void *)stmtPointer __attribute__((swift_name("init(db:stmtPointer:)"))) __attribute__((objc_designated_initializer));
- (void)bindBlobIndex:(int32_t)index value:(MVIMKotlinByteArray *)value __attribute__((swift_name("bindBlob(index:value:)")));
- (void)bindDoubleIndex:(int32_t)index value:(double)value __attribute__((swift_name("bindDouble(index:value:)")));
- (void)bindLongIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("bindLong(index:value:)")));
- (void)bindNullIndex:(int32_t)index __attribute__((swift_name("bindNull(index:)")));
- (int32_t)bindParameterIndexParamName:(NSString *)paramName __attribute__((swift_name("bindParameterIndex(paramName:)")));
- (void)bindStringIndex:(int32_t)index value:(NSString *)value __attribute__((swift_name("bindString(index:value:)")));
- (void)clearBindings __attribute__((swift_name("clearBindings()")));
- (int32_t)columnCount_ __attribute__((swift_name("columnCount()")));
- (MVIMKotlinByteArray *)columnGetBlobColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetBlob(columnIndex:)")));
- (double)columnGetDoubleColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetDouble(columnIndex:)")));
- (int64_t)columnGetLongColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetLong(columnIndex:)")));
- (NSString *)columnGetStringColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetString(columnIndex:)")));
- (NSString *)columnNameColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnName(columnIndex:)")));
- (int32_t)columnTypeColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnType(columnIndex:)")));
- (void)execute_ __attribute__((swift_name("execute_()")));
- (int32_t)executeForChangedRowCount __attribute__((swift_name("executeForChangedRowCount()")));
- (int64_t)executeForLastInsertedRowId __attribute__((swift_name("executeForLastInsertedRowId()")));
- (int32_t)executeNonQuery __attribute__((swift_name("executeNonQuery()")));
- (void)finalizeStatement __attribute__((swift_name("finalizeStatement()")));
- (BOOL)isNullIndex:(int32_t)index __attribute__((swift_name("isNull(index:)")));
- (void)resetStatement __attribute__((swift_name("resetStatement()")));
- (BOOL)step __attribute__((swift_name("step()")));
- (void)traceLogCallbackMessage:(NSString *)message __attribute__((swift_name("traceLogCallback(message:)")));
@end;

__attribute__((swift_name("Logger___")))
@protocol MVIMLogger_
@required
- (void)eWriteMessage:(NSString *)message exception:(MVIMKotlinThrowable * _Nullable)exception __attribute__((swift_name("eWrite(message:exception:)")));
- (void)traceMessage:(NSString *)message __attribute__((swift_name("trace(message:)")));
- (void)vWriteMessage:(NSString *)message __attribute__((swift_name("vWrite(message:)")));
@property (readonly) BOOL eActive __attribute__((swift_name("eActive")));
@property (readonly) BOOL vActive __attribute__((swift_name("vActive")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OpenFlags")))
@interface MVIMOpenFlags : MVIMKotlinEnum<MVIMOpenFlags *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMOpenFlags *createIfNecessary __attribute__((swift_name("createIfNecessary")));
@property (class, readonly) MVIMOpenFlags *openReadonly __attribute__((swift_name("openReadonly")));
+ (MVIMKotlinArray<MVIMOpenFlags *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((swift_name("SQLiteException")))
@interface MVIMSQLiteException : MVIMKotlinException
- (instancetype)initWithMessage:(NSString *)message config:(MVIMSqliteDatabaseConfig *)config __attribute__((swift_name("init(message:config:)"))) __attribute__((objc_designated_initializer));
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
+ (instancetype)new __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message __attribute__((swift_name("init(message:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithMessage:(NSString * _Nullable)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(message:cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
- (instancetype)initWithCause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("init(cause:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SQLiteExceptionErrorCode")))
@interface MVIMSQLiteExceptionErrorCode : MVIMSQLiteException
- (instancetype)initWithMessage:(NSString *)message config:(MVIMSqliteDatabaseConfig *)config errorCode:(int32_t)errorCode __attribute__((swift_name("init(message:config:errorCode:)"))) __attribute__((objc_designated_initializer));
- (instancetype)initWithMessage:(NSString *)message config:(MVIMSqliteDatabaseConfig *)config __attribute__((swift_name("init(message:config:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (readonly) MVIMSqliteErrorType *errorType __attribute__((swift_name("errorType")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SqliteDatabase")))
@interface MVIMSqliteDatabase : MVIMBase
- (instancetype)initWithPath:(NSString *)path label:(NSString *)label logger:(id<MVIMLogger_>)logger verboseDataCalls:(BOOL)verboseDataCalls dbPointer:(void *)dbPointer __attribute__((swift_name("init(path:label:logger:verboseDataCalls:dbPointer:)"))) __attribute__((objc_designated_initializer));
- (void)close __attribute__((swift_name("close()")));
- (id<MVIMSqliteStatement>)prepareStatementSqlString:(NSString *)sqlString __attribute__((swift_name("prepareStatement(sqlString:)")));
@property (readonly) MVIMSqliteDatabaseConfig *config __attribute__((swift_name("config")));
@property (readonly) void *dbPointer __attribute__((swift_name("dbPointer")));
@property (readonly) id<MVIMLogger_> logger __attribute__((swift_name("logger")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SqliteDatabaseConfig")))
@interface MVIMSqliteDatabaseConfig : MVIMBase
- (instancetype)initWithPath:(NSString *)path label:(NSString *)label __attribute__((swift_name("init(path:label:)"))) __attribute__((objc_designated_initializer));
- (NSString *)component1 __attribute__((swift_name("component1()")));
- (NSString *)component2 __attribute__((swift_name("component2()")));
- (MVIMSqliteDatabaseConfig *)doCopyPath:(NSString *)path label:(NSString *)label __attribute__((swift_name("doCopy(path:label:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) NSString *label __attribute__((swift_name("label")));
@property (readonly) NSString *path __attribute__((swift_name("path")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SqliteErrorType")))
@interface MVIMSqliteErrorType : MVIMKotlinEnum<MVIMSqliteErrorType *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMSqliteErrorType *sqliteOk __attribute__((swift_name("sqliteOk")));
@property (class, readonly) MVIMSqliteErrorType *sqliteError __attribute__((swift_name("sqliteError")));
@property (class, readonly) MVIMSqliteErrorType *sqliteInternal __attribute__((swift_name("sqliteInternal")));
@property (class, readonly) MVIMSqliteErrorType *sqlitePerm __attribute__((swift_name("sqlitePerm")));
@property (class, readonly) MVIMSqliteErrorType *sqliteAbort __attribute__((swift_name("sqliteAbort")));
@property (class, readonly) MVIMSqliteErrorType *sqliteBusy __attribute__((swift_name("sqliteBusy")));
@property (class, readonly) MVIMSqliteErrorType *sqliteLocked __attribute__((swift_name("sqliteLocked")));
@property (class, readonly) MVIMSqliteErrorType *sqliteNomem __attribute__((swift_name("sqliteNomem")));
@property (class, readonly) MVIMSqliteErrorType *sqliteReadonly __attribute__((swift_name("sqliteReadonly")));
@property (class, readonly) MVIMSqliteErrorType *sqliteInterrupt __attribute__((swift_name("sqliteInterrupt")));
@property (class, readonly) MVIMSqliteErrorType *sqliteIoerr __attribute__((swift_name("sqliteIoerr")));
@property (class, readonly) MVIMSqliteErrorType *sqliteCorrupt __attribute__((swift_name("sqliteCorrupt")));
@property (class, readonly) MVIMSqliteErrorType *sqliteNotfound __attribute__((swift_name("sqliteNotfound")));
@property (class, readonly) MVIMSqliteErrorType *sqliteFull __attribute__((swift_name("sqliteFull")));
@property (class, readonly) MVIMSqliteErrorType *sqliteCantopen __attribute__((swift_name("sqliteCantopen")));
@property (class, readonly) MVIMSqliteErrorType *sqliteProtocol __attribute__((swift_name("sqliteProtocol")));
@property (class, readonly) MVIMSqliteErrorType *sqliteEmpty __attribute__((swift_name("sqliteEmpty")));
@property (class, readonly) MVIMSqliteErrorType *sqliteSchema __attribute__((swift_name("sqliteSchema")));
@property (class, readonly) MVIMSqliteErrorType *sqliteToobig __attribute__((swift_name("sqliteToobig")));
@property (class, readonly) MVIMSqliteErrorType *sqliteConstraint __attribute__((swift_name("sqliteConstraint")));
@property (class, readonly) MVIMSqliteErrorType *sqliteMismatch __attribute__((swift_name("sqliteMismatch")));
@property (class, readonly) MVIMSqliteErrorType *sqliteMisuse __attribute__((swift_name("sqliteMisuse")));
@property (class, readonly) MVIMSqliteErrorType *sqliteNolfs __attribute__((swift_name("sqliteNolfs")));
@property (class, readonly) MVIMSqliteErrorType *sqliteAuth __attribute__((swift_name("sqliteAuth")));
@property (class, readonly) MVIMSqliteErrorType *sqliteFormat __attribute__((swift_name("sqliteFormat")));
@property (class, readonly) MVIMSqliteErrorType *sqliteRange __attribute__((swift_name("sqliteRange")));
@property (class, readonly) MVIMSqliteErrorType *sqliteNotadb __attribute__((swift_name("sqliteNotadb")));
@property (class, readonly) MVIMSqliteErrorType *sqliteNotice __attribute__((swift_name("sqliteNotice")));
@property (class, readonly) MVIMSqliteErrorType *sqliteWarning __attribute__((swift_name("sqliteWarning")));
@property (class, readonly) MVIMSqliteErrorType *sqliteRow __attribute__((swift_name("sqliteRow")));
@property (class, readonly) MVIMSqliteErrorType *sqliteDone __attribute__((swift_name("sqliteDone")));
+ (MVIMKotlinArray<MVIMSqliteErrorType *> *)values __attribute__((swift_name("values()")));
@property (readonly) int32_t code __attribute__((swift_name("code")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TracingSqliteStatement")))
@interface MVIMTracingSqliteStatement : MVIMBase <MVIMSqliteStatement>
- (instancetype)initWithLogger:(id<MVIMLogger_>)logger delegate:(id<MVIMSqliteStatement>)delegate __attribute__((swift_name("init(logger:delegate:)"))) __attribute__((objc_designated_initializer));
- (void)bindBlobIndex:(int32_t)index value:(MVIMKotlinByteArray *)value __attribute__((swift_name("bindBlob(index:value:)")));
- (void)bindDoubleIndex:(int32_t)index value:(double)value __attribute__((swift_name("bindDouble(index:value:)")));
- (void)bindLongIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("bindLong(index:value:)")));
- (void)bindNullIndex:(int32_t)index __attribute__((swift_name("bindNull(index:)")));
- (int32_t)bindParameterIndexParamName:(NSString *)paramName __attribute__((swift_name("bindParameterIndex(paramName:)")));
- (void)bindStringIndex:(int32_t)index value:(NSString *)value __attribute__((swift_name("bindString(index:value:)")));
- (void)clearBindings __attribute__((swift_name("clearBindings()")));
- (int32_t)columnCount_ __attribute__((swift_name("columnCount()")));
- (MVIMKotlinByteArray *)columnGetBlobColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetBlob(columnIndex:)")));
- (double)columnGetDoubleColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetDouble(columnIndex:)")));
- (int64_t)columnGetLongColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetLong(columnIndex:)")));
- (NSString *)columnGetStringColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnGetString(columnIndex:)")));
- (NSString *)columnNameColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnName(columnIndex:)")));
- (int32_t)columnTypeColumnIndex:(int32_t)columnIndex __attribute__((swift_name("columnType(columnIndex:)")));
- (void)execute_ __attribute__((swift_name("execute_()")));
- (int32_t)executeForChangedRowCount __attribute__((swift_name("executeForChangedRowCount()")));
- (int64_t)executeForLastInsertedRowId __attribute__((swift_name("executeForLastInsertedRowId()")));
- (int32_t)executeNonQuery __attribute__((swift_name("executeNonQuery()")));
- (void)finalizeStatement __attribute__((swift_name("finalizeStatement()")));
- (BOOL)isNullIndex:(int32_t)index __attribute__((swift_name("isNull(index:)")));
- (void)resetStatement __attribute__((swift_name("resetStatement()")));
- (BOOL)step __attribute__((swift_name("step()")));
- (void)traceLogCallbackMessage:(NSString *)message __attribute__((swift_name("traceLogCallback(message:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeCursor")))
@interface MVIMNativeCursor : MVIMBase <MVIMCursor>
- (instancetype)initWithStatement:(MVIMNativeStatement *)statement __attribute__((swift_name("init(statement:)"))) __attribute__((objc_designated_initializer));
- (NSString *)columnNameIndex:(int32_t)index __attribute__((swift_name("columnName(index:)")));
- (MVIMKotlinByteArray *)getBytesIndex:(int32_t)index __attribute__((swift_name("getBytes(index:)")));
- (double)getDoubleIndex_:(int32_t)index __attribute__((swift_name("getDouble(index_:)")));
- (int64_t)getLongIndex_:(int32_t)index __attribute__((swift_name("getLong(index_:)")));
- (NSString *)getStringIndex:(int32_t)index __attribute__((swift_name("getString(index:)")));
- (MVIMFieldType *)getTypeIndex:(int32_t)index __attribute__((swift_name("getType(index:)")));
- (BOOL)isNullIndex:(int32_t)index __attribute__((swift_name("isNull(index:)")));
- (BOOL)next __attribute__((swift_name("next()")));
@property (readonly) int32_t columnCount __attribute__((swift_name("columnCount")));
@property (readonly) NSDictionary<NSString *, MVIMInt *> *columnNames __attribute__((swift_name("columnNames")));
@property (readonly) MVIMNativeStatement *statement __attribute__((swift_name("statement")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeDatabaseConnection")))
@interface MVIMNativeDatabaseConnection : MVIMBase <MVIMDatabaseConnection>
- (instancetype)initWithDbManager:(MVIMNativeDatabaseManager *)dbManager sqliteDatabase:(MVIMSqliteDatabase *)sqliteDatabase __attribute__((swift_name("init(dbManager:sqliteDatabase:)"))) __attribute__((objc_designated_initializer));
- (void)beginTransaction __attribute__((swift_name("beginTransaction()")));
- (void)close __attribute__((swift_name("close()")));
- (id<MVIMStatement>)createStatementSql:(NSString *)sql __attribute__((swift_name("createStatement(sql:)")));
- (void)endTransaction __attribute__((swift_name("endTransaction()")));
- (void)migrateIfNeededCreate:(void (^)(id<MVIMDatabaseConnection>))create upgrade:(void (^)(id<MVIMDatabaseConnection>, MVIMInt *, MVIMInt *))upgrade version:(int32_t)version __attribute__((swift_name("migrateIfNeeded(create:upgrade:version:)")));
- (void)setTransactionSuccessful __attribute__((swift_name("setTransactionSuccessful()")));
@property (readonly) BOOL closed __attribute__((swift_name("closed")));
@property (readonly) MVIMNativeDatabaseManager *dbManager __attribute__((swift_name("dbManager")));
@property (readonly) MVIMSqliteDatabase *sqliteDatabase __attribute__((swift_name("sqliteDatabase")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeDatabaseConnection.Transaction")))
@interface MVIMNativeDatabaseConnectionTransaction : MVIMBase
- (instancetype)initWithSuccessful:(BOOL)successful __attribute__((swift_name("init(successful:)"))) __attribute__((objc_designated_initializer));
- (BOOL)component1 __attribute__((swift_name("component1()")));
- (MVIMNativeDatabaseConnectionTransaction *)doCopySuccessful:(BOOL)successful __attribute__((swift_name("doCopy(successful:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) BOOL successful __attribute__((swift_name("successful")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeDatabaseManager")))
@interface MVIMNativeDatabaseManager : MVIMBase <MVIMDatabaseManager>
- (instancetype)initWithPath:(NSString *)path configuration:(MVIMDatabaseConfiguration *)configuration __attribute__((swift_name("init(path:configuration:)"))) __attribute__((objc_designated_initializer));
- (id<MVIMDatabaseConnection>)createMultiThreadedConnection __attribute__((swift_name("createMultiThreadedConnection()")));
- (id<MVIMDatabaseConnection>)createSingleThreadedConnection __attribute__((swift_name("createSingleThreadedConnection()")));
@property (readonly) MVIMDatabaseConfiguration *configuration __attribute__((swift_name("configuration")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeStatement")))
@interface MVIMNativeStatement : MVIMBase <MVIMStatement>
- (instancetype)initWithConnection:(MVIMNativeDatabaseConnection *)connection sqliteStatement:(id<MVIMSqliteStatement>)sqliteStatement sql:(NSString *)sql __attribute__((swift_name("init(connection:sqliteStatement:sql:)"))) __attribute__((objc_designated_initializer));
- (void)bindBlobIndex:(int32_t)index value:(MVIMKotlinByteArray *)value __attribute__((swift_name("bindBlob(index:value:)")));
- (void)bindDoubleIndex:(int32_t)index value:(double)value __attribute__((swift_name("bindDouble(index:value:)")));
- (void)bindLongIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("bindLong(index:value:)")));
- (void)bindNullIndex:(int32_t)index __attribute__((swift_name("bindNull(index:)")));
- (int32_t)bindParameterIndexParamName:(NSString *)paramName __attribute__((swift_name("bindParameterIndex(paramName:)")));
- (void)bindStringIndex:(int32_t)index value:(NSString *)value __attribute__((swift_name("bindString(index:value:)")));
- (void)clearBindings __attribute__((swift_name("clearBindings()")));
- (void)execute_ __attribute__((swift_name("execute_()")));
- (int64_t)executeInsert __attribute__((swift_name("executeInsert()")));
- (int32_t)executeUpdateDelete __attribute__((swift_name("executeUpdateDelete()")));
- (void)finalizeStatement __attribute__((swift_name("finalizeStatement()")));
- (id<MVIMCursor>)query __attribute__((swift_name("query()")));
- (void)resetStatement __attribute__((swift_name("resetStatement()")));
@end;

@interface MVIMKoin (Extensions)
- (id)getObjCClass:(Class)objCClass parameter:(id)parameter __attribute__((swift_name("get(objCClass:parameter:)")));
- (id)getObjCClass:(Class)objCClass qualifier:(id<MVIMQualifier> _Nullable)qualifier __attribute__((swift_name("get(objCClass:qualifier:)")));
- (id)getObjCClass:(Class)objCClass qualifier:(id<MVIMQualifier> _Nullable)qualifier parameter:(id)parameter __attribute__((swift_name("get(objCClass:qualifier:parameter:)")));
@end;

@interface MVIMQuery (Extensions)
- (id<MVIMFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

@interface MVIMAtomic (Extensions)
- (id _Nullable)getValueThisRef:(id _Nullable)thisRef prop:(id<MVIMKotlinKProperty>)prop __attribute__((swift_name("getValue(thisRef:prop:)")));
- (void)setValueThisRef:(id _Nullable)thisRef prop:(id<MVIMKotlinKProperty>)prop value:(id _Nullable)value __attribute__((swift_name("setValue(thisRef:prop:value:)")));
@end;

@interface MVIMKotlinEnum (Extensions)
@property (readonly) id<MVIMQualifier> qualifier __attribute__((swift_name("qualifier")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinPair")))
@interface MVIMKotlinPair<__covariant A, __covariant B> : MVIMBase
- (instancetype)initWithFirst:(A _Nullable)first second:(B _Nullable)second __attribute__((swift_name("init(first:second:)"))) __attribute__((objc_designated_initializer));
- (A _Nullable)component1 __attribute__((swift_name("component1()")));
- (B _Nullable)component2 __attribute__((swift_name("component2()")));
- (MVIMKotlinPair<A, B> *)doCopyFirst:(A _Nullable)first second:(B _Nullable)second __attribute__((swift_name("doCopy(first:second:)")));
- (BOOL)equalsOther:(id _Nullable)other __attribute__((swift_name("equals(other:)")));
- (int32_t)hashCode __attribute__((swift_name("hashCode()")));
- (NSString *)toString __attribute__((swift_name("toString()")));
@property (readonly) A _Nullable first __attribute__((swift_name("first")));
@property (readonly) B _Nullable second __attribute__((swift_name("second")));
@end;

@interface MVIMKotlinPair (Extensions)
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)bind __attribute__((swift_name("bind()")));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)bindClazz:(id<MVIMKotlinKClass>)clazz __attribute__((swift_name("bind(clazz:)")));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)bindsClasses:(MVIMKotlinArray<id<MVIMKotlinKClass>> *)classes __attribute__((swift_name("binds(classes:)")));
- (MVIMKotlinPair<MVIMModule *, MVIMInstanceFactory<id> *> *)onCloseOnClose:(void (^)(id _Nullable))onClose __attribute__((swift_name("onClose(onClose:)")));
@end;

@interface MVIMInstant (Extensions)
- (int32_t)daysUntilOther:(MVIMInstant *)other timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("daysUntil(other:timeZone:)")));
- (MVIMInstant *)minusValue:(int32_t)value unit:(MVIMDateTimeUnit *)unit timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("minus(value:unit:timeZone:)")));
- (MVIMInstant *)minusValue:(int32_t)value unit:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(value:unit:)")));
- (MVIMInstant *)minusValue:(int64_t)value unit:(MVIMDateTimeUnit *)unit timeZone_:(MVIMTimeZone *)timeZone __attribute__((swift_name("minus(value:unit:timeZone_:)")));
- (MVIMInstant *)minusValue:(int64_t)value unit_:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(value:unit_:)")));
- (MVIMInstant *)minusPeriod:(MVIMDateTimePeriod *)period timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("minus(period:timeZone:)")));
- (MVIMInstant *)minusUnit:(MVIMDateTimeUnit *)unit timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("minus(unit:timeZone:)")));
- (MVIMInstant *)minusUnit:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(unit:)")));
- (int64_t)minusOther:(MVIMInstant *)other unit:(MVIMDateTimeUnit *)unit timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("minus(other:unit:timeZone:)")));
- (int64_t)minusOther:(MVIMInstant *)other unit:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("minus(other:unit:)")));
- (MVIMDateTimePeriod *)minusOther:(MVIMInstant *)other timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("minus(other:timeZone:)")));
- (int32_t)monthsUntilOther:(MVIMInstant *)other timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("monthsUntil(other:timeZone:)")));
- (MVIMZoneOffset *)offsetInTimeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("offsetIn(timeZone:)")));
- (MVIMDateTimePeriod *)periodUntilOther:(MVIMInstant *)other timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("periodUntil(other:timeZone:)")));
- (MVIMInstant *)plusValue:(int32_t)value unit:(MVIMDateTimeUnit *)unit timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("plus(value:unit:timeZone:)")));
- (MVIMInstant *)plusValue:(int32_t)value unit:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("plus(value:unit:)")));
- (MVIMInstant *)plusValue:(int64_t)value unit:(MVIMDateTimeUnit *)unit timeZone_:(MVIMTimeZone *)timeZone __attribute__((swift_name("plus(value:unit:timeZone_:)")));
- (MVIMInstant *)plusValue:(int64_t)value unit_:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("plus(value:unit_:)")));
- (MVIMInstant *)plusPeriod:(MVIMDateTimePeriod *)period timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("plus(period:timeZone:)")));
- (MVIMInstant *)plusUnit:(MVIMDateTimeUnit *)unit timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("plus(unit:timeZone:)")));
- (MVIMInstant *)plusUnit:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("plus(unit:)")));
- (MVIMLocalDateTime *)toLocalDateTimeTimeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("toLocalDateTime(timeZone:)")));
- (NSDate *)toNSDate __attribute__((swift_name("toNSDate()")));
- (int64_t)untilOther:(MVIMInstant *)other unit:(MVIMDateTimeUnit *)unit timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("until(other:unit:timeZone:)")));
- (int64_t)untilOther:(MVIMInstant *)other unit:(MVIMDateTimeUnitTimeBased *)unit __attribute__((swift_name("until(other:unit:)")));
- (int32_t)yearsUntilOther:(MVIMInstant *)other timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("yearsUntil(other:timeZone:)")));
@property (readonly) BOOL isDistantFuture __attribute__((swift_name("isDistantFuture")));
@property (readonly) BOOL isDistantPast __attribute__((swift_name("isDistantPast")));
@end;

@interface MVIMDayOfWeek (Extensions)
@property (readonly) int32_t isoDayNumber __attribute__((swift_name("isoDayNumber")));
@end;

@interface MVIMMonth (Extensions)
@property (readonly) int32_t number __attribute__((swift_name("number")));
@end;

@interface MVIMLocalDate (Extensions)
- (MVIMInstant *)atStartOfDayInTimeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("atStartOfDayIn(timeZone:)")));
- (MVIMLocalDateTime *)atTimeHour:(int32_t)hour minute:(int32_t)minute second:(int32_t)second nanosecond:(int32_t)nanosecond __attribute__((swift_name("atTime(hour:minute:second:nanosecond:)")));
- (int32_t)daysUntilOther:(MVIMLocalDate *)other __attribute__((swift_name("daysUntil(other:)")));
- (MVIMLocalDate *)minusValue:(int32_t)value unit:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("minus(value:unit:)")));
- (MVIMLocalDate *)minusValue:(int64_t)value unit_:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("minus(value:unit_:)")));
- (MVIMLocalDate *)minusPeriod:(MVIMDatePeriod *)period __attribute__((swift_name("minus(period:)")));
- (MVIMLocalDate *)minusUnit:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("minus(unit:)")));
- (MVIMDatePeriod *)minusOther:(MVIMLocalDate *)other __attribute__((swift_name("minus(other:)")));
- (int32_t)monthsUntilOther:(MVIMLocalDate *)other __attribute__((swift_name("monthsUntil(other:)")));
- (MVIMDatePeriod *)periodUntilOther:(MVIMLocalDate *)other __attribute__((swift_name("periodUntil(other:)")));
- (MVIMLocalDate *)plusValue:(int32_t)value unit:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("plus(value:unit:)")));
- (MVIMLocalDate *)plusValue:(int64_t)value unit_:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("plus(value:unit_:)")));
- (MVIMLocalDate *)plusPeriod:(MVIMDatePeriod *)period __attribute__((swift_name("plus(period:)")));
- (MVIMLocalDate *)plusUnit:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("plus(unit:)")));
- (NSDateComponents *)toNSDateComponents __attribute__((swift_name("toNSDateComponents()")));
- (int32_t)untilOther:(MVIMLocalDate *)other unit:(MVIMDateTimeUnitDateBased *)unit __attribute__((swift_name("until(other:unit:)")));
- (int32_t)yearsUntilOther:(MVIMLocalDate *)other __attribute__((swift_name("yearsUntil(other:)")));
@end;

@interface MVIMTimeZone (Extensions)
- (MVIMZoneOffset *)offsetAtInstant:(MVIMInstant *)instant __attribute__((swift_name("offsetAt(instant:)")));
- (NSTimeZone *)toNSTimeZone __attribute__((swift_name("toNSTimeZone()")));
@end;

@interface MVIMDatePeriod (Extensions)
- (MVIMDatePeriod *)plusOther:(MVIMDatePeriod *)other __attribute__((swift_name("plus(other:)")));
@end;

@interface MVIMDateTimePeriod (Extensions)
- (MVIMDateTimePeriod *)plusOther_:(MVIMDateTimePeriod *)other __attribute__((swift_name("plus(other_:)")));
@end;

@interface MVIMLocalDateTime (Extensions)
- (MVIMInstant *)toInstantTimeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("toInstant(timeZone:)")));
- (NSDateComponents *)toNSDateComponents __attribute__((swift_name("toNSDateComponents()")));
@end;

@interface MVIMHttpClientConfig (Extensions)
- (void)JsonBlock:(void (^)(MVIMJsonFeatureConfig *))block __attribute__((swift_name("Json(block:)")));
- (void)LoggingBlock:(void (^)(MVIMLoggingConfig *))block __attribute__((swift_name("Logging(block:)")));
- (void)BrowserUserAgent __attribute__((swift_name("BrowserUserAgent()")));
- (void)CharsetsBlock:(void (^)(MVIMHttpPlainTextConfig *))block __attribute__((swift_name("Charsets(block:)")));
- (void)CurlUserAgent __attribute__((swift_name("CurlUserAgent()")));
- (void)HttpResponseValidatorBlock:(void (^)(MVIMHttpCallValidatorConfig *))block __attribute__((swift_name("HttpResponseValidator(block:)")));
- (void)addDefaultResponseValidation __attribute__((swift_name("addDefaultResponseValidation()")));
- (void)defaultRequestBlock:(void (^)(MVIMHttpRequestBuilder *))block __attribute__((swift_name("defaultRequest(block:)")));
- (void)ResponseObserverBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("ResponseObserver(block:)")));
- (void)WebSocketsConfig:(void (^)(MVIMWebSocketsConfig *))config __attribute__((swift_name("WebSockets(config:)")));
@end;

@interface MVIMLoggerCompanion (Extensions)
@property (readonly) id<MVIMLogger> DEFAULT __attribute__((swift_name("DEFAULT")));
@property (readonly) id<MVIMLogger> EMPTY __attribute__((swift_name("EMPTY")));
@property (readonly) id<MVIMLogger> SIMPLE __attribute__((swift_name("SIMPLE")));
@end;

@interface MVIMHttpClient (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)callBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("call(builder:completionHandler:)"))) __attribute__((unavailable("Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(builder)] instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)callUrl:(MVIMUrl *)url block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("call(url:block:completionHandler:)"))) __attribute__((unavailable("Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(url, block)] instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)callUrlString:(NSString *)urlString block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("call(urlString:block:completionHandler:)"))) __attribute__((unavailable("Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(urlString, block)] instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)callBlock:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("call(block:completionHandler:)"))) __attribute__((unavailable("Unbound [HttpClientCall] is deprecated. Consider using [request<HttpResponse>(block)] in instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)deleteScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delete(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)getScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("get(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)headScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("head(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)optionsScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("options(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)patchScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("patch(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)postScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("post(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)putScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path body:(id)body block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("put(scheme:host:port:path:body:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestBuilder:(MVIMHttpRequestBuilder *)builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestBlock:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestUrl:(MVIMUrl *)url block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(url:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)requestUrlString:(NSString *)urlString block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("request(urlString:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormFormParameters:(id<MVIMParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormUrl:(NSString *)url formParameters:(id<MVIMParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(url:formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path formParameters:(id<MVIMParameters>)formParameters encodeInQuery:(BOOL)encodeInQuery block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitForm(scheme:host:port:path:formParameters:encodeInQuery:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path formData:(NSArray<MVIMPartData *> *)formData block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(scheme:host:port:path:formData:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataUrl:(NSString *)url formData:(NSArray<MVIMPartData *> *)formData block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(url:formData:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)submitFormWithBinaryDataFormData:(NSArray<MVIMPartData *> *)formData block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("submitFormWithBinaryData(formData:block:completionHandler:)")));
- (void)defaultTransformers __attribute__((swift_name("defaultTransformers()")));
- (id _Nullable)featureFeature:(id<MVIMHttpClientFeature>)feature __attribute__((swift_name("feature(feature:)")));
- (id)getFeature:(id<MVIMHttpClientFeature>)feature __attribute__((swift_name("get(feature:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)cookiesUrl:(MVIMUrl *)url completionHandler:(void (^)(NSArray<MVIMCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cookies(url:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)cookiesUrlString:(NSString *)urlString completionHandler:(void (^)(NSArray<MVIMCookie *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cookies(urlString:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketRequest:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketMethod:(MVIMHttpMethod *)method host:(NSString *)host port:(int32_t)port path:(NSString *)path request:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(method:host:port:path:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketUrlString:(NSString *)urlString request:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocket(urlString:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionBlock:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(MVIMDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)webSocketSessionMethod:(MVIMHttpMethod *)method host:(NSString *)host port:(int32_t)port path:(NSString *)path block:(void (^)(MVIMHttpRequestBuilder *))block completionHandler:(void (^)(MVIMDefaultClientWebSocketSession * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("webSocketSession(method:host:port:path:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsRequest:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("ws(request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsMethod:(MVIMHttpMethod *)method host:(NSString *)host port:(int32_t)port path:(NSString *)path request:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("ws(method:host:port:path:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wsUrlString:(NSString *)urlString request:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("ws(urlString:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssRequest:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("wss(request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssMethod:(MVIMHttpMethod *)method host:(NSString *)host port:(int32_t)port path:(NSString *)path request:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("wss(method:host:port:path:request:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)wssUrlString:(NSString *)urlString request:(void (^)(MVIMHttpRequestBuilder *))request block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("wss(urlString:request:block:completionHandler:)")));
@end;

@interface MVIMHttpClientCall (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler_:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)saveWithCompletionHandler:(void (^)(MVIMHttpClientCall * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("save(completionHandler:)")));
- (MVIMHttpClientCall *)wrapWithContentContent:(id<MVIMByteReadChannel>)content __attribute__((swift_name("wrapWithContent(content:)")));
- (MVIMHttpClientCall *)wrapWithContentContent:(id<MVIMByteReadChannel>)content shouldCloseOrigin:(BOOL)shouldCloseOrigin __attribute__((swift_name("wrapWithContent(content:shouldCloseOrigin:)"))) __attribute__((unavailable("Parameter [shouldCloseOrigin] is deprecated")));
@end;

@interface MVIMHttpResponse (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)receiveWithCompletionHandler_:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receive(completionHandler_:)")));
- (void)close_ __attribute__((swift_name("close_()"))) __attribute__((deprecated("Close is obsolete for [HttpResponse]")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardRemainingWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discardRemaining(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesWithCompletionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesCount:(int32_t)count completionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(count:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readTextFallbackCharset:(MVIMCharset * _Nullable)fallbackCharset completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readText(fallbackCharset:completionHandler:)")));
- (void)useBlock:(void (^)(void))block __attribute__((swift_name("use(block:)"))) __attribute__((deprecated("Use is obsolete for [HttpResponse]")));
@property (readonly) id<MVIMHttpRequest> request __attribute__((swift_name("request")));
@property (readonly) MVIMHttpResponse *response __attribute__((swift_name("response"))) __attribute__((deprecated("[response] is obsolete for [HttpResponse]")));
@end;

@interface MVIMDispatchers (Extensions)
- (MVIMCoroutineDispatcher *)clientDispatcherThreadCount:(int32_t)threadCount dispatcherName:(NSString *)dispatcherName __attribute__((swift_name("clientDispatcher(threadCount:dispatcherName:)")));
@end;

@interface MVIMKotlinThrowable (Extensions)
- (MVIMKotlinThrowable *)unwrapCancellationException __attribute__((swift_name("unwrapCancellationException()")));
- (void)printStack __attribute__((swift_name("printStack()")));
@property (readonly) MVIMKotlinThrowable * _Nullable rootCause __attribute__((swift_name("rootCause")));
@end;

@interface MVIMOutgoingContent (Extensions)
- (MVIMOutgoingContent *)wrapHeadersBlock:(id<MVIMHeaders> (^)(id<MVIMHeaders>))block __attribute__((swift_name("wrapHeaders(block:)")));
@property MVIMCachingOptions * _Nullable caching __attribute__((swift_name("caching")));
@end;

@interface MVIMHttpRequestBuilder (Extensions)
- (void)acceptContentType:(MVIMContentType *)contentType __attribute__((swift_name("accept(contentType:)")));
- (void)cookieName:(NSString *)name value:(NSString *)value maxAge:(int32_t)maxAge expires:(MVIMGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions __attribute__((swift_name("cookie(name:value:maxAge:expires:domain:path:secure:httpOnly:extensions:)")));
- (void)headerKey:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("header(key:value:)")));
- (MVIMHeadersBuilder *)headersBlock:(void (^)(MVIMHeadersBuilder *))block __attribute__((swift_name("headers(block:)")));
- (void)parameterKey:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("parameter(key:value:)")));
- (MVIMHttpRequestBuilder *)takeFromRequest:(id<MVIMHttpRequest>)request __attribute__((swift_name("takeFrom(request:)")));
- (MVIMHttpRequestBuilder *)takeFromRequest_:(MVIMHttpRequestData *)request __attribute__((swift_name("takeFrom(request_:)")));
- (void)urlBlock_:(void (^)(MVIMURLBuilder *))block __attribute__((swift_name("url(block_:)")));
- (void)urlUrl:(MVIMUrl *)url __attribute__((swift_name("url(url:)")));
- (void)urlUrlString:(NSString *)urlString __attribute__((swift_name("url(urlString:)")));
- (void)urlScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path block:(void (^)(MVIMURLBuilder *))block __attribute__((swift_name("url(scheme:host:port:path:block:)")));
- (void)onDownloadListener:(id<MVIMKotlinSuspendFunction2> _Nullable)listener __attribute__((swift_name("onDownload(listener:)")));
- (void)onUploadListener:(id<MVIMKotlinSuspendFunction2> _Nullable)listener __attribute__((swift_name("onUpload(listener:)")));
- (void)timeoutBlock:(void (^)(MVIMHttpTimeoutHttpTimeoutCapabilityConfiguration *))block __attribute__((swift_name("timeout(block:)")));
@property NSString *host __attribute__((swift_name("host")));
@property int32_t port __attribute__((swift_name("port")));
@property BOOL expectSuccess __attribute__((swift_name("expectSuccess")));
@end;

@interface MVIMHttpRequestBuilderCompanion (Extensions)
- (MVIMHttpRequestBuilder *)invokeBlock:(void (^)(MVIMURLBuilder *))block __attribute__((swift_name("invoke(block:)")));
- (MVIMHttpRequestBuilder *)invokeScheme:(NSString *)scheme host:(NSString *)host port:(int32_t)port path:(NSString *)path block:(void (^)(MVIMURLBuilder *))block __attribute__((swift_name("invoke(scheme:host:port:path:block:)")));
@end;

@interface MVIMHttpRequestData (Extensions)
- (BOOL)isUpgradeRequest __attribute__((swift_name("isUpgradeRequest()")));
@end;

@interface MVIMFormBuilder (Extensions)
- (void)appendKey:(NSString *)key headers:(id<MVIMHeaders>)headers size:(MVIMLong * _Nullable)size bodyBuilder:(void (^)(MVIMBytePacketBuilder *))bodyBuilder __attribute__((swift_name("append(key:headers:size:bodyBuilder:)")));
- (void)appendKey:(NSString *)key filename:(NSString *)filename contentType:(MVIMContentType * _Nullable)contentType size:(MVIMLong * _Nullable)size bodyBuilder:(void (^)(MVIMBytePacketBuilder *))bodyBuilder __attribute__((swift_name("append(key:filename:contentType:size:bodyBuilder:)")));
@end;

@interface MVIMHttpResponse_ (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)discardRemainingWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discardRemaining(completionHandler:)"))) __attribute__((unavailable("Unbound streaming [HttpResponse] is deprecated. Consider using [HttpStatement] instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesWithCompletionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(completionHandler:)"))) __attribute__((unavailable("Unbound streaming [HttpResponse] is deprecated. Consider using [HttpStatement] instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readBytesCount:(int32_t)count completionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readBytes(count:completionHandler:)"))) __attribute__((unavailable("Unbound streaming [HttpResponse] is deprecated. Consider using [HttpStatement] instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)readTextCharset:(MVIMCharset * _Nullable)charset completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readText(charset:completionHandler:)"))) __attribute__((unavailable("Unbound streaming [HttpResponse] is deprecated. Consider using [HttpStatement] instead.")));
@end;

@interface MVIMHttpStatement (Extensions)
- (void)useBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("use(block:)"))) __attribute__((unavailable("[HttpStatement] isn't closeable.")));
@property (readonly) MVIMHttpResponse *response __attribute__((swift_name("response"))) __attribute__((unavailable("Unbound [HttpResponse] is deprecated. Consider using [execute()] instead.")));
@end;

@interface MVIMProxyConfig (Extensions)
- (MVIMNetworkAddress *)resolveAddress __attribute__((swift_name("resolveAddress()")));
@property (readonly) MVIMProxyType *type __attribute__((swift_name("type")));
@end;

@interface MVIMProxyBuilder (Extensions)
- (MVIMProxyConfig *)httpUrlString:(NSString *)urlString __attribute__((swift_name("http(urlString:)")));
@end;

@interface MVIMHttpHeadersMap (Extensions)
- (void)dumpToIndent:(NSString *)indent out:(id<MVIMKotlinAppendable>)out __attribute__((swift_name("dumpTo(indent:out:)")));
@end;

@interface MVIMFrame (Extensions)
- (MVIMKotlinByteArray *)readBytes __attribute__((swift_name("readBytes()")));
@end;

@interface MVIMFrameClose (Extensions)
- (MVIMCloseReason * _Nullable)readReason __attribute__((swift_name("readReason()")));
@end;

@interface MVIMFrameText (Extensions)
- (NSString *)readText __attribute__((swift_name("readText()")));
@end;

@interface MVIMHttpStatusCodeCompanion (Extensions)
@property (readonly) MVIMHttpStatusCode *ExceptionFailed __attribute__((swift_name("ExceptionFailed"))) __attribute__((unavailable("Use ExpectationFailed instead")));
@end;

@interface MVIMURLBuilder (Extensions)
- (MVIMURLBuilder *)clone __attribute__((swift_name("clone()")));
- (MVIMURLBuilder *)pathComponentsComponents:(MVIMKotlinArray<NSString *> *)components __attribute__((swift_name("pathComponents(components:)")));
- (MVIMURLBuilder *)pathComponentsComponents_:(NSArray<NSString *> *)components __attribute__((swift_name("pathComponents(components_:)")));
- (MVIMURLBuilder *)takeFromUrl:(MVIMURLBuilder *)url __attribute__((swift_name("takeFrom(url:)")));
- (MVIMURLBuilder *)takeFromUrl_:(MVIMUrl *)url __attribute__((swift_name("takeFrom(url_:)")));
- (MVIMURLBuilder *)takeFromUrlString:(NSString *)urlString __attribute__((swift_name("takeFrom(urlString:)")));
@property (readonly) NSString *authority __attribute__((swift_name("authority")));
@end;

@interface MVIMUrl (Extensions)
@property (readonly) NSString *authority __attribute__((swift_name("authority")));
@property (readonly) NSString *fullPath __attribute__((swift_name("fullPath")));
@property (readonly) NSString *hostWithPort __attribute__((swift_name("hostWithPort")));
@end;

@interface MVIMStringValuesBuilder (Extensions)
- (void)appendName:(NSString *)name value_:(MVIMHeaderValueWithParameters *)value __attribute__((swift_name("append(name:value_:)")));
- (MVIMStringValuesBuilder *)appendAllBuilder:(MVIMStringValuesBuilder *)builder __attribute__((swift_name("appendAll(builder:)")));
- (void)appendFilteredSource:(id<MVIMStringValues>)source keepEmpty:(BOOL)keepEmpty predicate:(MVIMBoolean *(^)(NSString *, NSString *))predicate __attribute__((swift_name("appendFiltered(source:keepEmpty:predicate:)")));
@end;

@interface MVIMHeaderValueWithParameters (Extensions)
- (MVIMCharset * _Nullable)charset __attribute__((swift_name("charset()")));
@end;

@interface MVIMContentTypeCompanion (Extensions)
- (MVIMContentType *)defaultForFileExtensionExtension:(NSString *)extension __attribute__((swift_name("defaultForFileExtension(extension:)")));
- (MVIMContentType *)defaultForFilePathPath:(NSString *)path __attribute__((swift_name("defaultForFilePath(path:)")));
- (NSArray<MVIMContentType *> *)fromFileExtensionExt:(NSString *)ext __attribute__((swift_name("fromFileExtension(ext:)")));
- (NSArray<MVIMContentType *> *)fromFilePathPath:(NSString *)path __attribute__((swift_name("fromFilePath(path:)")));
@end;

@interface MVIMHeadersBuilder (Extensions)
- (void)etagEntityTag:(NSString *)entityTag __attribute__((swift_name("etag(entityTag:)")));
@end;

@interface MVIMContentType (Extensions)
- (NSArray<NSString *> *)fileExtensions __attribute__((swift_name("fileExtensions()")));
- (MVIMContentType *)withCharsetCharset:(MVIMCharset *)charset __attribute__((swift_name("withCharset(charset:)")));
@end;

@interface MVIMURLProtocol (Extensions)
- (BOOL)isSecure __attribute__((swift_name("isSecure()")));
- (BOOL)isWebsocket __attribute__((swift_name("isWebsocket()")));
@end;

@interface MVIMHttpStatusCode (Extensions)
- (BOOL)isSuccess __attribute__((swift_name("isSuccess()")));
@end;

@interface MVIMGMTDate (Extensions)
- (NSString *)toHttpDate __attribute__((swift_name("toHttpDate()")));
- (MVIMGMTDate *)minusMilliseconds:(int64_t)milliseconds __attribute__((swift_name("minus(milliseconds:)")));
- (MVIMGMTDate *)minusDuration:(int64_t)duration __attribute__((swift_name("minus(duration:)")));
- (MVIMGMTDate *)plusMilliseconds:(int64_t)milliseconds __attribute__((swift_name("plus(milliseconds:)")));
- (MVIMGMTDate *)plusDuration:(int64_t)duration __attribute__((swift_name("plus(duration:)")));
- (MVIMGMTDate *)truncateToSeconds __attribute__((swift_name("truncateToSeconds()")));
@end;

__attribute__((swift_name("KotlinLongProgression")))
@interface MVIMKotlinLongProgression : MVIMBase <MVIMKotlinIterable>
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (MVIMKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int64_t first __attribute__((swift_name("first")));
@property (readonly) int64_t last __attribute__((swift_name("last")));
@property (readonly, getter=step_) int64_t step __attribute__((swift_name("step")));
@end;

__attribute__((swift_name("KotlinClosedRange")))
@protocol MVIMKotlinClosedRange
@required
- (BOOL)containsValue:(id)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
@property (readonly) id endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) id start __attribute__((swift_name("start")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongRange")))
@interface MVIMKotlinLongRange : MVIMKotlinLongProgression <MVIMKotlinClosedRange>
- (instancetype)initWithStart:(int64_t)start endInclusive:(int64_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsValue:(MVIMLong *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMLong *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) MVIMLong *start __attribute__((swift_name("start")));
@end;

@interface MVIMKotlinLongRange (Extensions)
- (BOOL)containsOther:(MVIMKotlinLongRange *)other __attribute__((swift_name("contains(other:)")));
- (id<MVIMFlow>)asFlow __attribute__((swift_name("asFlow()")));
@property (readonly) int64_t length __attribute__((swift_name("length"))) __attribute__((unavailable("Not supported anymore.")));
@end;

@interface MVIMByteReadPacket (Extensions)
- (id<MVIMInput>)decodeBase64Bytes __attribute__((swift_name("decodeBase64Bytes()")));
- (NSString *)encodeBase64 __attribute__((swift_name("encodeBase64()")));
- (int32_t)readAvailableDst:(void *)dst limit:(int32_t)limit __attribute__((swift_name("readAvailable(dst:limit:)")));
- (int64_t)readAvailableDst:(void *)dst limit_:(int64_t)limit __attribute__((swift_name("readAvailable(dst:limit_:)")));
- (MVIMKotlinByteArray *)readBytesN:(int32_t)n __attribute__((swift_name("readBytes(n:)")));
- (int32_t)readFullyDst:(void *)dst size:(int32_t)size __attribute__((swift_name("readFully(dst:size:)")));
- (int64_t)readFullyDst:(void *)dst size_:(int64_t)size __attribute__((swift_name("readFully(dst:size_:)")));
- (NSString * _Nullable)readUTF8LineEstimate:(int32_t)estimate limit:(int32_t)limit __attribute__((swift_name("readUTF8Line(estimate:limit:)")));
- (void)_unsafeAppend_Builder:(MVIMBytePacketBuilder *)builder __attribute__((swift_name("_unsafeAppend_(builder:)")));
@property (readonly) BOOL isEmpty __attribute__((swift_name("isEmpty")));
@property (readonly) BOOL isNotEmpty __attribute__((swift_name("isNotEmpty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinByteArray")))
@interface MVIMKotlinByteArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(MVIMByte *(^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int8_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinByteIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface MVIMKotlinByteArray (Extensions)
- (NSString *)encodeBase64 __attribute__((swift_name("encodeBase64()")));
- (int16_t)readShortOffset:(int32_t)offset __attribute__((swift_name("readShort(offset:)")));
- (id _Nullable)useMemoryOffset:(int32_t)offset length:(int32_t)length block:(id _Nullable (^)(MVIMMemory *))block __attribute__((swift_name("useMemory(offset:length:block:)")));
@end;

@interface MVIMLock (Extensions)
- (id _Nullable)withLockBlock:(id _Nullable (^)(void))block __attribute__((swift_name("withLock(block:)")));
@end;

@interface MVIMNetworkAddress (Extensions)
@property (readonly) NSString *hostname_ __attribute__((swift_name("hostname_")));
@property (readonly) int32_t port_ __attribute__((swift_name("port_")));
@end;

@interface MVIMPipeline (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)executeContext:(id)context completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("execute(context:completionHandler:)")));
- (void)interceptPhase:(MVIMPipelinePhase *)phase block_:(id<MVIMKotlinSuspendFunction2>)block __attribute__((swift_name("intercept(phase:block_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinAtomicLong")))
@interface MVIMKotlinAtomicLong : MVIMBase
- (instancetype)initWithValue_:(int64_t)value_ __attribute__((swift_name("init(value_:)"))) __attribute__((objc_designated_initializer));
- (int64_t)addAndGetDelta:(int32_t)delta __attribute__((swift_name("addAndGet(delta:)")));
- (int64_t)addAndGetDelta_:(int64_t)delta __attribute__((swift_name("addAndGet(delta_:)")));
- (BOOL)compareAndSetExpected:(int64_t)expected new:(int64_t)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (int64_t)compareAndSwapExpected:(int64_t)expected new:(int64_t)new_ __attribute__((swift_name("compareAndSwap(expected:new:)")));
- (void)decrement __attribute__((swift_name("decrement()")));
- (void)increment __attribute__((swift_name("increment()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property int64_t value __attribute__((swift_name("value")));
@end;

@interface MVIMKotlinAtomicLong (Extensions)
- (void)loopAction:(void (^)(MVIMLong *))action __attribute__((swift_name("loop(action:)")));
- (void)updateFunction:(MVIMLong *(^)(MVIMLong *))function __attribute__((swift_name("update(function:)")));
- (int64_t)updateAndGetFunction:(MVIMLong *(^)(MVIMLong *))function __attribute__((swift_name("updateAndGet(function:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinAtomicReference")))
@interface MVIMKotlinAtomicReference<T> : MVIMBase
- (instancetype)initWithValue:(T _Nullable)value __attribute__((swift_name("init(value:)"))) __attribute__((objc_designated_initializer));
- (BOOL)compareAndSetExpected:(T _Nullable)expected new:(T _Nullable)new_ __attribute__((swift_name("compareAndSet(expected:new:)")));
- (T _Nullable)compareAndSwapExpected:(T _Nullable)expected new:(T _Nullable)new_ __attribute__((swift_name("compareAndSwap(expected:new:)")));
- (NSString *)description __attribute__((swift_name("description()")));
@property T _Nullable value __attribute__((swift_name("value")));
@end;

@interface MVIMKotlinAtomicReference (Extensions)
- (void)loopAction:(void (^)(id _Nullable))action __attribute__((swift_name("loop(action:)")));
@end;

@interface MVIMByteChannelSequentialBase (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)doCopyToDst:(MVIMByteChannelSequentialBase *)dst limit:(int64_t)limit completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyTo(dst:limit:completionHandler:)"))) __attribute__((unavailable("This is going to become internal. Use ByteReadChannel receiver instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)joinToDst:(MVIMByteChannelSequentialBase *)dst closeOnEnd:(BOOL)closeOnEnd completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("joinTo(dst:closeOnEnd:completionHandler:)"))) __attribute__((unavailable("This is going to become internal. Use ByteReadChannel receiver instead.")));
@end;

@interface MVIMMemory (Extensions)
- (void)doCopyToDestination:(MVIMKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("doCopyTo(destination:offset:length:)")));
- (void)doCopyToDestination:(MVIMKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset__:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset__:)")));
- (void)doCopyToDestination:(MVIMKotlinByteArray *)destination offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("doCopyTo(destination:offset:length_:)")));
- (void)doCopyToDestination:(MVIMKotlinByteArray *)destination offset:(int64_t)offset length:(int32_t)length destinationOffset___:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset___:)")));
- (void)doCopyToDestination:(void *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset____:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset____:)")));
- (void)doCopyToDestination:(void *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_____:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(destination:offset:length:destinationOffset_____:)")));
- (void)fillOffset:(int32_t)offset count:(int32_t)count value:(int8_t)value __attribute__((swift_name("fill(offset:count:value:)")));
- (void)fillOffset:(int64_t)offset count:(int64_t)count value_:(int8_t)value __attribute__((swift_name("fill(offset:count:value_:)")));
- (int8_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (int8_t)getIndex_:(int64_t)index __attribute__((swift_name("get(index_:)")));
- (void)loadByteArrayOffset:(int32_t)offset destination:(MVIMKotlinByteArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadByteArray(offset:destination:destinationOffset:count:)")));
- (void)loadByteArrayOffset:(int64_t)offset destination:(MVIMKotlinByteArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadByteArray(offset:destination:destinationOffset:count_:)")));
- (void)loadDoubleArrayOffset:(int32_t)offset destination:(MVIMKotlinDoubleArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadDoubleArray(offset:destination:destinationOffset:count:)")));
- (void)loadDoubleArrayOffset:(int64_t)offset destination:(MVIMKotlinDoubleArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadDoubleArray(offset:destination:destinationOffset:count_:)")));
- (double)loadDoubleAtOffset:(int32_t)offset __attribute__((swift_name("loadDoubleAt(offset:)")));
- (double)loadDoubleAtOffset_:(int64_t)offset __attribute__((swift_name("loadDoubleAt(offset_:)")));
- (void)loadFloatArrayOffset:(int32_t)offset destination:(MVIMKotlinFloatArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadFloatArray(offset:destination:destinationOffset:count:)")));
- (void)loadFloatArrayOffset:(int64_t)offset destination:(MVIMKotlinFloatArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadFloatArray(offset:destination:destinationOffset:count_:)")));
- (float)loadFloatAtOffset:(int32_t)offset __attribute__((swift_name("loadFloatAt(offset:)")));
- (float)loadFloatAtOffset_:(int64_t)offset __attribute__((swift_name("loadFloatAt(offset_:)")));
- (void)loadIntArrayOffset:(int32_t)offset destination:(MVIMKotlinIntArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadIntArray(offset:destination:destinationOffset:count:)")));
- (void)loadIntArrayOffset:(int64_t)offset destination:(MVIMKotlinIntArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadIntArray(offset:destination:destinationOffset:count_:)")));
- (int32_t)loadIntAtOffset:(int32_t)offset __attribute__((swift_name("loadIntAt(offset:)")));
- (int32_t)loadIntAtOffset_:(int64_t)offset __attribute__((swift_name("loadIntAt(offset_:)")));
- (void)loadLongArrayOffset:(int32_t)offset destination:(MVIMKotlinLongArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadLongArray(offset:destination:destinationOffset:count:)")));
- (void)loadLongArrayOffset:(int64_t)offset destination:(MVIMKotlinLongArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadLongArray(offset:destination:destinationOffset:count_:)")));
- (int64_t)loadLongAtOffset:(int32_t)offset __attribute__((swift_name("loadLongAt(offset:)")));
- (int64_t)loadLongAtOffset_:(int64_t)offset __attribute__((swift_name("loadLongAt(offset_:)")));
- (void)loadShortArrayOffset:(int32_t)offset destination:(MVIMKotlinShortArray *)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadShortArray(offset:destination:destinationOffset:count:)")));
- (void)loadShortArrayOffset:(int64_t)offset destination:(MVIMKotlinShortArray *)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadShortArray(offset:destination:destinationOffset:count_:)")));
- (int16_t)loadShortAtOffset:(int32_t)offset __attribute__((swift_name("loadShortAt(offset:)")));
- (int16_t)loadShortAtOffset_:(int64_t)offset __attribute__((swift_name("loadShortAt(offset_:)")));
- (void)loadUByteArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadUByteArray(offset:destination:destinationOffset:count:)")));
- (void)loadUByteArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadUByteArray(offset:destination:destinationOffset:count_:)")));
- (void)loadUIntArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadUIntArray(offset:destination:destinationOffset:count:)")));
- (void)loadUIntArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadUIntArray(offset:destination:destinationOffset:count_:)")));
- (uint32_t)loadUIntAtOffset:(int32_t)offset __attribute__((swift_name("loadUIntAt(offset:)")));
- (uint32_t)loadUIntAtOffset_:(int64_t)offset __attribute__((swift_name("loadUIntAt(offset_:)")));
- (void)loadULongArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadULongArray(offset:destination:destinationOffset:count:)")));
- (void)loadULongArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadULongArray(offset:destination:destinationOffset:count_:)")));
- (uint64_t)loadULongAtOffset:(int32_t)offset __attribute__((swift_name("loadULongAt(offset:)")));
- (uint64_t)loadULongAtOffset_:(int64_t)offset __attribute__((swift_name("loadULongAt(offset_:)")));
- (void)loadUShortArrayOffset:(int32_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count:(int32_t)count __attribute__((swift_name("loadUShortArray(offset:destination:destinationOffset:count:)")));
- (void)loadUShortArrayOffset:(int64_t)offset destination:(id)destination destinationOffset:(int32_t)destinationOffset count_:(int32_t)count __attribute__((swift_name("loadUShortArray(offset:destination:destinationOffset:count_:)")));
- (uint16_t)loadUShortAtOffset:(int32_t)offset __attribute__((swift_name("loadUShortAt(offset:)")));
- (uint16_t)loadUShortAtOffset_:(int64_t)offset __attribute__((swift_name("loadUShortAt(offset_:)")));
- (void)setIndex:(int32_t)index value:(int8_t)value __attribute__((swift_name("set(index:value:)")));
- (void)setIndex:(int64_t)index value_:(int8_t)value __attribute__((swift_name("set(index:value_:)")));
- (void)storeAtIndex:(int32_t)index value__:(uint8_t)value __attribute__((swift_name("storeAt(index:value__:)")));
- (void)storeAtIndex:(int64_t)index value___:(uint8_t)value __attribute__((swift_name("storeAt(index:value___:)")));
- (void)storeByteArrayOffset:(int32_t)offset source:(MVIMKotlinByteArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeByteArray(offset:source:sourceOffset:count:)")));
- (void)storeByteArrayOffset:(int64_t)offset source:(MVIMKotlinByteArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeByteArray(offset:source:sourceOffset:count_:)")));
- (void)storeDoubleArrayOffset:(int32_t)offset source:(MVIMKotlinDoubleArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeDoubleArray(offset:source:sourceOffset:count:)")));
- (void)storeDoubleArrayOffset:(int64_t)offset source:(MVIMKotlinDoubleArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeDoubleArray(offset:source:sourceOffset:count_:)")));
- (void)storeDoubleAtOffset:(int32_t)offset value:(double)value __attribute__((swift_name("storeDoubleAt(offset:value:)")));
- (void)storeDoubleAtOffset:(int64_t)offset value_:(double)value __attribute__((swift_name("storeDoubleAt(offset:value_:)")));
- (void)storeFloatArrayOffset:(int32_t)offset source:(MVIMKotlinFloatArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeFloatArray(offset:source:sourceOffset:count:)")));
- (void)storeFloatArrayOffset:(int64_t)offset source:(MVIMKotlinFloatArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeFloatArray(offset:source:sourceOffset:count_:)")));
- (void)storeFloatAtOffset:(int32_t)offset value:(float)value __attribute__((swift_name("storeFloatAt(offset:value:)")));
- (void)storeFloatAtOffset:(int64_t)offset value_:(float)value __attribute__((swift_name("storeFloatAt(offset:value_:)")));
- (void)storeIntArrayOffset:(int32_t)offset source:(MVIMKotlinIntArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeIntArray(offset:source:sourceOffset:count:)")));
- (void)storeIntArrayOffset:(int64_t)offset source:(MVIMKotlinIntArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeIntArray(offset:source:sourceOffset:count_:)")));
- (void)storeIntAtOffset:(int32_t)offset value:(int32_t)value __attribute__((swift_name("storeIntAt(offset:value:)")));
- (void)storeIntAtOffset:(int64_t)offset value_:(int32_t)value __attribute__((swift_name("storeIntAt(offset:value_:)")));
- (void)storeLongArrayOffset:(int32_t)offset source:(MVIMKotlinLongArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeLongArray(offset:source:sourceOffset:count:)")));
- (void)storeLongArrayOffset:(int64_t)offset source:(MVIMKotlinLongArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeLongArray(offset:source:sourceOffset:count_:)")));
- (void)storeLongAtOffset:(int32_t)offset value:(int64_t)value __attribute__((swift_name("storeLongAt(offset:value:)")));
- (void)storeLongAtOffset:(int64_t)offset value_:(int64_t)value __attribute__((swift_name("storeLongAt(offset:value_:)")));
- (void)storeShortArrayOffset:(int32_t)offset source:(MVIMKotlinShortArray *)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeShortArray(offset:source:sourceOffset:count:)")));
- (void)storeShortArrayOffset:(int64_t)offset source:(MVIMKotlinShortArray *)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeShortArray(offset:source:sourceOffset:count_:)")));
- (void)storeShortAtOffset:(int32_t)offset value:(int16_t)value __attribute__((swift_name("storeShortAt(offset:value:)")));
- (void)storeShortAtOffset:(int64_t)offset value_:(int16_t)value __attribute__((swift_name("storeShortAt(offset:value_:)")));
- (void)storeUByteArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeUByteArray(offset:source:sourceOffset:count:)")));
- (void)storeUByteArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeUByteArray(offset:source:sourceOffset:count_:)")));
- (void)storeUIntArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeUIntArray(offset:source:sourceOffset:count:)")));
- (void)storeUIntArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeUIntArray(offset:source:sourceOffset:count_:)")));
- (void)storeUIntAtOffset:(int32_t)offset value:(uint32_t)value __attribute__((swift_name("storeUIntAt(offset:value:)")));
- (void)storeUIntAtOffset:(int64_t)offset value_:(uint32_t)value __attribute__((swift_name("storeUIntAt(offset:value_:)")));
- (void)storeULongArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeULongArray(offset:source:sourceOffset:count:)")));
- (void)storeULongArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeULongArray(offset:source:sourceOffset:count_:)")));
- (void)storeULongAtOffset:(int32_t)offset value:(uint64_t)value __attribute__((swift_name("storeULongAt(offset:value:)")));
- (void)storeULongAtOffset:(int64_t)offset value_:(uint64_t)value __attribute__((swift_name("storeULongAt(offset:value_:)")));
- (void)storeUShortArrayOffset:(int32_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count:(int32_t)count __attribute__((swift_name("storeUShortArray(offset:source:sourceOffset:count:)")));
- (void)storeUShortArrayOffset:(int64_t)offset source:(id)source sourceOffset:(int32_t)sourceOffset count_:(int32_t)count __attribute__((swift_name("storeUShortArray(offset:source:sourceOffset:count_:)")));
- (void)storeUShortAtOffset:(int32_t)offset value:(uint16_t)value __attribute__((swift_name("storeUShortAt(offset:value:)")));
- (void)storeUShortAtOffset:(int64_t)offset value_:(uint16_t)value __attribute__((swift_name("storeUShortAt(offset:value_:)")));
@end;

@interface MVIMMemoryCompanion (Extensions)
- (MVIMMemory *)ofPointer:(void *)pointer size:(int32_t)size __attribute__((swift_name("of(pointer:size:)")));
- (MVIMMemory *)ofPointer:(void *)pointer size_:(int64_t)size __attribute__((swift_name("of(pointer:size_:)")));
- (MVIMMemory *)ofPointer:(void *)pointer size__:(uint64_t)size __attribute__((swift_name("of(pointer:size__:)")));
@end;

@interface MVIMBuffer (Extensions)
- (MVIMBuffer *)appendC:(unichar)c __attribute__((swift_name("append(c:)"))) __attribute__((deprecated("This is no longer supported. Use a packet builder to append characters instead.")));
- (MVIMBuffer *)appendCsq:(MVIMKotlinCharArray *)csq start:(int32_t)start end_:(int32_t)end __attribute__((swift_name("append(csq:start:end_:)"))) __attribute__((deprecated("This is no longer supported. Use a packet builder to append characters instead.")));
- (MVIMBuffer *)appendCsq:(id _Nullable)csq __attribute__((swift_name("append(csq:)"))) __attribute__((deprecated("This is no longer supported. Use a packet builder to append characters instead.")));
- (MVIMBuffer *)appendCsq:(id _Nullable)csq start:(int32_t)start end__:(int32_t)end __attribute__((swift_name("append(csq:start:end__:)"))) __attribute__((deprecated("This is no longer supported. Use a packet builder to append characters instead.")));
- (BOOL)canRead __attribute__((swift_name("canRead()")));
- (BOOL)canWrite __attribute__((swift_name("canWrite()")));
- (void)fillTimes:(int32_t)times value:(int8_t)value __attribute__((swift_name("fill(times:value:)")));
- (void)fillTimes:(int32_t)times value_:(uint8_t)value __attribute__((swift_name("fill(times:value_:)")));
- (void)fillN:(int64_t)n v:(int8_t)v __attribute__((swift_name("fill(n:v:)"))) __attribute__((deprecated("Use fill with n with type Int")));
- (void)flush_ __attribute__((swift_name("flush_()"))) __attribute__((deprecated("Does nothing.")));
- (void)forEachBlock:(void (^)(MVIMByte *))block __attribute__((swift_name("forEach(block:)")));
- (MVIMBuffer *)makeView_ __attribute__((swift_name("makeView_()"))) __attribute__((deprecated("Use duplicate instead")));
- (void)pushBackN:(int32_t)n __attribute__((swift_name("pushBack(n:)"))) __attribute__((deprecated("Use rewind instead")));
- (int32_t)readBlock:(MVIMInt *(^)(MVIMMemory *, MVIMInt *, MVIMInt *))block __attribute__((swift_name("read(block:)")));
- (int32_t)readAvailableDst:(MVIMBuffer *)dst length:(int32_t)length __attribute__((swift_name("readAvailable(dst:length:)")));
- (int32_t)readAvailableDestination:(MVIMKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length:)")));
- (int32_t)readAvailableDestination:(MVIMKotlinDoubleArray *)destination offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_:)")));
- (int32_t)readAvailableDestination:(MVIMKotlinFloatArray *)destination offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length__:)")));
- (int32_t)readAvailableDestination:(MVIMKotlinIntArray *)destination offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length___:)")));
- (int32_t)readAvailableDestination:(MVIMKotlinLongArray *)destination offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length____:)")));
- (int32_t)readAvailableDestination:(MVIMKotlinShortArray *)destination offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_____:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length______:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_______:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length________:)")));
- (int32_t)readAvailableDestination:(id)destination offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length_________:)")));
- (int32_t)readAvailablePointer:(void *)pointer offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(pointer:offset:length:)")));
- (int32_t)readAvailablePointer:(void *)pointer offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailable(pointer:offset:length_:)")));
- (int32_t)readAvailableLittleEndianDst:(MVIMKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length:)")));
- (int32_t)readAvailableLittleEndianDst:(MVIMKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_:)")));
- (int32_t)readAvailableLittleEndianDst:(MVIMKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length__:)")));
- (int32_t)readAvailableLittleEndianDst:(MVIMKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length___:)")));
- (int32_t)readAvailableLittleEndianDst:(MVIMKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length____:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_____:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length______:)")));
- (int32_t)readAvailableLittleEndianDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(dst:offset:length_______:)")));
- (MVIMKotlinByteArray *)readBytesCount:(int32_t)count __attribute__((swift_name("readBytes(count:)")));
- (int32_t)readDirectBlock_:(MVIMInt *(^)(id))block __attribute__((swift_name("readDirect(block_:)")));
- (double)readDouble __attribute__((swift_name("readDouble()")));
- (double)readDoubleLittleEndian __attribute__((swift_name("readDoubleLittleEndian()")));
- (float)readFloat __attribute__((swift_name("readFloat()")));
- (float)readFloatLittleEndian __attribute__((swift_name("readFloatLittleEndian()")));
- (int32_t)readFullyDst:(MVIMBuffer *)dst length:(int32_t)length __attribute__((swift_name("readFully(dst:length:)")));
- (void)readFullyDst:(MVIMKotlinArray<MVIMByte *> *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(dst:offset:length:)")));
- (void)readFullyDestination:(MVIMKotlinByteArray *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length:)")));
- (void)readFullyDestination:(MVIMKotlinDoubleArray *)destination offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_:)")));
- (void)readFullyDestination:(MVIMKotlinFloatArray *)destination offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length__:)")));
- (void)readFullyDestination:(MVIMKotlinIntArray *)destination offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length___:)")));
- (void)readFullyDestination:(MVIMKotlinLongArray *)destination offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length____:)")));
- (void)readFullyDestination:(MVIMKotlinShortArray *)destination offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_____:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length______:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_______:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length________:)")));
- (void)readFullyDestination:(id)destination offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length_________:)")));
- (void)readFullyPointer:(void *)pointer offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(pointer:offset:length:)")));
- (void)readFullyPointer:(void *)pointer offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(pointer:offset:length_:)")));
- (void)readFullyLittleEndianDst:(MVIMKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length:)")));
- (void)readFullyLittleEndianDst:(MVIMKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_:)")));
- (void)readFullyLittleEndianDst:(MVIMKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length__:)")));
- (void)readFullyLittleEndianDst:(MVIMKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length___:)")));
- (void)readFullyLittleEndianDst:(MVIMKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length____:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_____:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length______:)")));
- (void)readFullyLittleEndianDst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(dst:offset:length_______:)")));
- (int32_t)readInt __attribute__((swift_name("readInt()")));
- (int32_t)readIntLittleEndian __attribute__((swift_name("readIntLittleEndian()")));
- (int64_t)readLong __attribute__((swift_name("readLong()")));
- (int64_t)readLongLittleEndian __attribute__((swift_name("readLongLittleEndian()")));
- (int16_t)readShort __attribute__((swift_name("readShort()")));
- (int16_t)readShortLittleEndian __attribute__((swift_name("readShortLittleEndian()")));
- (NSString *)readTextCharset:(MVIMCharset *)charset max:(int32_t)max __attribute__((swift_name("readText(charset:max:)")));
- (int32_t)readTextDecoder:(MVIMCharsetDecoder *)decoder out:(id<MVIMKotlinAppendable>)out lastBuffer:(BOOL)lastBuffer max:(int32_t)max __attribute__((swift_name("readText(decoder:out:lastBuffer:max:)"))) __attribute__((deprecated("This is no longer supported. Read from a packet instead.")));
- (uint8_t)readUByte __attribute__((swift_name("readUByte()")));
- (uint32_t)readUInt __attribute__((swift_name("readUInt()")));
- (uint64_t)readULong __attribute__((swift_name("readULong()")));
- (uint16_t)readUShort __attribute__((swift_name("readUShort()")));
- (int32_t)tryPeek_ __attribute__((swift_name("tryPeek_()"))) __attribute__((deprecated("Use tryPeekByte instead")));
- (int32_t)writeBlock:(MVIMInt *(^)(MVIMMemory *, MVIMInt *, MVIMInt *))block __attribute__((swift_name("write(block:)")));
- (int32_t)writeDirectBlock_:(MVIMInt *(^)(id))block __attribute__((swift_name("writeDirect(block_:)")));
- (void)writeDoubleValue:(double)value __attribute__((swift_name("writeDouble(value:)")));
- (void)writeDoubleLittleEndianValue:(double)value __attribute__((swift_name("writeDoubleLittleEndian(value:)")));
- (void)writeFloatValue:(float)value __attribute__((swift_name("writeFloat(value:)")));
- (void)writeFloatLittleEndianValue:(float)value __attribute__((swift_name("writeFloatLittleEndian(value:)")));
- (void)writeFullySrc:(MVIMBuffer *)src __attribute__((swift_name("writeFully(src:)")));
- (void)writeFullySrc:(MVIMBuffer *)src length:(int32_t)length __attribute__((swift_name("writeFully(src:length:)")));
- (void)writeFullySource:(MVIMKotlinByteArray *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length:)")));
- (void)writeFullySource:(MVIMKotlinDoubleArray *)source offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_:)")));
- (void)writeFullySource:(MVIMKotlinFloatArray *)source offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length__:)")));
- (void)writeFullySource:(MVIMKotlinIntArray *)source offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length___:)")));
- (void)writeFullySource:(MVIMKotlinLongArray *)source offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length____:)")));
- (void)writeFullySource:(MVIMKotlinShortArray *)source offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_____:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length______:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_______:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length________:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length________:)")));
- (void)writeFullySource:(id)source offset:(int32_t)offset length_________:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length_________:)")));
- (void)writeFullyPointer:(void *)pointer offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(pointer:offset:length:)")));
- (void)writeFullyPointer:(void *)pointer offset:(int64_t)offset length_:(int32_t)length __attribute__((swift_name("writeFully(pointer:offset:length_:)")));
- (void)writeFullyLittleEndianSource:(MVIMKotlinDoubleArray *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length:)")));
- (void)writeFullyLittleEndianSource:(MVIMKotlinFloatArray *)source offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_:)")));
- (void)writeFullyLittleEndianSource:(MVIMKotlinIntArray *)source offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length__:)")));
- (void)writeFullyLittleEndianSource:(MVIMKotlinLongArray *)source offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length___:)")));
- (void)writeFullyLittleEndianSource:(MVIMKotlinShortArray *)source offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length____:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_____:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length______:)")));
- (void)writeFullyLittleEndianSource:(id)source offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(source:offset:length_______:)")));
- (void)writeIntValue:(int32_t)value __attribute__((swift_name("writeInt(value:)")));
- (void)writeIntLittleEndianValue:(int32_t)value __attribute__((swift_name("writeIntLittleEndian(value:)")));
- (void)writeLongValue:(int64_t)value __attribute__((swift_name("writeLong(value:)")));
- (void)writeLongLittleEndianValue:(int64_t)value __attribute__((swift_name("writeLongLittleEndian(value:)")));
- (void)writeShortValue:(int16_t)value __attribute__((swift_name("writeShort(value:)")));
- (void)writeShortLittleEndianValue:(int16_t)value __attribute__((swift_name("writeShortLittleEndian(value:)")));
- (void)writeUByteValue:(uint8_t)value __attribute__((swift_name("writeUByte(value:)")));
- (void)writeUIntValue:(uint32_t)value __attribute__((swift_name("writeUInt(value:)")));
- (void)writeULongValue:(uint64_t)value __attribute__((swift_name("writeULong(value:)")));
- (void)writeUShortValue:(uint16_t)value __attribute__((swift_name("writeUShort(value:)")));
- (int32_t)decodeUTF8Consumer:(MVIMBoolean *(^)(id))consumer __attribute__((swift_name("decodeUTF8(consumer:)")));
@property MVIMByteOrder *byteOrder_ __attribute__((swift_name("byteOrder_"))) __attribute__((unavailable("This is no longer supported. All operations are big endian by default. Use readXXXLittleEndian to read primitives in little endian")));
@end;

@interface MVIMChunkBuffer (Extensions)
- (MVIMChunkBuffer *)makeView__ __attribute__((swift_name("makeView__()"))) __attribute__((deprecated("Use duplicate instead")));
- (int64_t)remainingAll __attribute__((swift_name("remainingAll()")));
@end;

@interface MVIMBytePacketBuilder (Extensions)
- (id _Nullable)previewBlock:(id _Nullable (^)(MVIMByteReadPacket *))block __attribute__((swift_name("preview(block:)")));
- (void)reset __attribute__((swift_name("reset()")));
- (void)writeFullySrc:(void *)src size:(int32_t)size __attribute__((swift_name("writeFully(src:size:)")));
@end;

@interface MVIMIoBuffer (Extensions)
- (int32_t)readAvailableDestination:(MVIMKotlinByteArray *)destination offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("readAvailable(destination:offset:length__________:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (double)readDouble_ __attribute__((swift_name("readDouble_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (float)readFloat_ __attribute__((swift_name("readFloat_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (void)readFullyDestination:(MVIMKotlinByteArray *)destination offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("readFully(destination:offset:length__________:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (int32_t)readInt_ __attribute__((swift_name("readInt_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (int64_t)readLong_ __attribute__((swift_name("readLong_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (int16_t)readShort_ __attribute__((swift_name("readShort_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (uint8_t)readUByte_ __attribute__((swift_name("readUByte_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (uint32_t)readUInt_ __attribute__((swift_name("readUInt_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (uint64_t)readULong_ __attribute__((swift_name("readULong_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (uint16_t)readUShort_ __attribute__((swift_name("readUShort_()"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Input instead.")));
- (void)releasePool__:(id<MVIMObjectPool>)pool __attribute__((swift_name("release(pool__:)")));
- (void)writeDoubleValue_:(double)value __attribute__((swift_name("writeDouble(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeFloatValue_:(float)value __attribute__((swift_name("writeFloat(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeFullySource:(MVIMKotlinByteArray *)source offset:(int32_t)offset length__________:(int32_t)length __attribute__((swift_name("writeFully(source:offset:length__________:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeIntValue_:(int32_t)value __attribute__((swift_name("writeInt(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeLongValue_:(int64_t)value __attribute__((swift_name("writeLong(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeShortValue_:(int16_t)value __attribute__((swift_name("writeShort(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeUByteValue_:(uint8_t)value __attribute__((swift_name("writeUByte(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeUIntValue_:(uint32_t)value __attribute__((swift_name("writeUInt(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeULongValue_:(uint64_t)value __attribute__((swift_name("writeULong(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
- (void)writeUShortValue_:(uint16_t)value __attribute__((swift_name("writeUShort(value_:)"))) __attribute__((deprecated("IoBuffer is deprecated. Use Memory or Output instead.")));
@end;

@interface MVIMCharsetDecoder (Extensions)
- (NSString *)decodeInput:(id<MVIMInput>)input max:(int32_t)max __attribute__((swift_name("decode(input:max:)")));
- (int32_t)decodeInput:(id<MVIMInput>)input dst:(id<MVIMKotlinAppendable>)dst max:(int32_t)max __attribute__((swift_name("decode(input:dst:max:)")));
- (NSString *)decodeExactBytesInput:(id<MVIMInput>)input inputLength:(int32_t)inputLength __attribute__((swift_name("decodeExactBytes(input:inputLength:)")));
@property (readonly) MVIMCharset *charset __attribute__((swift_name("charset")));
@end;

@interface MVIMCharsetEncoder (Extensions)
- (void)encodeInput:(MVIMKotlinCharArray *)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex dst:(id<MVIMOutput>)dst __attribute__((swift_name("encode(input:fromIndex:toIndex:dst:)")));
- (MVIMByteReadPacket *)encodeInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex __attribute__((swift_name("encode(input:fromIndex:toIndex:)")));
- (void)encodeInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex dst_:(id<MVIMOutput>)dst __attribute__((swift_name("encode(input:fromIndex:toIndex:dst_:)"))) __attribute__((deprecated("Use writeText on Output instead.")));
- (MVIMKotlinByteArray *)encodeToByteArrayInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex __attribute__((swift_name("encodeToByteArray(input:fromIndex:toIndex:)")));
- (MVIMKotlinByteArray *)encodeToByteArrayImplInput:(id)input fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex __attribute__((swift_name("encodeToByteArrayImpl(input:fromIndex:toIndex:)"))) __attribute__((deprecated("Internal API. Will be hidden in future releases. Use encodeToByteArray instead.")));
- (MVIMByteReadPacket *)encodeUTF8Input:(MVIMByteReadPacket *)input __attribute__((swift_name("encodeUTF8(input:)")));
- (void)encodeUTF8Input:(MVIMByteReadPacket *)input dst:(id<MVIMOutput>)dst __attribute__((swift_name("encodeUTF8(input:dst:)")));
@property (readonly) MVIMCharset *charset __attribute__((swift_name("charset")));
@end;

@interface MVIMCharset (Extensions)
@property (readonly) NSString *name __attribute__((swift_name("name")));
@end;

@interface MVIMCoroutineDispatcher (Extensions)

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeBlock:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(block:completionHandler:)")));
@end;

@interface MVIMSharingStartedCompanion (Extensions)
- (id<MVIMSharingStarted>)WhileSubscribedStopTimeout:(int64_t)stopTimeout replayExpiration:(int64_t)replayExpiration __attribute__((swift_name("WhileSubscribed(stopTimeout:replayExpiration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinArray")))
@interface MVIMKotlinArray<T> : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size init:(T _Nullable (^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (T _Nullable)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (id<MVIMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(T _Nullable)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface MVIMKotlinArray (Extensions)
- (id<MVIMFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntArray")))
@interface MVIMKotlinIntArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(MVIMInt *(^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int32_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int32_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface MVIMKotlinIntArray (Extensions)
- (id<MVIMFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLongArray")))
@interface MVIMKotlinLongArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(MVIMLong *(^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int64_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinLongIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int64_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

@interface MVIMKotlinLongArray (Extensions)
- (id<MVIMFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

__attribute__((swift_name("KotlinIntProgression")))
@interface MVIMKotlinIntProgression : MVIMBase <MVIMKotlinIterable>
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (MVIMKotlinIntIterator *)iterator __attribute__((swift_name("iterator()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) int32_t first __attribute__((swift_name("first")));
@property (readonly) int32_t last __attribute__((swift_name("last")));
@property (readonly, getter=step_) int32_t step __attribute__((swift_name("step")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinIntRange")))
@interface MVIMKotlinIntRange : MVIMKotlinIntProgression <MVIMKotlinClosedRange>
- (instancetype)initWithStart:(int32_t)start endInclusive:(int32_t)endInclusive __attribute__((swift_name("init(start:endInclusive:)"))) __attribute__((objc_designated_initializer));
- (BOOL)containsValue:(MVIMInt *)value __attribute__((swift_name("contains(value:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (BOOL)isEmpty __attribute__((swift_name("isEmpty()")));
- (BOOL)isEmpty_ __attribute__((swift_name("isEmpty()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) MVIMInt *endInclusive __attribute__((swift_name("endInclusive")));
@property (readonly, getter=start_) MVIMInt *start __attribute__((swift_name("start")));
@end;

@interface MVIMKotlinIntRange (Extensions)
- (id<MVIMFlow>)asFlow __attribute__((swift_name("asFlow()")));
@end;

@interface MVIMJsonPrimitive (Extensions)
@property (readonly) BOOL boolean __attribute__((swift_name("boolean")));
@property (readonly) MVIMBoolean * _Nullable booleanOrNull __attribute__((swift_name("booleanOrNull")));
@property (readonly) NSString * _Nullable contentOrNull __attribute__((swift_name("contentOrNull")));
@property (readonly, getter=double) double double_ __attribute__((swift_name("double_")));
@property (readonly) MVIMDouble * _Nullable doubleOrNull __attribute__((swift_name("doubleOrNull")));
@property (readonly, getter=float) float float_ __attribute__((swift_name("float_")));
@property (readonly) MVIMFloat * _Nullable floatOrNull __attribute__((swift_name("floatOrNull")));
@property (readonly, getter=int) int32_t int_ __attribute__((swift_name("int_")));
@property (readonly) MVIMInt * _Nullable intOrNull __attribute__((swift_name("intOrNull")));
@property (readonly, getter=long) int64_t long_ __attribute__((swift_name("long_")));
@property (readonly) MVIMLong * _Nullable longOrNull __attribute__((swift_name("longOrNull")));
@end;

@interface MVIMJsonElement (Extensions)
@property (readonly) NSArray<MVIMJsonElement *> *jsonArray __attribute__((swift_name("jsonArray")));
@property (readonly) MVIMJsonNull *jsonNull __attribute__((swift_name("jsonNull")));
@property (readonly) NSDictionary<NSString *, MVIMJsonElement *> *jsonObject __attribute__((swift_name("jsonObject")));
@property (readonly) MVIMJsonPrimitive *jsonPrimitive __attribute__((swift_name("jsonPrimitive")));
@end;

@interface MVIMJsonArrayBuilder (Extensions)
- (BOOL)addValue:(MVIMBoolean * _Nullable)value __attribute__((swift_name("add(value:)")));
- (BOOL)addValue_:(id _Nullable)value __attribute__((swift_name("add(value_:)")));
- (BOOL)addValue__:(NSString * _Nullable)value __attribute__((swift_name("add(value__:)")));
- (BOOL)addJsonArrayBuilderAction:(void (^)(MVIMJsonArrayBuilder *))builderAction __attribute__((swift_name("addJsonArray(builderAction:)")));
- (BOOL)addJsonObjectBuilderAction:(void (^)(MVIMJsonObjectBuilder *))builderAction __attribute__((swift_name("addJsonObject(builderAction:)")));
@end;

@interface MVIMJson (Extensions)
- (id _Nullable)decodeFromJsonElementJson:(MVIMJsonElement *)json __attribute__((swift_name("decodeFromJsonElement(json:)")));
- (MVIMJsonElement *)encodeToJsonElementValue:(id _Nullable)value __attribute__((swift_name("encodeToJsonElement(value:)")));
@end;

@interface MVIMJsonObjectBuilder (Extensions)
- (MVIMJsonElement * _Nullable)putKey:(NSString *)key value:(MVIMBoolean * _Nullable)value __attribute__((swift_name("put(key:value:)")));
- (MVIMJsonElement * _Nullable)putKey:(NSString *)key value_:(id _Nullable)value __attribute__((swift_name("put(key:value_:)")));
- (MVIMJsonElement * _Nullable)putKey:(NSString *)key value__:(NSString * _Nullable)value __attribute__((swift_name("put(key:value__:)")));
- (MVIMJsonElement * _Nullable)putJsonArrayKey:(NSString *)key builderAction:(void (^)(MVIMJsonArrayBuilder *))builderAction __attribute__((swift_name("putJsonArray(key:builderAction:)")));
- (MVIMJsonElement * _Nullable)putJsonObjectKey:(NSString *)key builderAction:(void (^)(MVIMJsonObjectBuilder *))builderAction __attribute__((swift_name("putJsonObject(key:builderAction:)")));
@end;

@interface MVIMAtomicInt (Extensions)
@property int32_t value __attribute__((swift_name("value")));
@end;

@interface MVIMAtomicLong (Extensions)
@property int64_t value __attribute__((swift_name("value")));
@end;

@interface MVIMAtomicReference (Extensions)
@property id _Nullable value __attribute__((swift_name("value")));
@end;

@interface MVIMThreadLocalRef (Extensions)
@property (setter=setValue__:) id _Nullable value_ __attribute__((swift_name("value_")));
@end;

@interface MVIMTraceBase (Extensions)
- (MVIMTraceBase *)namedName:(NSString *)name __attribute__((swift_name("named(name:)")));
@end;

@interface MVIMSynchronizedObject (Extensions)
- (id _Nullable)withLockBlock:(id _Nullable (^)(void))block __attribute__((swift_name("withLock(block:)")));
@end;

@interface MVIMAbstractPolymorphicSerializer (Extensions)
- (id<MVIMDeserializationStrategy>)findPolymorphicSerializerDecoder:(id<MVIMCompositeDecoder>)decoder klassName:(NSString * _Nullable)klassName __attribute__((swift_name("findPolymorphicSerializer(decoder:klassName:)")));
- (id<MVIMSerializationStrategy>)findPolymorphicSerializerEncoder:(id<MVIMEncoder>)encoder value:(id)value __attribute__((swift_name("findPolymorphicSerializer(encoder:value:)")));
@end;

@interface MVIMSerializersModule (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
- (id<MVIMKSerializer>)serializerType:(id<MVIMKotlinKType>)type __attribute__((swift_name("serializer(type:)")));
- (id<MVIMKSerializer> _Nullable)serializerOrNullType:(id<MVIMKotlinKType>)type __attribute__((swift_name("serializerOrNull(type:)")));
- (MVIMSerializersModule *)overwriteWithOther:(MVIMSerializersModule *)other __attribute__((swift_name("overwriteWith(other:)")));
- (MVIMSerializersModule *)plusOther_:(MVIMSerializersModule *)other __attribute__((swift_name("plus(other_:)")));
- (id<MVIMSerialDescriptor> _Nullable)getContextualDescriptorDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("getContextualDescriptor(descriptor:)")));
- (NSArray<id<MVIMSerialDescriptor>> *)getPolymorphicDescriptorsDescriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("getPolymorphicDescriptors(descriptor:)")));
@end;

@interface MVIMSerializersModuleBuilder (Extensions)
- (void)contextualSerializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("contextual(serializer:)")));
- (void)polymorphicBaseClass:(id<MVIMKotlinKClass>)baseClass baseSerializer:(id<MVIMKSerializer> _Nullable)baseSerializer builderAction:(void (^)(MVIMPolymorphicModuleBuilder<id> *))builderAction __attribute__((swift_name("polymorphic(baseClass:baseSerializer:builderAction:)")));
@end;

@interface MVIMPolymorphicModuleBuilder (Extensions)
- (void)subclassClazz:(id<MVIMKotlinKClass>)clazz __attribute__((swift_name("subclass(clazz:)")));
- (void)subclassSerializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("subclass(serializer:)")));
@end;

@interface MVIMClassSerialDescriptorBuilder (Extensions)
- (void)elementElementName:(NSString *)elementName annotations:(NSArray<id<MVIMKotlinAnnotation>> *)annotations isOptional:(BOOL)isOptional __attribute__((swift_name("element(elementName:annotations:isOptional:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinBoolean.Companion")))
@interface MVIMKotlinBooleanCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

@interface MVIMKotlinBooleanCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinByte.Companion")))
@interface MVIMKotlinByteCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int8_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int8_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinByteCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinChar.Companion")))
@interface MVIMKotlinCharCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int32_t MAX_CODE_POINT __attribute__((swift_name("MAX_CODE_POINT")));
@property (readonly) unichar MAX_HIGH_SURROGATE __attribute__((swift_name("MAX_HIGH_SURROGATE")));
@property (readonly) unichar MAX_LOW_SURROGATE __attribute__((swift_name("MAX_LOW_SURROGATE")));
@property (readonly) int32_t MAX_RADIX __attribute__((swift_name("MAX_RADIX")));
@property (readonly) unichar MAX_SURROGATE __attribute__((swift_name("MAX_SURROGATE")));
@property (readonly) unichar MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int32_t MIN_CODE_POINT __attribute__((swift_name("MIN_CODE_POINT")));
@property (readonly) unichar MIN_HIGH_SURROGATE __attribute__((swift_name("MIN_HIGH_SURROGATE")));
@property (readonly) unichar MIN_LOW_SURROGATE __attribute__((swift_name("MIN_LOW_SURROGATE")));
@property (readonly) int32_t MIN_RADIX __attribute__((swift_name("MIN_RADIX")));
@property (readonly) int32_t MIN_SUPPLEMENTARY_CODE_POINT __attribute__((swift_name("MIN_SUPPLEMENTARY_CODE_POINT")));
@property (readonly) unichar MIN_SURROGATE __attribute__((swift_name("MIN_SURROGATE")));
@property (readonly) unichar MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinCharCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDouble.Companion")))
@interface MVIMKotlinDoubleCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) double MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) double MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) double NEGATIVE_INFINITY __attribute__((swift_name("NEGATIVE_INFINITY")));
@property (readonly) double NaN __attribute__((swift_name("NaN")));
@property (readonly) double POSITIVE_INFINITY __attribute__((swift_name("POSITIVE_INFINITY")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinDoubleCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinFloat.Companion")))
@interface MVIMKotlinFloatCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) float MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) float MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) float NEGATIVE_INFINITY __attribute__((swift_name("NEGATIVE_INFINITY")));
@property (readonly) float NaN __attribute__((swift_name("NaN")));
@property (readonly) float POSITIVE_INFINITY __attribute__((swift_name("POSITIVE_INFINITY")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinFloatCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinInt.Companion")))
@interface MVIMKotlinIntCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int32_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int32_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinIntCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLong.Companion")))
@interface MVIMKotlinLongCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int64_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int64_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinLongCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinShort.Companion")))
@interface MVIMKotlinShortCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) int16_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) int16_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinShortCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinString.Companion")))
@interface MVIMKotlinStringCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@end;

@interface MVIMKotlinStringCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUByte.Companion")))
@interface MVIMKotlinUByteCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) uint8_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint8_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinUByteCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUInt.Companion")))
@interface MVIMKotlinUIntCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) uint32_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint32_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinUIntCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinULong.Companion")))
@interface MVIMKotlinULongCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) uint64_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint64_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinULongCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUShort.Companion")))
@interface MVIMKotlinUShortCompanion : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)companion __attribute__((swift_name("init()")));
@property (readonly) uint16_t MAX_VALUE __attribute__((swift_name("MAX_VALUE")));
@property (readonly) uint16_t MIN_VALUE __attribute__((swift_name("MIN_VALUE")));
@property (readonly) int32_t SIZE_BITS __attribute__((swift_name("SIZE_BITS")));
@property (readonly) int32_t SIZE_BYTES __attribute__((swift_name("SIZE_BYTES")));
@end;

@interface MVIMKotlinUShortCompanion (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinUnit")))
@interface MVIMKotlinUnit : MVIMBase
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
+ (instancetype)unit __attribute__((swift_name("init()")));
- (NSString *)description __attribute__((swift_name("description()")));
@end;

@interface MVIMKotlinUnit (Extensions)
- (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
@end;

@interface MVIMDatabaseFileContext (Extensions)
- (void)deleteDatabaseConfiguration:(MVIMDatabaseConfiguration *)configuration __attribute__((swift_name("deleteDatabase(configuration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultiplatformApplicationKt")))
@interface MVIMMultiplatformApplicationKt : MVIMBase
+ (void)doInitApplicationAppModule:(MVIMModule *)appModule __attribute__((swift_name("doInitApplication(appModule:)")));
@property (class, readonly) MVIMKoinApplication *koinApplication __attribute__((swift_name("koinApplication")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinIOSKt")))
@interface MVIMKoinIOSKt : MVIMBase
+ (MVIMKoinApplication *)doInitKoinIosUserDefaults:(NSUserDefaults *)userDefaults doOnStartup:(void (^)(void))doOnStartup __attribute__((swift_name("doInitKoinIos(userDefaults:doOnStartup:)")));
@property (class, readonly) MVIMModule *platformModule __attribute__((swift_name("platformModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StoreInjectorKt")))
@interface MVIMStoreInjectorKt : MVIMBase
+ (id<MVIMStore>)getStore __attribute__((swift_name("getStore()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinKt")))
@interface MVIMKoinKt : MVIMBase
+ (MVIMKoinApplication *)doInitKoinAppModule:(MVIMModule *)appModule __attribute__((swift_name("doInitKoin(appModule:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainModuleKt")))
@interface MVIMMainModuleKt : MVIMBase
@property (class, readonly) MVIMModule *mainModule __attribute__((swift_name("mainModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ApiModuleKt")))
@interface MVIMApiModuleKt : MVIMBase
@property (class, readonly) MVIMModule *apiModule __attribute__((swift_name("apiModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseModuleKt")))
@interface MVIMDatabaseModuleKt : MVIMBase
@property (class, readonly) MVIMModule *databaseModule __attribute__((swift_name("databaseModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosSqliteDriverModuleKt")))
@interface MVIMIosSqliteDriverModuleKt : MVIMBase
@property (class, readonly) MVIMModule *sqliteDriverModule __attribute__((swift_name("sqliteDriverModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutinesExtensionsKt")))
@interface MVIMCoroutinesExtensionsKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)transactionWithContext:(id<MVIMTransacter>)receiver coroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext noEnclosing:(BOOL)noEnclosing body:(void (^)(id<MVIMTransactionWithoutReturn>))body completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("transactionWithContext(_:coroutineContext:noEnclosing:body:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RepositoryModuleKt")))
@interface MVIMRepositoryModuleKt : MVIMBase
@property (class, readonly) MVIMModule *repositoryModule __attribute__((swift_name("repositoryModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DomainModuleKt")))
@interface MVIMDomainModuleKt : MVIMBase
@property (class, readonly) MVIMModule *domainModule __attribute__((swift_name("domainModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IosSettingsModuleKt")))
@interface MVIMIosSettingsModuleKt : MVIMBase
@property (class, readonly) MVIMModule *settingsModule __attribute__((swift_name("settingsModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FlowExtensionsKt")))
@interface MVIMFlowExtensionsKt : MVIMBase
+ (id<MVIMFlow>)mapToList:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("mapToList(_:context:)")));
+ (id<MVIMFlow>)mapToOne:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("mapToOne(_:context:)")));
+ (id<MVIMFlow>)mapToOneNotNull:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("mapToOneNotNull(_:context:)")));
+ (id<MVIMFlow>)mapToOneOrDefault:(id<MVIMFlow>)receiver defaultValue:(id)defaultValue context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("mapToOneOrDefault(_:defaultValue:context:)")));
+ (id<MVIMFlow>)mapToOneOrNull:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("mapToOneOrNull(_:context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeSqlDatabaseKt")))
@interface MVIMNativeSqlDatabaseKt : MVIMBase
+ (void)wrapConnectionConnection:(id<MVIMDatabaseConnection>)connection block:(void (^)(id<MVIMSqlDriver>))block __attribute__((swift_name("wrapConnection(connection:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EnumColumnAdapterKt")))
@interface MVIMEnumColumnAdapterKt : MVIMBase
+ (MVIMEnumColumnAdapter<MVIMKotlinEnum *> *)EnumColumnAdapter __attribute__((swift_name("EnumColumnAdapter()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QueryKt")))
@interface MVIMQueryKt : MVIMBase
+ (MVIMQuery<id> *)QueryIdentifier:(int32_t)identifier queries:(NSMutableArray<MVIMQuery<id> *> *)queries driver:(id<MVIMSqlDriver>)driver query:(NSString *)query mapper:(id (^)(id<MVIMSqlCursor>))mapper __attribute__((swift_name("Query(identifier:queries:driver:query:mapper:)")));
+ (MVIMQuery<id> *)QueryIdentifier:(int32_t)identifier queries:(NSMutableArray<MVIMQuery<id> *> *)queries driver:(id<MVIMSqlDriver>)driver fileName:(NSString *)fileName label:(NSString *)label query:(NSString *)query mapper:(id (^)(id<MVIMSqlCursor>))mapper __attribute__((swift_name("Query(identifier:queries:driver:fileName:label:query:mapper:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SqlDriverKt")))
@interface MVIMSqlDriverKt : MVIMBase
+ (void)migrateWithCallbacks:(id<MVIMSqlDriverSchema>)receiver driver:(id<MVIMSqlDriver>)driver oldVersion:(int32_t)oldVersion newVersion:(int32_t)newVersion callbacks:(MVIMKotlinArray<MVIMAfterVersion *> *)callbacks __attribute__((swift_name("migrateWithCallbacks(_:driver:oldVersion:newVersion:callbacks:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseableKt")))
@interface MVIMCloseableKt : MVIMBase
+ (id _Nullable)use:(id<MVIMCloseable> _Nullable)receiver body:(id _Nullable (^)(id<MVIMCloseable> _Nullable))body __attribute__((swift_name("use(_:body:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FunctionsKt")))
@interface MVIMFunctionsKt : MVIMBase
+ (NSMutableArray<MVIMQuery<id> *> *)doCopyOnWriteList __attribute__((swift_name("doCopyOnWriteList()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultContextExtKt")))
@interface MVIMDefaultContextExtKt : MVIMBase
+ (void)loadKoinModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("loadKoinModules(modules:)")));
+ (void)loadKoinModulesModule:(MVIMModule *)module __attribute__((swift_name("loadKoinModules(module:)")));
+ (MVIMKoinApplication *)startKoinKoinApplication:(MVIMKoinApplication *)koinApplication __attribute__((swift_name("startKoin(koinApplication:)")));
+ (MVIMKoinApplication *)startKoinAppDeclaration:(void (^)(MVIMKoinApplication *))appDeclaration __attribute__((swift_name("startKoin(appDeclaration:)")));
+ (void)stopKoin __attribute__((swift_name("stopKoin()")));
+ (void)unloadKoinModulesModules:(NSArray<MVIMModule *> *)modules __attribute__((swift_name("unloadKoinModules(modules:)")));
+ (void)unloadKoinModulesModule:(MVIMModule *)module __attribute__((swift_name("unloadKoinModules(module:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinScopeComponentKt")))
@interface MVIMKoinScopeComponentKt : MVIMBase
+ (MVIMScope *)createScope:(id<MVIMKoinScopeComponent>)receiver source:(id _Nullable)source __attribute__((swift_name("createScope(_:source:)")));
+ (id<MVIMKotlinLazy>)getOrCreateScope:(id<MVIMKoinScopeComponent>)receiver __attribute__((swift_name("getOrCreateScope(_:)")));
+ (NSString *)getScopeId:(id)receiver __attribute__((swift_name("getScopeId(_:)")));
+ (MVIMTypeQualifier *)getScopeName:(id)receiver __attribute__((swift_name("getScopeName(_:)")));
+ (MVIMScope * _Nullable)getScopeOrNull:(id<MVIMKoinScopeComponent>)receiver __attribute__((swift_name("getScopeOrNull(_:)")));
+ (id<MVIMKotlinLazy>)doNewScope:(id<MVIMKoinScopeComponent>)receiver __attribute__((swift_name("doNewScope(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinComponentKt")))
@interface MVIMKoinComponentKt : MVIMBase
+ (id)get:(id<MVIMKoinComponent>)receiver qualifier:(id<MVIMQualifier> _Nullable)qualifier parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("get(_:qualifier:parameters:)")));
+ (id<MVIMKotlinLazy>)inject:(id<MVIMKoinComponent>)receiver qualifier:(id<MVIMQualifier> _Nullable)qualifier mode:(MVIMKotlinLazyThreadSafetyMode *)mode parameters:(MVIMParametersHolder *(^ _Nullable)(void))parameters __attribute__((swift_name("inject(_:qualifier:mode:parameters:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ModuleKt")))
@interface MVIMModuleKt : MVIMBase
+ (NSArray<MVIMModule *> *)plus:(NSArray<MVIMModule *> *)receiver module:(MVIMModule *)module __attribute__((swift_name("plus(_:module:)")));
+ (MVIMModule *)moduleCreatedAtStart:(BOOL)createdAtStart override:(BOOL)override moduleDeclaration:(void (^)(MVIMModule *))moduleDeclaration __attribute__((swift_name("module(createdAtStart:override:moduleDeclaration:)"))) __attribute__((deprecated("'override' parameter is not used anymore. See 'allowOverride' in KoinApplication")));
+ (MVIMModule *)moduleCreatedAtStart:(BOOL)createdAtStart moduleDeclaration:(void (^)(MVIMModule *))moduleDeclaration __attribute__((swift_name("module(createdAtStart:moduleDeclaration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QualifierKt")))
@interface MVIMQualifierKt : MVIMBase
+ (MVIMTypeQualifier *)_q __attribute__((swift_name("_q()")));
+ (MVIMStringQualifier *)_qName:(NSString *)name __attribute__((swift_name("_q(name:)")));
+ (MVIMTypeQualifier *)named __attribute__((swift_name("named()")));
+ (id<MVIMQualifier>)namedEnum:(MVIMKotlinEnum<MVIMKotlinEnum *> *)enum_ __attribute__((swift_name("named(enum:)")));
+ (MVIMStringQualifier *)namedName:(NSString *)name __attribute__((swift_name("named(name:)")));
+ (MVIMTypeQualifier *)qualifier __attribute__((swift_name("qualifier()")));
+ (id<MVIMQualifier>)qualifierEnum:(MVIMKotlinEnum<MVIMKotlinEnum *> *)enum_ __attribute__((swift_name("qualifier(enum:)")));
+ (MVIMStringQualifier *)qualifierName:(NSString *)name __attribute__((swift_name("qualifier(name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MeasureKt")))
@interface MVIMMeasureKt : MVIMBase
+ (double)measureDurationCode:(void (^)(void))code __attribute__((swift_name("measureDuration(code:)")));
+ (MVIMKotlinPair<id, MVIMDouble *> *)measureDurationForResultCode:(id _Nullable (^)(void))code __attribute__((swift_name("measureDurationForResult(code:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BeanDefinitionKt")))
@interface MVIMBeanDefinitionKt : MVIMBase
+ (MVIMBeanDefinition<id> *)createDefinitionKind:(MVIMKind *)kind qualifier:(id<MVIMQualifier> _Nullable)qualifier definition:(id _Nullable (^)(MVIMScope *, MVIMParametersHolder *))definition secondaryTypes:(NSArray<id<MVIMKotlinKClass>> *)secondaryTypes scopeQualifier:(id<MVIMQualifier>)scopeQualifier __attribute__((swift_name("createDefinition(kind:qualifier:definition:secondaryTypes:scopeQualifier:)")));
+ (NSString *)indexKeyClazz:(id<MVIMKotlinKClass>)clazz typeQualifier:(id<MVIMQualifier> _Nullable)typeQualifier scopeQualifier:(id<MVIMQualifier>)scopeQualifier __attribute__((swift_name("indexKey(clazz:typeQualifier:scopeQualifier:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggerKt")))
@interface MVIMLoggerKt : MVIMBase
@property (class, readonly) NSString *KOIN_TAG __attribute__((swift_name("KOIN_TAG")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersHolderKt")))
@interface MVIMParametersHolderKt : MVIMBase
+ (MVIMParametersHolder *)emptyParametersHolder __attribute__((swift_name("emptyParametersHolder()")));
+ (MVIMParametersHolder *)parametersOfParameters:(MVIMKotlinArray<id> *)parameters __attribute__((swift_name("parametersOf(parameters:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MainThreadSafetyKt")))
@interface MVIMMainThreadSafetyKt : MVIMBase
@property (class, readonly) BOOL isMainThread __attribute__((swift_name("isMainThread")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KoinApplicationKt")))
@interface MVIMKoinApplicationKt : MVIMBase
+ (MVIMKoinApplication *)koinApplicationAppDeclaration:(void (^ _Nullable)(MVIMKoinApplication *))appDeclaration __attribute__((swift_name("koinApplication(appDeclaration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringExtKt")))
@interface MVIMStringExtKt : MVIMBase
+ (NSString *)clearQuotes:(NSString *)receiver __attribute__((swift_name("clearQuotes(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KClassExtKt")))
@interface MVIMKClassExtKt : MVIMBase
+ (NSString *)getFullName:(id<MVIMKotlinKClass>)receiver __attribute__((swift_name("getFullName(_:)")));
+ (NSString *)saveCache:(id<MVIMKotlinKClass>)receiver __attribute__((swift_name("saveCache(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InjectPropertyKt")))
@interface MVIMInjectPropertyKt : MVIMBase
+ (void)inject:(id _Nullable (^)(void))receiver __attribute__((swift_name("inject(_:)")));
+ (void)inject:(id _Nullable (^)(void))receiver koin:(MVIMKoin *)koin __attribute__((swift_name("inject(_:koin:)")));
+ (void)inject:(id _Nullable (^)(void))receiver scope:(MVIMScope *)scope __attribute__((swift_name("inject(_:scope:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateTimePeriodKt")))
@interface MVIMDateTimePeriodKt : MVIMBase
+ (MVIMDateTimePeriod *)DateTimePeriodYears:(int32_t)years months:(int32_t)months days:(int32_t)days hours:(int32_t)hours minutes:(int32_t)minutes seconds:(int32_t)seconds nanoseconds:(int64_t)nanoseconds __attribute__((swift_name("DateTimePeriod(years:months:days:hours:minutes:seconds:nanoseconds:)")));
+ (MVIMDatePeriod *)toDatePeriod:(NSString *)receiver __attribute__((swift_name("toDatePeriod(_:)")));
+ (MVIMDateTimePeriod *)toDateTimePeriod:(NSString *)receiver __attribute__((swift_name("toDateTimePeriod(_:)")));
+ (MVIMDateTimePeriod *)toDateTimePeriod_:(int64_t)receiver __attribute__((swift_name("toDateTimePeriod(__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DayOfWeekKt")))
@interface MVIMDayOfWeekKt : MVIMBase
+ (MVIMDayOfWeek *)DayOfWeekIsoDayNumber:(int32_t)isoDayNumber __attribute__((swift_name("DayOfWeek(isoDayNumber:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MonthKt")))
@interface MVIMMonthKt : MVIMBase
+ (MVIMMonth *)MonthNumber:(int32_t)number __attribute__((swift_name("Month(number:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ClockKt")))
@interface MVIMClockKt : MVIMBase
+ (id<MVIMKotlinTimeSource>)asTimeSource:(id<MVIMClock>)receiver __attribute__((swift_name("asTimeSource(_:)")));
+ (MVIMLocalDate *)todayAt:(id<MVIMClock>)receiver timeZone:(MVIMTimeZone *)timeZone __attribute__((swift_name("todayAt(_:timeZone:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InstantKt")))
@interface MVIMInstantKt : MVIMBase
+ (MVIMInstant *)toInstant:(NSString *)receiver __attribute__((swift_name("toInstant(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ConvertersKt")))
@interface MVIMConvertersKt : MVIMBase
+ (MVIMInstant *)toKotlinInstant:(NSDate *)receiver __attribute__((swift_name("toKotlinInstant(_:)")));
+ (MVIMTimeZone *)toKotlinTimeZone:(NSTimeZone *)receiver __attribute__((swift_name("toKotlinTimeZone(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateKt")))
@interface MVIMLocalDateKt : MVIMBase
+ (MVIMLocalDate *)toLocalDate:(NSString *)receiver __attribute__((swift_name("toLocalDate(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LocalDateTimeKt")))
@interface MVIMLocalDateTimeKt : MVIMBase
+ (MVIMLocalDateTime *)toLocalDateTime:(NSString *)receiver __attribute__((swift_name("toLocalDateTime(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultPosixKt")))
@interface MVIMDefaultPosixKt : MVIMBase
+ (id<MVIMJsonSerializer>)defaultSerializer __attribute__((swift_name("defaultSerializer()")));
@property (class, readonly) NSMutableArray<id<MVIMJsonSerializer>> *serializers __attribute__((swift_name("serializers")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientKt")))
@interface MVIMHttpClientKt : MVIMBase
+ (MVIMHttpClient *)HttpClientBlock:(void (^)(MVIMHttpClientConfig<id> *))block __attribute__((swift_name("HttpClient(block:)")));
+ (MVIMHttpClient *)HttpClientEngine:(id<MVIMHttpClientEngine>)engine block:(void (^)(MVIMHttpClientConfig<id> *))block __attribute__((swift_name("HttpClient(engine:block:)")));
+ (MVIMHttpClient *)HttpClientEngineFactory:(id<MVIMHttpClientEngineFactory>)engineFactory block:(void (^)(MVIMHttpClientConfig<MVIMHttpClientEngineConfig *> *))block __attribute__((swift_name("HttpClient(engineFactory:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeInfoKt")))
@interface MVIMTypeInfoKt : MVIMBase
+ (MVIMTypeInfo *)typeInfo __attribute__((swift_name("typeInfo()"))) __attribute__((deprecated("This was moved to another package.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CIOKt")))
@interface MVIMCIOKt : MVIMBase
@property (class, readonly) int32_t DEFAULT_HTTP_BUFFER_SIZE __attribute__((swift_name("DEFAULT_HTTP_BUFFER_SIZE")));
@property (class, readonly) int32_t DEFAULT_HTTP_POOL_SIZE __attribute__((swift_name("DEFAULT_HTTP_POOL_SIZE")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersKt")))
@interface MVIMHeadersKt : MVIMBase
+ (id<MVIMHeaders>)buildHeadersBlock:(void (^)(MVIMHeadersBuilder *))block __attribute__((swift_name("buildHeaders(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildersKt")))
@interface MVIMBuildersKt : MVIMBase
+ (MVIMHttpRequestBuilder *)requestBlock:(void (^)(MVIMHttpRequestBuilder *))block __attribute__((swift_name("request(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FormDslKt")))
@interface MVIMFormDslKt : MVIMBase
+ (NSArray<MVIMPartData *> *)formDataBlock:(void (^)(MVIMFormBuilder *))block __attribute__((swift_name("formData(block:)")));
+ (NSArray<MVIMPartData *> *)formDataValues:(MVIMKotlinArray<MVIMFormPart<id> *> *)values __attribute__((swift_name("formData(values:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientEngineCapabilityKt")))
@interface MVIMHttpClientEngineCapabilityKt : MVIMBase
@property (class, readonly) NSSet<MVIMHttpTimeoutFeature *> *DEFAULT_CAPABILITIES __attribute__((swift_name("DEFAULT_CAPABILITIES")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt")))
@interface MVIMUtilsKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)callContextWithCompletionHandler:(void (^)(id<MVIMKotlinCoroutineContext> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("callContext(completionHandler:)")));
+ (void)mergeHeadersRequestHeaders:(id<MVIMHeaders>)requestHeaders content:(MVIMOutgoingContent *)content block:(void (^)(NSString *, NSString *))block __attribute__((swift_name("mergeHeaders(requestHeaders:content:block:)")));
@property (class, readonly) NSString *KTOR_DEFAULT_USER_AGENT __attribute__((swift_name("KTOR_DEFAULT_USER_AGENT")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpClientEngineKt")))
@interface MVIMHttpClientEngineKt : MVIMBase
+ (id<MVIMHttpClientEngineFactory>)config:(id<MVIMHttpClientEngineFactory>)receiver nested:(void (^)(MVIMHttpClientEngineConfig *))nested __attribute__((swift_name("config(_:nested:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpTimeoutKt")))
@interface MVIMHttpTimeoutKt : MVIMBase
+ (MVIMConnectTimeoutException *)ConnectTimeoutExceptionRequest:(MVIMHttpRequestData *)request cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("ConnectTimeoutException(request:cause:)")));
+ (MVIMConnectTimeoutException *)ConnectTimeoutExceptionUrl:(NSString *)url timeout:(MVIMLong * _Nullable)timeout cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("ConnectTimeoutException(url:timeout:cause:)")));
+ (MVIMSocketTimeoutException *)SocketTimeoutExceptionRequest:(MVIMHttpRequestData *)request cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("SocketTimeoutException(request:cause:)")));
+ (int32_t)convertLongTimeoutToIntWithInfiniteAsZeroTimeout:(int64_t)timeout __attribute__((swift_name("convertLongTimeoutToIntWithInfiniteAsZero(timeout:)")));
+ (int64_t)convertLongTimeoutToLongWithInfiniteAsZeroTimeout:(int64_t)timeout __attribute__((swift_name("convertLongTimeoutToLongWithInfiniteAsZero(timeout:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookiesStorageKt")))
@interface MVIMCookiesStorageKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)addCookie:(id<MVIMCookiesStorage>)receiver urlString:(NSString *)urlString cookie:(MVIMCookie *)cookie completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("addCookie(_:urlString:cookie:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpCookiesKt")))
@interface MVIMHttpCookiesKt : MVIMBase
+ (MVIMCookie * _Nullable)get:(NSArray<MVIMCookie *> *)receiver name:(NSString *)name __attribute__((swift_name("get(_:name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutExceptionsCommonKt")))
@interface MVIMTimeoutExceptionsCommonKt : MVIMBase
+ (id<MVIMByteReadChannel>)mapEngineExceptions:(id<MVIMCoroutineScope>)receiver input:(id<MVIMByteReadChannel>)input request:(MVIMHttpRequestData *)request __attribute__((swift_name("mapEngineExceptions(_:input:request:)")));
+ (id<MVIMByteWriteChannel>)mapEngineExceptions:(id<MVIMCoroutineScope>)receiver output:(id<MVIMByteWriteChannel>)output request:(MVIMHttpRequestData *)request __attribute__((swift_name("mapEngineExceptions(_:output:request:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChunkedTransferEncodingKt")))
@interface MVIMChunkedTransferEncodingKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)decodeChunkedInput:(id<MVIMByteReadChannel>)input out:(id<MVIMByteWriteChannel>)out completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("decodeChunked(input:out:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)decodeChunkedInput:(id<MVIMByteReadChannel>)input out:(id<MVIMByteWriteChannel>)out contentLength:(int64_t)contentLength completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("decodeChunked(input:out:contentLength:completionHandler:)"))) __attribute__((deprecated("The contentLength is ignored for chunked transfer encoding")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)encodeChunkedOutput:(id<MVIMByteWriteChannel>)output input:(id<MVIMByteReadChannel>)input completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("encodeChunked(output:input:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)encodeChunkedOutput:(id<MVIMByteWriteChannel>)output coroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext completionHandler:(void (^)(id<MVIMReaderJob> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("encodeChunked(output:coroutineContext:completionHandler:)")));
+ (id<MVIMWriterJob>)decodeChunked:(id<MVIMCoroutineScope>)receiver input:(id<MVIMByteReadChannel>)input __attribute__((swift_name("decodeChunked(_:input:)"))) __attribute__((deprecated("Specify content length if known or pass -1L")));
+ (id<MVIMWriterJob>)decodeChunked:(id<MVIMCoroutineScope>)receiver input:(id<MVIMByteReadChannel>)input contentLength:(int64_t)contentLength __attribute__((swift_name("decodeChunked(_:input:contentLength:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpBodyKt")))
@interface MVIMHttpBodyKt : MVIMBase
+ (BOOL)expectHttpBodyMethod:(MVIMHttpMethod *)method contentLength:(int64_t)contentLength transferEncoding:(id _Nullable)transferEncoding connectionOptions:(MVIMConnectionOptions * _Nullable)connectionOptions contentType:(id _Nullable)contentType __attribute__((swift_name("expectHttpBody(method:contentLength:transferEncoding:connectionOptions:contentType:)")));
+ (BOOL)expectHttpBodyRequest:(MVIMRequest *)request __attribute__((swift_name("expectHttpBody(request:)")));
+ (BOOL)expectHttpUpgradeMethod:(MVIMHttpMethod *)method upgrade:(id _Nullable)upgrade connectionOptions:(MVIMConnectionOptions * _Nullable)connectionOptions __attribute__((swift_name("expectHttpUpgrade(method:upgrade:connectionOptions:)")));
+ (BOOL)expectHttpUpgradeRequest:(MVIMRequest *)request __attribute__((swift_name("expectHttpUpgrade(request:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)parseHttpBodyHeaders:(MVIMHttpHeadersMap *)headers input:(id<MVIMByteReadChannel>)input out:(id<MVIMByteWriteChannel>)out completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("parseHttpBody(headers:input:out:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)parseHttpBodyContentLength:(int64_t)contentLength transferEncoding:(id _Nullable)transferEncoding connectionOptions:(MVIMConnectionOptions * _Nullable)connectionOptions input:(id<MVIMByteReadChannel>)input out:(id<MVIMByteWriteChannel>)out completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("parseHttpBody(contentLength:transferEncoding:connectionOptions:input:out:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpParserKt")))
@interface MVIMHttpParserKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)parseHeadersInput:(id<MVIMByteReadChannel>)input completionHandler:(void (^)(MVIMHttpHeadersMap * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("parseHeaders(input:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)parseRequestInput:(id<MVIMByteReadChannel>)input completionHandler:(void (^)(MVIMRequest * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("parseRequest(input:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)parseResponseInput:(id<MVIMByteReadChannel>)input completionHandler:(void (^)(MVIMResponse * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("parseResponse(input:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DefaultWebSocketSessionNativeKt")))
@interface MVIMDefaultWebSocketSessionNativeKt : MVIMBase
+ (id<MVIMDefaultWebSocketSession>)DefaultWebSocketSessionSession:(id<MVIMWebSocketSession>)session pingInterval:(int64_t)pingInterval timeoutMillis:(int64_t)timeoutMillis __attribute__((swift_name("DefaultWebSocketSession(session:pingInterval:timeoutMillis:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketExtensionHeaderKt")))
@interface MVIMWebSocketExtensionHeaderKt : MVIMBase
+ (NSArray<MVIMWebSocketExtensionHeader *> *)parseWebSocketExtensionsValue:(NSString *)value __attribute__((swift_name("parseWebSocketExtensions(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WebSocketSessionKt")))
@interface MVIMWebSocketSessionKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)close:(id<MVIMWebSocketSession>)receiver reason:(MVIMCloseReason *)reason completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("close(_:reason:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)close:(id<MVIMWebSocketSession>)receiver cause:(MVIMKotlinThrowable * _Nullable)cause completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("close(_:cause:completionHandler:)"))) __attribute__((deprecated("Close with reason or terminate instead.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)closeExceptionally:(id<MVIMWebSocketSession>)receiver cause:(MVIMKotlinThrowable *)cause completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("closeExceptionally(_:cause:completionHandler:)")));
+ (id<MVIMWebSocketExtension>)extension:(id<MVIMWebSocketSession>)receiver extension:(id<MVIMWebSocketExtensionFactory>)extension __attribute__((swift_name("extension(_:extension:)")));
+ (id<MVIMWebSocketExtension> _Nullable)extensionOrNull:(id<MVIMWebSocketSession>)receiver extension:(id<MVIMWebSocketExtensionFactory>)extension __attribute__((swift_name("extensionOrNull(_:extension:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)send:(id<MVIMWebSocketSession>)receiver content:(MVIMKotlinByteArray *)content completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("send(_:content:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)send:(id<MVIMWebSocketSession>)receiver content:(NSString *)content completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("send(_:content:completionHandler_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLBuilderKt")))
@interface MVIMURLBuilderKt : MVIMBase
@property (class, readonly) int32_t DEFAULT_PORT __attribute__((swift_name("DEFAULT_PORT")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("URLUtilsKt")))
@interface MVIMURLUtilsKt : MVIMBase
+ (MVIMURLBuilder *)URLBuilderBuilder:(MVIMURLBuilder *)builder __attribute__((swift_name("URLBuilder(builder:)")));
+ (MVIMURLBuilder *)URLBuilderUrl:(MVIMUrl *)url __attribute__((swift_name("URLBuilder(url:)")));
+ (MVIMURLBuilder *)URLBuilderUrlString:(NSString *)urlString __attribute__((swift_name("URLBuilder(urlString:)")));
+ (MVIMUrl *)UrlBuilder:(MVIMURLBuilder *)builder __attribute__((swift_name("Url(builder:)")));
+ (MVIMUrl *)UrlUrlString:(NSString *)urlString __attribute__((swift_name("Url(urlString:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContentRangeKt")))
@interface MVIMContentRangeKt : MVIMBase
+ (NSString *)contentRangeHeaderValueRange:(MVIMKotlinLongRange * _Nullable)range fullLength:(MVIMLong * _Nullable)fullLength unit:(MVIMRangeUnits *)unit __attribute__((swift_name("contentRangeHeaderValue(range:fullLength:unit:)")));
+ (NSString *)contentRangeHeaderValueRange:(MVIMKotlinLongRange * _Nullable)range fullLength:(MVIMLong * _Nullable)fullLength unit_:(NSString *)unit __attribute__((swift_name("contentRangeHeaderValue(range:fullLength:unit_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CookieKt")))
@interface MVIMCookieKt : MVIMBase
+ (NSString *)decodeCookieValueEncodedValue:(NSString *)encodedValue encoding:(MVIMCookieEncoding *)encoding __attribute__((swift_name("decodeCookieValue(encodedValue:encoding:)")));
+ (NSString *)encodeCookieValueValue:(NSString *)value encoding:(MVIMCookieEncoding *)encoding __attribute__((swift_name("encodeCookieValue(value:encoding:)")));
+ (NSDictionary<NSString *, NSString *> *)parseClientCookiesHeaderCookiesHeader:(NSString *)cookiesHeader skipEscaped:(BOOL)skipEscaped __attribute__((swift_name("parseClientCookiesHeader(cookiesHeader:skipEscaped:)")));
+ (MVIMCookie *)parseServerSetCookieHeaderCookiesHeader:(NSString *)cookiesHeader __attribute__((swift_name("parseServerSetCookieHeader(cookiesHeader:)")));
+ (NSString *)renderCookieHeaderCookie:(MVIMCookie *)cookie __attribute__((swift_name("renderCookieHeader(cookie:)")));
+ (NSString *)renderSetCookieHeaderCookie:(MVIMCookie *)cookie __attribute__((swift_name("renderSetCookieHeader(cookie:)")));
+ (NSString *)renderSetCookieHeaderName:(NSString *)name value:(NSString *)value encoding:(MVIMCookieEncoding *)encoding maxAge:(int32_t)maxAge expires:(MVIMGMTDate * _Nullable)expires domain:(NSString * _Nullable)domain path:(NSString * _Nullable)path secure:(BOOL)secure httpOnly:(BOOL)httpOnly extensions:(NSDictionary<NSString *, id> *)extensions includeEncoding:(BOOL)includeEncoding __attribute__((swift_name("renderSetCookieHeader(name:value:encoding:maxAge:expires:domain:path:secure:httpOnly:extensions:includeEncoding:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeadersKt_")))
@interface MVIMHeadersKt_ : MVIMBase
+ (id<MVIMHeaders>)headersOf __attribute__((swift_name("headersOf()")));
+ (id<MVIMHeaders>)headersOfPairs:(MVIMKotlinArray<MVIMKotlinPair<NSString *, NSArray<NSString *> *> *> *)pairs __attribute__((swift_name("headersOf(pairs:)")));
+ (id<MVIMHeaders>)headersOfName:(NSString *)name value:(NSString *)value __attribute__((swift_name("headersOf(name:value:)")));
+ (id<MVIMHeaders>)headersOfName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("headersOf(name:values:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IpParserKt")))
@interface MVIMIpParserKt : MVIMBase
+ (BOOL)hostIsIpHost:(NSString *)host __attribute__((swift_name("hostIsIp(host:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ParametersKt")))
@interface MVIMParametersKt : MVIMBase
+ (id<MVIMParameters>)parametersOf __attribute__((swift_name("parametersOf()")));
+ (id<MVIMParameters>)parametersOfPairs:(MVIMKotlinArray<MVIMKotlinPair<NSString *, NSArray<NSString *> *> *> *)pairs __attribute__((swift_name("parametersOf(pairs:)")));
+ (id<MVIMParameters>)parametersOfName:(NSString *)name value:(NSString *)value __attribute__((swift_name("parametersOf(name:value:)")));
+ (id<MVIMParameters>)parametersOfName:(NSString *)name values:(NSArray<NSString *> *)values __attribute__((swift_name("parametersOf(name:values:)")));
+ (id<MVIMParameters>)plus:(id<MVIMParameters>)receiver other:(id<MVIMParameters>)other __attribute__((swift_name("plus(_:other:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpHeaderValueParserKt")))
@interface MVIMHttpHeaderValueParserKt : MVIMBase
+ (NSArray<MVIMHeaderValue *> *)parseAndSortContentTypeHeaderHeader:(NSString * _Nullable)header __attribute__((swift_name("parseAndSortContentTypeHeader(header:)")));
+ (NSArray<MVIMHeaderValue *> *)parseAndSortHeaderHeader:(NSString * _Nullable)header __attribute__((swift_name("parseAndSortHeader(header:)")));
+ (NSArray<MVIMHeaderValue *> *)parseHeaderValueText:(NSString * _Nullable)text __attribute__((swift_name("parseHeaderValue(text:)")));
+ (NSArray<MVIMHeaderValue *> *)parseHeaderValueText:(NSString * _Nullable)text parametersOnly:(BOOL)parametersOnly __attribute__((swift_name("parseHeaderValue(text:parametersOnly:)")));
+ (NSArray<MVIMHeaderValueParam *> *)toHeaderParamsList:(id)receiver __attribute__((swift_name("toHeaderParamsList(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("QueryKt_")))
@interface MVIMQueryKt_ : MVIMBase
+ (id<MVIMParameters>)parseQueryStringQuery:(NSString *)query startIndex:(int32_t)startIndex limit:(int32_t)limit __attribute__((swift_name("parseQueryString(query:startIndex:limit:)")));
+ (void)parseQueryStringToParametersBuilder:(MVIMParametersBuilder *)parametersBuilder query:(NSString *)query startIndex:(int32_t)startIndex limit:(int32_t)limit __attribute__((swift_name("parseQueryStringTo(parametersBuilder:query:startIndex:limit:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RangesKt")))
@interface MVIMRangesKt : MVIMBase
+ (MVIMRangesSpecifier * _Nullable)parseRangesSpecifierRangeSpec:(NSString *)rangeSpec __attribute__((swift_name("parseRangesSpecifier(rangeSpec:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpMessagePropertiesKt")))
@interface MVIMHttpMessagePropertiesKt : MVIMBase
+ (NSArray<MVIMHeaderValue *> *)cacheControl:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("cacheControl(_:)")));
+ (MVIMCharset * _Nullable)charset:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("charset(_:)")));
+ (MVIMCharset * _Nullable)charset_:(id<MVIMHttpMessageBuilder>)receiver __attribute__((swift_name("charset(__:)")));
+ (MVIMKotlinUnit * _Nullable)charset:(id<MVIMHttpMessageBuilder>)receiver charset:(MVIMCharset *)charset __attribute__((swift_name("charset(_:charset:)"))) __attribute__((unavailable("Use content with particular content type and charset instead")));
+ (MVIMLong * _Nullable)contentLength:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("contentLength(_:)")));
+ (MVIMLong * _Nullable)contentLength_:(id<MVIMHttpMessageBuilder>)receiver __attribute__((swift_name("contentLength(__:)")));
+ (void)contentLength:(id<MVIMHttpMessageBuilder>)receiver length:(int32_t)length __attribute__((swift_name("contentLength(_:length:)"))) __attribute__((unavailable("Content-Length is controlled by underlying engine. Don't specify it explicitly.")));
+ (MVIMContentType * _Nullable)contentType:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("contentType(_:)")));
+ (MVIMContentType * _Nullable)contentType_:(id<MVIMHttpMessageBuilder>)receiver __attribute__((swift_name("contentType(__:)")));
+ (void)contentType:(id<MVIMHttpMessageBuilder>)receiver type:(MVIMContentType *)type __attribute__((swift_name("contentType(_:type:)")));
+ (NSArray<MVIMCookie *> *)cookies:(id<MVIMHttpMessageBuilder>)receiver __attribute__((swift_name("cookies(_:)")));
+ (NSString * _Nullable)etag:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("etag(_:)")));
+ (NSString * _Nullable)etag_:(id<MVIMHttpMessageBuilder>)receiver __attribute__((swift_name("etag(__:)")));
+ (void)ifNoneMatch:(id<MVIMHttpMessageBuilder>)receiver value:(NSString *)value __attribute__((swift_name("ifNoneMatch(_:value:)")));
+ (void)maxAge:(id<MVIMHttpMessageBuilder>)receiver seconds:(int32_t)seconds __attribute__((swift_name("maxAge(_:seconds:)")));
+ (NSArray<MVIMCookie *> *)setCookie:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("setCookie(_:)")));
+ (void)userAgent:(id<MVIMHttpMessageBuilder>)receiver content:(NSString *)content __attribute__((swift_name("userAgent(_:content:)")));
+ (NSArray<NSString *> * _Nullable)vary:(id<MVIMHttpMessage>)receiver __attribute__((swift_name("vary(_:)")));
+ (NSArray<NSString *> * _Nullable)vary_:(id<MVIMHttpMessageBuilder>)receiver __attribute__((swift_name("vary(__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CodecsKt")))
@interface MVIMCodecsKt : MVIMBase
+ (NSString *)decodeURLPart:(NSString *)receiver start:(int32_t)start end:(int32_t)end charset:(MVIMCharset *)charset __attribute__((swift_name("decodeURLPart(_:start:end:charset:)")));
+ (NSString *)decodeURLQueryComponent:(NSString *)receiver start:(int32_t)start end:(int32_t)end plusIsSpace:(BOOL)plusIsSpace charset:(MVIMCharset *)charset __attribute__((swift_name("decodeURLQueryComponent(_:start:end:plusIsSpace:charset:)")));
+ (NSString *)encodeOAuth:(NSString *)receiver __attribute__((swift_name("encodeOAuth(_:)")));
+ (NSString *)encodeURLParameter:(NSString *)receiver spaceToPlus:(BOOL)spaceToPlus __attribute__((swift_name("encodeURLParameter(_:spaceToPlus:)")));
+ (NSString *)encodeURLPath:(NSString *)receiver __attribute__((swift_name("encodeURLPath(_:)")));
+ (NSString *)encodeURLQueryComponent:(NSString *)receiver encodeFull:(BOOL)encodeFull spaceToPlus:(BOOL)spaceToPlus charset:(MVIMCharset *)charset __attribute__((swift_name("encodeURLQueryComponent(_:encodeFull:spaceToPlus:charset:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HeaderValueWithParametersKt")))
@interface MVIMHeaderValueWithParametersKt : MVIMBase
+ (NSString *)escapeIfNeeded:(NSString *)receiver __attribute__((swift_name("escapeIfNeeded(_:)")));
+ (NSString *)quote:(NSString *)receiver __attribute__((swift_name("quote(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpUrlEncodedKt")))
@interface MVIMHttpUrlEncodedKt : MVIMBase
+ (NSString *)formUrlEncode:(id<MVIMParameters>)receiver __attribute__((swift_name("formUrlEncode(_:)")));
+ (NSString *)formUrlEncode:(NSArray<MVIMKotlinPair<NSString *, NSString *> *> *)receiver option:(MVIMUrlEncodingOption *)option __attribute__((swift_name("formUrlEncode(_:option:)")));
+ (void)formUrlEncodeTo:(id<MVIMParameters>)receiver out:(id<MVIMKotlinAppendable>)out __attribute__((swift_name("formUrlEncodeTo(_:out:)")));
+ (void)formUrlEncodeTo:(NSArray<MVIMKotlinPair<NSString *, NSString *> *> *)receiver out:(id<MVIMKotlinAppendable>)out option:(MVIMUrlEncodingOption *)option __attribute__((swift_name("formUrlEncodeTo(_:out:option:)")));
+ (id<MVIMParameters>)parseUrlEncodedParameters:(NSString *)receiver defaultEncoding:(MVIMCharset *)defaultEncoding limit:(int32_t)limit __attribute__((swift_name("parseUrlEncodedParameters(_:defaultEncoding:limit:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateUtilsKt")))
@interface MVIMDateUtilsKt : MVIMBase
+ (MVIMGMTDate *)fromCookieToGmtDate:(NSString *)receiver __attribute__((swift_name("fromCookieToGmtDate(_:)")));
+ (MVIMGMTDate *)fromHttpToGmtDate:(NSString *)receiver __attribute__((swift_name("fromHttpToGmtDate(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HttpAuthHeaderKt")))
@interface MVIMHttpAuthHeaderKt : MVIMBase
+ (MVIMHttpAuthHeader * _Nullable)parseAuthorizationHeaderHeaderValue:(NSString *)headerValue __attribute__((swift_name("parseAuthorizationHeader(headerValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CachingOptionsKt")))
@interface MVIMCachingOptionsKt : MVIMBase
@property (class, readonly) MVIMAttributeKey<MVIMCachingOptions *> *CachingProperty __attribute__((swift_name("CachingProperty")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MultipartKt")))
@interface MVIMMultipartKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)forEachPart:(id<MVIMMultiPartData>)receiver partHandler:(id<MVIMKotlinSuspendFunction1>)partHandler completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("forEachPart(_:partHandler:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readAllParts:(id<MVIMMultiPartData>)receiver completionHandler:(void (^)(NSArray<MVIMPartData *> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAllParts(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UtilsKt_")))
@interface MVIMUtilsKt_ : MVIMBase
+ (NSString *)websocketServerAcceptNonce:(NSString *)nonce __attribute__((swift_name("websocketServerAccept(nonce:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AttributesNativeKt")))
@interface MVIMAttributesNativeKt : MVIMBase
+ (id<MVIMAttributes>)AttributesConcurrent:(BOOL)concurrent __attribute__((swift_name("Attributes(concurrent:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CryptoNativeKt")))
@interface MVIMCryptoNativeKt : MVIMBase
+ (id<MVIMDigest>)DigestName:(NSString *)name __attribute__((swift_name("Digest(name:)")));
+ (NSString *)generateNonce __attribute__((swift_name("generateNonce()")));
+ (MVIMKotlinByteArray *)sha1Bytes:(MVIMKotlinByteArray *)bytes __attribute__((swift_name("sha1(bytes:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutinesUtilsKt")))
@interface MVIMCoroutinesUtilsKt : MVIMBase
+ (id<MVIMKotlinCoroutineContext>)SilentSupervisorParent:(id<MVIMJob> _Nullable)parent __attribute__((swift_name("SilentSupervisor(parent:)")));
+ (void)printDebugTree:(id<MVIMJob>)receiver offset:(int32_t)offset __attribute__((swift_name("printDebugTree(_:offset:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionsKt")))
@interface MVIMCollectionsKt : MVIMBase
+ (MVIMMutableDictionary<NSString *, id> *)caseInsensitiveMap __attribute__((swift_name("caseInsensitiveMap()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CryptoKt")))
@interface MVIMCryptoKt : MVIMBase
+ (MVIMKotlinByteArray *)generateNonceSize:(int32_t)size __attribute__((swift_name("generateNonce(size:)")));
+ (NSString *)hexBytes:(MVIMKotlinByteArray *)bytes __attribute__((swift_name("hex(bytes:)")));
+ (MVIMKotlinByteArray *)hexS:(NSString *)s __attribute__((swift_name("hex(s:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)build:(id<MVIMDigest>)receiver bytes:(MVIMKotlinByteArray *)bytes completionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("build(_:bytes:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)build:(id<MVIMDigest>)receiver string:(NSString *)string charset:(MVIMCharset *)charset completionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("build(_:string:charset:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringValuesKt")))
@interface MVIMStringValuesKt : MVIMBase
+ (id<MVIMStringValues>)valuesOf __attribute__((swift_name("valuesOf()")));
+ (id<MVIMStringValues>)valuesOfPairs:(MVIMKotlinArray<MVIMKotlinPair<NSString *, NSArray<NSString *> *> *> *)pairs caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(pairs:caseInsensitiveKey:)")));
+ (id<MVIMStringValues>)valuesOfName:(NSString *)name value:(NSString *)value caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(name:value:caseInsensitiveKey:)")));
+ (id<MVIMStringValues>)valuesOfName:(NSString *)name values:(NSArray<NSString *> *)values caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(name:values:caseInsensitiveKey:)")));
+ (id<MVIMStringValues>)valuesOfMap:(NSDictionary<NSString *, id> *)map caseInsensitiveKey:(BOOL)caseInsensitiveKey __attribute__((swift_name("valuesOf(map:caseInsensitiveKey:)")));
+ (id<MVIMStringValues>)filter:(id<MVIMStringValues>)receiver keepEmpty:(BOOL)keepEmpty predicate:(MVIMBoolean *(^)(NSString *, NSString *))predicate __attribute__((swift_name("filter(_:keepEmpty:predicate:)")));
+ (NSArray<MVIMKotlinPair<NSString *, NSString *> *> *)flattenEntries:(id<MVIMStringValues>)receiver __attribute__((swift_name("flattenEntries(_:)")));
+ (void)flattenForEach:(id<MVIMStringValues>)receiver block:(void (^)(NSString *, NSString *))block __attribute__((swift_name("flattenForEach(_:block:)")));
+ (NSDictionary<NSString *, NSArray<NSString *> *> *)toMap:(id<MVIMStringValues>)receiver __attribute__((swift_name("toMap(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TextKt")))
@interface MVIMTextKt : MVIMBase
+ (MVIMKotlinPair<NSString *, NSString *> *)chomp:(NSString *)receiver separator:(NSString *)separator onMissingDelimiter:(MVIMKotlinPair<NSString *, NSString *> *(^)(void))onMissingDelimiter __attribute__((swift_name("chomp(_:separator:onMissingDelimiter:)")));
+ (NSString *)escapeHTML:(NSString *)receiver __attribute__((swift_name("escapeHTML(_:)")));
+ (NSString *)toLowerCasePreservingASCIIRules:(NSString *)receiver __attribute__((swift_name("toLowerCasePreservingASCIIRules(_:)")));
+ (NSString *)toUpperCasePreservingASCIIRules:(NSString *)receiver __attribute__((swift_name("toUpperCasePreservingASCIIRules(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteChannelsKt")))
@interface MVIMByteChannelsKt : MVIMBase
+ (void)doCopyToBoth:(id<MVIMByteReadChannel>)receiver first:(id<MVIMByteWriteChannel>)first second:(id<MVIMByteWriteChannel>)second __attribute__((swift_name("doCopyToBoth(_:first:second:)")));
+ (MVIMKotlinPair<id<MVIMByteReadChannel>, id<MVIMByteReadChannel>> *)split:(id<MVIMByteReadChannel>)receiver coroutineScope:(id<MVIMCoroutineScope>)coroutineScope __attribute__((swift_name("split(_:coroutineScope:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toByteArray:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toByteArray(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Base64Kt")))
@interface MVIMBase64Kt : MVIMBase
+ (MVIMKotlinByteArray *)decodeBase64Bytes:(NSString *)receiver __attribute__((swift_name("decodeBase64Bytes(_:)")));
+ (NSString *)decodeBase64String:(NSString *)receiver __attribute__((swift_name("decodeBase64String(_:)")));
+ (NSString *)encodeBase64:(NSString *)receiver __attribute__((swift_name("encodeBase64(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CharsetKt")))
@interface MVIMCharsetKt : MVIMBase
+ (BOOL)isLowerCase:(unichar)receiver __attribute__((swift_name("isLowerCase(_:)")));
+ (MVIMKotlinCharArray *)toCharArray:(NSString *)receiver __attribute__((swift_name("toCharArray(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AttributesKt")))
@interface MVIMAttributesKt : MVIMBase
+ (void)putAll:(id<MVIMAttributes>)receiver other:(id<MVIMAttributes>)other __attribute__((swift_name("putAll(_:other:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionsNativeKt")))
@interface MVIMCollectionsNativeKt : MVIMBase
+ (NSSet<id> *)unmodifiable:(NSSet<id> *)receiver __attribute__((swift_name("unmodifiable(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NetworkAddressNativeKt")))
@interface MVIMNetworkAddressNativeKt : MVIMBase
+ (MVIMNetworkAddress *)NetworkAddressHostname:(NSString *)hostname port:(int32_t)port __attribute__((swift_name("NetworkAddress(hostname:port:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReadersKt")))
@interface MVIMReadersKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toByteArray:(id<MVIMByteReadChannel>)receiver limit:(int32_t)limit completionHandler:(void (^)(MVIMKotlinByteArray * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toByteArray(_:limit:completionHandler:)")));
+ (void)use:(id<MVIMByteWriteChannel>)receiver block:(void (^)(id<MVIMByteWriteChannel>))block __attribute__((swift_name("use(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DateNativeKt")))
@interface MVIMDateNativeKt : MVIMBase
+ (MVIMGMTDate *)GMTDateSeconds:(int32_t)seconds minutes:(int32_t)minutes hours:(int32_t)hours dayOfMonth:(int32_t)dayOfMonth month:(MVIMMonth_ *)month year:(int32_t)year __attribute__((swift_name("GMTDate(seconds:minutes:hours:dayOfMonth:month:year:)")));
+ (MVIMGMTDate *)GMTDateTimestamp:(MVIMLong * _Nullable)timestamp __attribute__((swift_name("GMTDate(timestamp:)")));
+ (int64_t)getTimeMillis __attribute__((swift_name("getTimeMillis()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PipelineContextKt")))
@interface MVIMPipelineContextKt : MVIMBase
+ (id<MVIMPipelineExecutor>)pipelineExecutorForContext:(id)context interceptors:(NSArray<id<MVIMKotlinSuspendFunction2>> *)interceptors subject:(id)subject __attribute__((swift_name("pipelineExecutorFor(context:interceptors:subject:)"))) __attribute__((deprecated("This is going to become internal. Use Pipeline.execute() instead.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TypeInfoNativeKt")))
@interface MVIMTypeInfoNativeKt : MVIMBase
+ (id<MVIMTypeInfo>)typeInfo __attribute__((swift_name("typeInfo()")));
+ (BOOL)instanceOf:(id)receiver type:(id<MVIMKotlinKClass>)type __attribute__((swift_name("instanceOf(_:type:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteChannelCtorKt")))
@interface MVIMByteChannelCtorKt : MVIMBase
+ (id<MVIMByteReadChannel>)ByteReadChannelContent:(MVIMKotlinByteArray *)content __attribute__((swift_name("ByteReadChannel(content:)")));
+ (id<MVIMByteReadChannel>)ByteReadChannelContent:(MVIMKotlinByteArray *)content offset:(int32_t)offset __attribute__((swift_name("ByteReadChannel(content:offset:)")));
+ (id<MVIMByteReadChannel>)ByteReadChannelText:(NSString *)text charset:(MVIMCharset *)charset __attribute__((swift_name("ByteReadChannel(text:charset:)")));
@property (class, readonly) id<MVIMByteReadChannel> EmptyByteReadChannel __attribute__((swift_name("EmptyByteReadChannel"))) __attribute__((unavailable("Use ByteReadChannel.Empty instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteChannelNativeKt")))
@interface MVIMByteChannelNativeKt : MVIMBase
+ (id<MVIMByteChannel>)ByteChannelAutoFlush:(BOOL)autoFlush __attribute__((swift_name("ByteChannel(autoFlush:)")));
+ (id<MVIMByteReadChannel>)ByteReadChannelContent:(MVIMKotlinByteArray *)content offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("ByteReadChannel(content:offset:length:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doCopyTo:(id<MVIMByteReadChannel>)receiver dst:(id<MVIMByteWriteChannel>)dst limit:(int64_t)limit completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyTo(_:dst:limit:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinTo:(id<MVIMByteReadChannel>)receiver dst:(id<MVIMByteWriteChannel>)dst closeOnEnd:(BOOL)closeOnEnd completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("joinTo(_:dst:closeOnEnd:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutinesKt")))
@interface MVIMCoroutinesKt : MVIMBase
+ (id<MVIMReaderJob>)readerCoroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext channel:(id<MVIMByteChannel>)channel parent:(id<MVIMJob> _Nullable)parent block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("reader(coroutineContext:channel:parent:block:)"))) __attribute__((deprecated("Use scope.reader instead")));
+ (id<MVIMReaderJob>)readerCoroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush parent:(id<MVIMJob> _Nullable)parent block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("reader(coroutineContext:autoFlush:parent:block:)"))) __attribute__((deprecated("Use scope.reader instead")));
+ (id<MVIMWriterJob>)writerCoroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext channel:(id<MVIMByteChannel>)channel parent:(id<MVIMJob> _Nullable)parent block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("writer(coroutineContext:channel:parent:block:)"))) __attribute__((deprecated("Use scope.writer instead")));
+ (id<MVIMWriterJob>)writerCoroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush parent:(id<MVIMJob> _Nullable)parent block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("writer(coroutineContext:autoFlush:parent:block:)"))) __attribute__((deprecated("Use scope.writer instead")));
+ (id<MVIMReaderJob>)reader:(id<MVIMCoroutineScope>)receiver coroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext channel:(id<MVIMByteChannel>)channel block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("reader(_:coroutineContext:channel:block:)")));
+ (id<MVIMReaderJob>)reader:(id<MVIMCoroutineScope>)receiver coroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("reader(_:coroutineContext:autoFlush:block:)")));
+ (id<MVIMWriterJob>)writer:(id<MVIMCoroutineScope>)receiver coroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext channel:(id<MVIMByteChannel>)channel block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("writer(_:coroutineContext:channel:block:)")));
+ (id<MVIMWriterJob>)writer:(id<MVIMCoroutineScope>)receiver coroutineContext:(id<MVIMKotlinCoroutineContext>)coroutineContext autoFlush:(BOOL)autoFlush block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("writer(_:coroutineContext:autoFlush:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadChannelKt")))
@interface MVIMByteReadChannelKt : MVIMBase
+ (BOOL)cancel:(id<MVIMByteReadChannel>)receiver __attribute__((swift_name("cancel(_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doCopyAndClose:(id<MVIMByteReadChannel>)receiver dst:(id<MVIMByteWriteChannel>)dst limit:(int64_t)limit completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyAndClose(_:dst:limit:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)doCopyTo:(id<MVIMByteReadChannel>)receiver dst:(id<MVIMByteWriteChannel>)dst completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("doCopyTo(_:dst:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)discard:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discard(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)discardExact:(id<MVIMByteReadChannel>)receiver n:(int64_t)n completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("discardExact(_:n:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readAvailable:(id<MVIMByteReadChannel>)receiver dst:(MVIMKotlinByteArray *)dst completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readAvailable(_:dst:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFully:(id<MVIMByteReadChannel>)receiver dst:(MVIMIoBuffer *)dst completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(_:dst:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFully:(id<MVIMByteReadChannel>)receiver dst:(MVIMKotlinByteArray *)dst completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFully(_:dst:completionHandler_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readPacket:(id<MVIMByteReadChannel>)receiver size:(int32_t)size completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readPacket(_:size:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readRemaining:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readRemaining:(id<MVIMByteReadChannel>)receiver limit:(int64_t)limit completionHandler:(void (^)(MVIMByteReadPacket * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readRemaining(_:limit:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readUTF8Line:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(NSString * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8Line(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readUTF8LineTo:(id<MVIMByteReadChannel>)receiver out:(id<MVIMKotlinAppendable>)out completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readUTF8LineTo(_:out:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteWriteChannelKt")))
@interface MVIMByteWriteChannelKt : MVIMBase
+ (BOOL)close:(id<MVIMByteWriteChannel>)receiver __attribute__((swift_name("close(_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeAvailable:(id<MVIMByteWriteChannel>)receiver src:(MVIMKotlinByteArray *)src completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeAvailable(_:src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeBoolean:(id<MVIMByteWriteChannel>)receiver b:(BOOL)b completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeBoolean(_:b:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeByte:(id<MVIMByteWriteChannel>)receiver b:(int32_t)b completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeByte(_:b:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeChar:(id<MVIMByteWriteChannel>)receiver ch:(unichar)ch completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeChar(_:ch:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFully:(id<MVIMByteWriteChannel>)receiver src:(MVIMKotlinByteArray *)src completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFully(_:src:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeInt:(id<MVIMByteWriteChannel>)receiver i:(int64_t)i completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(_:i:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeInt:(id<MVIMByteWriteChannel>)receiver i:(int64_t)i byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(_:i:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writePacket:(id<MVIMByteWriteChannel>)receiver headerSizeHint:(int32_t)headerSizeHint builder:(void (^)(MVIMBytePacketBuilder *))builder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writePacket(_:headerSizeHint:builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writePacketSuspend:(id<MVIMByteWriteChannel>)receiver builder:(id<MVIMKotlinSuspendFunction1>)builder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writePacketSuspend(_:builder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShort:(id<MVIMByteWriteChannel>)receiver s:(int32_t)s completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(_:s:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShort:(id<MVIMByteWriteChannel>)receiver s:(int32_t)s byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(_:s:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeStringUtf8:(id<MVIMByteWriteChannel>)receiver s:(id)s completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeStringUtf8(_:s:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeStringUtf8:(id<MVIMByteWriteChannel>)receiver s:(NSString *)s completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeStringUtf8(_:s:completionHandler_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("NativeUtilsNativeKt")))
@interface MVIMNativeUtilsNativeKt : MVIMBase
+ (void)makeShared:(id)receiver __attribute__((swift_name("makeShared(_:)")));
+ (void)preventFreeze:(id)receiver __attribute__((swift_name("preventFreeze(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReadSessionKt")))
@interface MVIMReadSessionKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)read:(id<MVIMByteReadChannel>)receiver desiredSize:(int32_t)desiredSize block:(MVIMInt *(^)(MVIMMemory *, MVIMLong *, MVIMLong *))block completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("read(_:desiredSize:block:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelLittleEndianKt")))
@interface MVIMChannelLittleEndianKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readDouble:(id<MVIMByteReadChannel>)receiver byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDouble(_:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readDoubleLittleEndian:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMDouble * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readDoubleLittleEndian(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFloat:(id<MVIMByteReadChannel>)receiver byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloat(_:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readFloatLittleEndian:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMFloat * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readFloatLittleEndian(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readInt:(id<MVIMByteReadChannel>)receiver byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readInt(_:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readIntLittleEndian:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readIntLittleEndian(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readLong:(id<MVIMByteReadChannel>)receiver byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLong(_:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readLongLittleEndian:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMLong * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readLongLittleEndian(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readShort:(id<MVIMByteReadChannel>)receiver byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShort(_:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)readShortLittleEndian:(id<MVIMByteReadChannel>)receiver completionHandler:(void (^)(MVIMShort * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("readShortLittleEndian(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeDouble:(id<MVIMByteWriteChannel>)receiver value:(double)value byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeDouble(_:value:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeDoubleLittleEndian:(id<MVIMByteWriteChannel>)receiver value:(double)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeDoubleLittleEndian(_:value:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFloat:(id<MVIMByteWriteChannel>)receiver value:(float)value byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloat(_:value:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeFloatLittleEndian:(id<MVIMByteWriteChannel>)receiver value:(float)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeFloatLittleEndian(_:value:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeInt:(id<MVIMByteWriteChannel>)receiver value:(int32_t)value byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeInt(_:value:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeIntLittleEndian:(id<MVIMByteWriteChannel>)receiver value:(int32_t)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeIntLittleEndian(_:value:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeLong:(id<MVIMByteWriteChannel>)receiver value:(int64_t)value byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeLong(_:value:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeLongLittleEndian:(id<MVIMByteWriteChannel>)receiver value:(int64_t)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeLongLittleEndian(_:value:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShort:(id<MVIMByteWriteChannel>)receiver value:(int16_t)value byteOrder:(MVIMByteOrder *)byteOrder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeShort(_:value:byteOrder:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)writeShortLittleEndian:(id<MVIMByteWriteChannel>)receiver value:(int16_t)value completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("writeShortLittleEndian(_:value:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WriterSessionKt")))
@interface MVIMWriterSessionKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)write:(id<MVIMByteWriteChannel>)receiver desiredSpace:(int32_t)desiredSpace block:(MVIMInt *(^)(MVIMMemory *, MVIMLong *, MVIMLong *))block completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("write(_:desiredSpace:block:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrderKt")))
@interface MVIMByteOrderKt : MVIMBase
+ (int8_t)highByte:(int16_t)receiver __attribute__((swift_name("highByte(_:)")));
+ (int32_t)highInt:(int64_t)receiver __attribute__((swift_name("highInt(_:)")));
+ (int16_t)highShort:(int32_t)receiver __attribute__((swift_name("highShort(_:)")));
+ (int8_t)lowByte:(int16_t)receiver __attribute__((swift_name("lowByte(_:)")));
+ (int32_t)lowInt:(int64_t)receiver __attribute__((swift_name("lowInt(_:)")));
+ (int16_t)lowShort:(int32_t)receiver __attribute__((swift_name("lowShort(_:)")));
+ (uint32_t)reverseByteOrder:(uint32_t)receiver __attribute__((swift_name("reverseByteOrder(_:)")));
+ (uint64_t)reverseByteOrder_:(uint64_t)receiver __attribute__((swift_name("reverseByteOrder(__:)")));
+ (uint16_t)reverseByteOrder__:(uint16_t)receiver __attribute__((swift_name("reverseByteOrder(___:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MemoryFactoryKt")))
@interface MVIMMemoryFactoryKt : MVIMBase
+ (id _Nullable)withMemorySize:(int32_t)size block:(id _Nullable (^)(MVIMMemory *))block __attribute__((swift_name("withMemory(size:block:)")));
+ (id _Nullable)withMemorySize:(int64_t)size block_:(id _Nullable (^)(MVIMMemory *))block __attribute__((swift_name("withMemory(size:block_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MemoryFactoryNativeKt")))
@interface MVIMMemoryFactoryNativeKt : MVIMBase
+ (MVIMMemory *)doAllocMemory:(id<MVIMKotlinNativePlacement>)receiver size:(int32_t)size __attribute__((swift_name("doAllocMemory(_:size:)")));
+ (MVIMMemory *)doAllocMemory:(id<MVIMKotlinNativePlacement>)receiver size_:(int64_t)size __attribute__((swift_name("doAllocMemory(_:size_:)")));
+ (void)free:(id<MVIMKotlinNativeFreeablePlacement>)receiver memory:(MVIMMemory *)memory __attribute__((swift_name("free(_:memory:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MemoryNativeKt")))
@interface MVIMMemoryNativeKt : MVIMBase
+ (void)doCopyTo:(void *)receiver destination:(MVIMMemory *)destination offset:(int32_t)offset length:(int32_t)length destinationOffset:(int32_t)destinationOffset __attribute__((swift_name("doCopyTo(_:destination:offset:length:destinationOffset:)")));
+ (void)doCopyTo:(void *)receiver destination:(MVIMMemory *)destination offset:(int64_t)offset length:(int64_t)length destinationOffset_:(int64_t)destinationOffset __attribute__((swift_name("doCopyTo(_:destination:offset:length:destinationOffset_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteOrderNativeKt")))
@interface MVIMByteOrderNativeKt : MVIMBase
+ (double)reverseByteOrder:(double)receiver __attribute__((swift_name("reverseByteOrder(_:)")));
+ (float)reverseByteOrder_:(float)receiver __attribute__((swift_name("reverseByteOrder(__:)")));
+ (int32_t)reverseByteOrder__:(int32_t)receiver __attribute__((swift_name("reverseByteOrder(___:)")));
+ (int64_t)reverseByteOrder___:(int64_t)receiver __attribute__((swift_name("reverseByteOrder(____:)")));
+ (int16_t)reverseByteOrder____:(int16_t)receiver __attribute__((swift_name("reverseByteOrder(_____:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedNativeKt")))
@interface MVIMSharedNativeKt : MVIMBase
+ (id<MVIMKotlinReadWriteProperty>)sharedValue:(id _Nullable)value __attribute__((swift_name("shared(value:)")));
+ (id<MVIMKotlinReadOnlyProperty>)threadLocalValue:(id)value __attribute__((swift_name("threadLocal(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlatformKt")))
@interface MVIMPlatformKt : MVIMBase
+ (MVIMBytePacketBuilder *)BytePacketBuilderHeaderSizeHint:(int32_t)headerSizeHint __attribute__((swift_name("BytePacketBuilder(headerSizeHint:)")));
@property (class, readonly) int32_t PACKET_MAX_COPY_SIZE __attribute__((swift_name("PACKET_MAX_COPY_SIZE")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PacketKt")))
@interface MVIMPacketKt : MVIMBase
+ (BOOL)isEmpty:(id<MVIMInput>)receiver __attribute__((swift_name("isEmpty(_:)"))) __attribute__((deprecated("Use endOfInput property instead")));
+ (BOOL)isNotEmpty:(id<MVIMInput>)receiver __attribute__((swift_name("isNotEmpty(_:)"))) __attribute__((deprecated("This makes no sense for streaming inputs. Some use-cases are covered by endOfInput property")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteReadPacketKt")))
@interface MVIMByteReadPacketKt : MVIMBase
+ (MVIMByteReadPacket *)ByteReadPacketArray:(MVIMKotlinByteArray *)array offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("ByteReadPacket(array:offset:length:)")));
+ (MVIMByteReadPacket *)ByteReadPacketArray:(MVIMKotlinByteArray *)array offset:(int32_t)offset length:(int32_t)length block:(void (^)(MVIMKotlinByteArray *))block __attribute__((swift_name("ByteReadPacket(array:offset:length:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("IoBufferNativeKt")))
@interface MVIMIoBufferNativeKt : MVIMBase
+ (MVIMChunkBuffer *)ChunkBufferPtr:(void *)ptr lengthInBytes:(int32_t)lengthInBytes origin:(MVIMChunkBuffer * _Nullable)origin __attribute__((swift_name("ChunkBuffer(ptr:lengthInBytes:origin:)")));
+ (MVIMChunkBuffer *)ChunkBufferPtr:(void *)ptr lengthInBytes:(int64_t)lengthInBytes origin_:(MVIMChunkBuffer * _Nullable)origin __attribute__((swift_name("ChunkBuffer(ptr:lengthInBytes:origin_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringsNativeKt")))
@interface MVIMStringsNativeKt : MVIMBase
+ (NSString *)StringBytes:(MVIMKotlinByteArray *)bytes offset:(int32_t)offset length:(int32_t)length charset:(MVIMCharset *)charset __attribute__((swift_name("String(bytes:offset:length:charset:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuilderKt")))
@interface MVIMBuilderKt : MVIMBase
+ (MVIMByteReadPacket *)buildPacketHeaderSizeHint:(int32_t)headerSizeHint block:(void (^)(MVIMBytePacketBuilder *))block __attribute__((swift_name("buildPacket(headerSizeHint:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BufferFactoryKt")))
@interface MVIMBufferFactoryKt : MVIMBase
+ (id _Nullable)withBufferPool:(id<MVIMObjectPool>)pool block:(id _Nullable (^)(MVIMBuffer *))block __attribute__((swift_name("withBuffer(pool:block:)")));
+ (id _Nullable)withBufferSize:(int32_t)size block:(id _Nullable (^)(MVIMBuffer *))block __attribute__((swift_name("withBuffer(size:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OutputKt")))
@interface MVIMOutputKt : MVIMBase
+ (id<MVIMKotlinAppendable>)append:(id<MVIMOutput>)receiver csq:(MVIMKotlinCharArray *)csq start:(int32_t)start end:(int32_t)end __attribute__((swift_name("append(_:csq:start:end:)")));
+ (id<MVIMKotlinAppendable>)append:(id<MVIMOutput>)receiver csq:(id)csq start:(int32_t)start end_:(int32_t)end __attribute__((swift_name("append(_:csq:start:end_:)")));
+ (void)fill:(id<MVIMOutput>)receiver times:(int64_t)times value:(int8_t)value __attribute__((swift_name("fill(_:times:value:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMMemory *)src offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMMemory *)src offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("writeFully(_:src:offset:length_:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMBuffer *)src length:(int32_t)length __attribute__((swift_name("writeFully(_:src:length:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMKotlinByteArray *)src offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length__:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMKotlinDoubleArray *)src offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length___:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMKotlinFloatArray *)src offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length____:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMKotlinIntArray *)src offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length_____:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMKotlinLongArray *)src offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length______:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(MVIMKotlinShortArray *)src offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length_______:)")));
+ (void)writePacket:(id<MVIMOutput>)receiver packet:(MVIMByteReadPacket *)packet __attribute__((swift_name("writePacket(_:packet:)")));
+ (void)writeWhile:(id<MVIMOutput>)receiver block:(MVIMBoolean *(^)(MVIMBuffer *))block __attribute__((swift_name("writeWhile(_:block:)")));
+ (void)writeWhileSize:(id<MVIMOutput>)receiver initialSize:(int32_t)initialSize block:(MVIMInt *(^)(MVIMBuffer *))block __attribute__((swift_name("writeWhileSize(_:initialSize:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CopyKt")))
@interface MVIMCopyKt : MVIMBase
+ (int64_t)doCopyTo:(id<MVIMInput>)receiver output:(id<MVIMOutput>)output __attribute__((swift_name("doCopyTo(_:output:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputKt")))
@interface MVIMInputKt : MVIMBase
+ (int64_t)discard:(id<MVIMInput>)receiver __attribute__((swift_name("discard(_:)")));
+ (void)discardExact:(id<MVIMInput>)receiver n:(int32_t)n __attribute__((swift_name("discardExact(_:n:)")));
+ (void)discardExact:(id<MVIMInput>)receiver n_:(int64_t)n __attribute__((swift_name("discardExact(_:n_:)")));
+ (void)forEach:(id<MVIMInput>)receiver block:(void (^)(MVIMByte *))block __attribute__((swift_name("forEach(_:block:)")));
+ (unichar)peekCharUtf8:(id<MVIMInput>)receiver __attribute__((swift_name("peekCharUtf8(_:)")));
+ (void)takeWhile:(id<MVIMInput>)receiver block:(MVIMBoolean *(^)(MVIMBuffer *))block __attribute__((swift_name("takeWhile(_:block:)")));
+ (void)takeWhileSize:(id<MVIMInput>)receiver initialSize:(int32_t)initialSize block:(MVIMInt *(^)(MVIMBuffer *))block __attribute__((swift_name("takeWhileSize(_:initialSize:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ScannerKt")))
@interface MVIMScannerKt : MVIMBase
+ (int64_t)discardUntilDelimiter:(id<MVIMInput>)receiver delimiter:(int8_t)delimiter __attribute__((swift_name("discardUntilDelimiter(_:delimiter:)")));
+ (int64_t)discardUntilDelimiters:(id<MVIMInput>)receiver delimiter1:(int8_t)delimiter1 delimiter2:(int8_t)delimiter2 __attribute__((swift_name("discardUntilDelimiters(_:delimiter1:delimiter2:)")));
+ (int64_t)readUntilDelimiter:(id<MVIMInput>)receiver delimiter:(int8_t)delimiter dst:(id<MVIMOutput>)dst __attribute__((swift_name("readUntilDelimiter(_:delimiter:dst:)")));
+ (int32_t)readUntilDelimiter:(id<MVIMInput>)receiver delimiter:(int8_t)delimiter dst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readUntilDelimiter(_:delimiter:dst:offset:length:)")));
+ (int64_t)readUntilDelimiters:(id<MVIMInput>)receiver delimiter1:(int8_t)delimiter1 delimiter2:(int8_t)delimiter2 dst:(id<MVIMOutput>)dst __attribute__((swift_name("readUntilDelimiters(_:delimiter1:delimiter2:dst:)")));
+ (int32_t)readUntilDelimiters:(id<MVIMInput>)receiver delimiter1:(int8_t)delimiter1 delimiter2:(int8_t)delimiter2 dst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readUntilDelimiters(_:delimiter1:delimiter2:dst:offset:length:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputPeekKt")))
@interface MVIMInputPeekKt : MVIMBase
+ (int32_t)peekTo:(id<MVIMInput>)receiver destination:(MVIMBuffer *)destination offset:(int32_t)offset min:(int32_t)min max:(int32_t)max __attribute__((swift_name("peekTo(_:destination:offset:min:max:)"))) __attribute__((deprecated("Use peekTo(Memory) instead.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputArraysKt")))
@interface MVIMInputArraysKt : MVIMBase
+ (int32_t)readAvailable:(id<MVIMInput>)receiver destination:(MVIMMemory *)destination destinationOffset:(int32_t)destinationOffset length:(int32_t)length __attribute__((swift_name("readAvailable(_:destination:destinationOffset:length:)")));
+ (int64_t)readAvailable:(id<MVIMInput>)receiver destination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset length_:(int64_t)length __attribute__((swift_name("readAvailable(_:destination:destinationOffset:length_:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMBuffer *)dst length:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:length:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMKotlinDoubleArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length_:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMKotlinFloatArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length__:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMKotlinIntArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length___:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMKotlinLongArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length____:)")));
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(MVIMKotlinShortArray *)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length_____:)")));
+ (void)readFully:(id<MVIMInput>)receiver destination:(MVIMMemory *)destination destinationOffset:(int32_t)destinationOffset length:(int32_t)length __attribute__((swift_name("readFully(_:destination:destinationOffset:length:)")));
+ (void)readFully:(id<MVIMInput>)receiver destination:(MVIMMemory *)destination destinationOffset:(int64_t)destinationOffset length_:(int64_t)length __attribute__((swift_name("readFully(_:destination:destinationOffset:length_:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMBuffer *)dst length:(int32_t)length __attribute__((swift_name("readFully(_:dst:length:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMKotlinByteArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMKotlinDoubleArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length_:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMKotlinFloatArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length__:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMKotlinIntArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length___:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMKotlinLongArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length____:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(MVIMKotlinShortArray *)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length_____:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputArraysNativeKt")))
@interface MVIMInputArraysNativeKt : MVIMBase
+ (int32_t)readAvailable:(id<MVIMInput>)receiver dst:(void *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length:)")));
+ (int64_t)readAvailable:(id<MVIMInput>)receiver dst:(void *)dst offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("readAvailable(_:dst:offset:length_:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(void *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(void *)dst offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("readFully(_:dst:offset:length_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputLittleEndianKt")))
@interface MVIMInputLittleEndianKt : MVIMBase
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length_:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length__:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length___:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length____:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length_____:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length______:)")));
+ (int32_t)readAvailableLittleEndian:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readAvailableLittleEndian(_:dst:offset:length_______:)")));
+ (double)readDouble:(id<MVIMInput>)receiver byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("readDouble(_:byteOrder:)")));
+ (double)readDoubleLittleEndian:(id<MVIMInput>)receiver __attribute__((swift_name("readDoubleLittleEndian(_:)")));
+ (float)readFloat:(id<MVIMInput>)receiver byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("readFloat(_:byteOrder:)")));
+ (float)readFloatLittleEndian:(id<MVIMInput>)receiver __attribute__((swift_name("readFloatLittleEndian(_:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinDoubleArray *)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinFloatArray *)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length_:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinIntArray *)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length__:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinLongArray *)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length___:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(MVIMKotlinShortArray *)dst offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length____:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length_____:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length______:)")));
+ (void)readFullyLittleEndian:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("readFullyLittleEndian(_:dst:offset:length_______:)")));
+ (int32_t)readInt:(id<MVIMInput>)receiver byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("readInt(_:byteOrder:)")));
+ (int32_t)readIntLittleEndian:(id<MVIMInput>)receiver __attribute__((swift_name("readIntLittleEndian(_:)")));
+ (int64_t)readLong:(id<MVIMInput>)receiver byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("readLong(_:byteOrder:)")));
+ (int64_t)readLongLittleEndian:(id<MVIMInput>)receiver __attribute__((swift_name("readLongLittleEndian(_:)")));
+ (int16_t)readShort:(id<MVIMInput>)receiver byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("readShort(_:byteOrder:)")));
+ (int16_t)readShortLittleEndian:(id<MVIMInput>)receiver __attribute__((swift_name("readShortLittleEndian(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StringsKt")))
@interface MVIMStringsKt : MVIMBase
+ (MVIMKotlinByteArray *)readBytes:(id<MVIMInput>)receiver __attribute__((swift_name("readBytes(_:)")));
+ (MVIMKotlinByteArray *)readBytes:(id<MVIMInput>)receiver n:(int32_t)n __attribute__((swift_name("readBytes(_:n:)")));
+ (MVIMKotlinByteArray *)readBytesOf:(id<MVIMInput>)receiver min:(int32_t)min max:(int32_t)max __attribute__((swift_name("readBytesOf(_:min:max:)")));
+ (NSString *)readText:(id<MVIMInput>)receiver charset:(MVIMCharset *)charset max:(int32_t)max __attribute__((swift_name("readText(_:charset:max:)")));
+ (NSString *)readText:(id<MVIMInput>)receiver decoder:(MVIMCharsetDecoder *)decoder max:(int32_t)max __attribute__((swift_name("readText(_:decoder:max:)"))) __attribute__((deprecated("Use CharsetDecoder.decode instead")));
+ (int32_t)readText:(id<MVIMInput>)receiver out:(id<MVIMKotlinAppendable>)out charset:(MVIMCharset *)charset max:(int32_t)max __attribute__((swift_name("readText(_:out:charset:max:)")));
+ (int32_t)readText:(id<MVIMInput>)receiver out:(id<MVIMKotlinAppendable>)out decoder:(MVIMCharsetDecoder *)decoder max:(int32_t)max __attribute__((swift_name("readText(_:out:decoder:max:)"))) __attribute__((unavailable("Use CharsetDecoder.decode instead")));
+ (NSString *)readTextExact:(id<MVIMInput>)receiver charset:(MVIMCharset *)charset n:(int32_t)n __attribute__((swift_name("readTextExact(_:charset:n:)"))) __attribute__((deprecated("Use readTextExactCharacters instead.")));
+ (NSString *)readTextExactBytes:(id<MVIMInput>)receiver charset:(MVIMCharset *)charset bytes:(int32_t)bytes __attribute__((swift_name("readTextExactBytes(_:charset:bytes:)"))) __attribute__((deprecated("Parameters order is changed.")));
+ (NSString *)readTextExactBytes:(id<MVIMInput>)receiver bytesCount:(int32_t)bytesCount charset:(MVIMCharset *)charset __attribute__((swift_name("readTextExactBytes(_:bytesCount:charset:)")));
+ (NSString *)readTextExactCharacters:(id<MVIMInput>)receiver charactersCount:(int32_t)charactersCount charset:(MVIMCharset *)charset __attribute__((swift_name("readTextExactCharacters(_:charactersCount:charset:)")));
+ (NSString * _Nullable)readUTF8Line:(id<MVIMInput>)receiver estimate:(int32_t)estimate limit:(int32_t)limit __attribute__((swift_name("readUTF8Line(_:estimate:limit:)")));
+ (BOOL)readUTF8LineTo:(id<MVIMInput>)receiver out:(id<MVIMKotlinAppendable>)out limit:(int32_t)limit __attribute__((swift_name("readUTF8LineTo(_:out:limit:)")));
+ (NSString *)readUTF8UntilDelimiter:(id<MVIMInput>)receiver delimiters:(NSString *)delimiters limit:(int32_t)limit __attribute__((swift_name("readUTF8UntilDelimiter(_:delimiters:limit:)")));
+ (int32_t)readUTF8UntilDelimiterTo:(id<MVIMInput>)receiver out:(id<MVIMOutput>)out delimiters:(NSString *)delimiters limit:(int32_t)limit __attribute__((swift_name("readUTF8UntilDelimiterTo(_:out:delimiters:limit:)")));
+ (int32_t)readUTF8UntilDelimiterTo:(id<MVIMInput>)receiver out:(id<MVIMKotlinAppendable>)out delimiters:(NSString *)delimiters limit_:(int32_t)limit __attribute__((swift_name("readUTF8UntilDelimiterTo(_:out:delimiters:limit_:)")));
+ (MVIMKotlinByteArray *)toByteArray:(NSString *)receiver charset:(MVIMCharset *)charset __attribute__((swift_name("toByteArray(_:charset:)")));
+ (void)writeText:(id<MVIMOutput>)receiver text:(MVIMKotlinCharArray *)text fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex charset:(MVIMCharset *)charset __attribute__((swift_name("writeText(_:text:fromIndex:toIndex:charset:)")));
+ (void)writeText:(id<MVIMOutput>)receiver text:(id)text fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex charset_:(MVIMCharset *)charset __attribute__((swift_name("writeText(_:text:fromIndex:toIndex:charset_:)")));
+ (void)writeText:(id<MVIMOutput>)receiver text:(id)text fromIndex:(int32_t)fromIndex toIndex:(int32_t)toIndex encoder:(MVIMCharsetEncoder *)encoder __attribute__((swift_name("writeText(_:text:fromIndex:toIndex:encoder:)"))) __attribute__((unavailable("Use the implementation with Charset instead")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("InputPrimitivesKt")))
@interface MVIMInputPrimitivesKt : MVIMBase
+ (double)readDouble:(id<MVIMInput>)receiver __attribute__((swift_name("readDouble(_:)")));
+ (double)readDoubleFallback:(id<MVIMInput>)receiver __attribute__((swift_name("readDoubleFallback(_:)")));
+ (float)readFloat:(id<MVIMInput>)receiver __attribute__((swift_name("readFloat(_:)")));
+ (float)readFloatFallback:(id<MVIMInput>)receiver __attribute__((swift_name("readFloatFallback(_:)")));
+ (int32_t)readInt:(id<MVIMInput>)receiver __attribute__((swift_name("readInt(_:)")));
+ (int64_t)readLong:(id<MVIMInput>)receiver __attribute__((swift_name("readLong(_:)")));
+ (int16_t)readShort:(id<MVIMInput>)receiver __attribute__((swift_name("readShort(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsignedTypesKt")))
@interface MVIMUnsignedTypesKt : MVIMBase
+ (void)readFully:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length_:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length__:)")));
+ (void)readFully:(id<MVIMInput>)receiver dst:(id)dst offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("readFully(_:dst:offset:length___:)")));
+ (uint8_t)readUByte:(id<MVIMInput>)receiver __attribute__((swift_name("readUByte(_:)")));
+ (uint32_t)readUInt:(id<MVIMInput>)receiver __attribute__((swift_name("readUInt(_:)")));
+ (uint64_t)readULong:(id<MVIMInput>)receiver __attribute__((swift_name("readULong(_:)")));
+ (uint16_t)readUShort:(id<MVIMInput>)receiver __attribute__((swift_name("readUShort(_:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver array:(id)array offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(_:array:offset:length:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver array:(id)array offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFully(_:array:offset:length_:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver array:(id)array offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFully(_:array:offset:length__:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver array:(id)array offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFully(_:array:offset:length___:)")));
+ (void)writeUByte:(id<MVIMOutput>)receiver v:(uint8_t)v __attribute__((swift_name("writeUByte(_:v:)")));
+ (void)writeUInt:(id<MVIMOutput>)receiver v:(uint32_t)v __attribute__((swift_name("writeUInt(_:v:)")));
+ (void)writeULong:(id<MVIMOutput>)receiver v:(uint64_t)v __attribute__((swift_name("writeULong(_:v:)")));
+ (void)writeUShort:(id<MVIMOutput>)receiver v:(uint16_t)v __attribute__((swift_name("writeUShort(_:v:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CloseableKt_")))
@interface MVIMCloseableKt_ : MVIMBase
+ (id _Nullable)use:(id<MVIMCloseable_>)receiver block:(id _Nullable (^)(id<MVIMCloseable_>))block __attribute__((swift_name("use(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UseKt")))
@interface MVIMUseKt : MVIMBase
+ (id _Nullable)use:(id<MVIMInput>)receiver block:(id _Nullable (^)(id<MVIMInput>))block __attribute__((swift_name("use(_:block:)")));
+ (id _Nullable)use:(id<MVIMOutput>)receiver block_:(id _Nullable (^)(id<MVIMOutput>))block __attribute__((swift_name("use(_:block_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OutputPrimitivesKt")))
@interface MVIMOutputPrimitivesKt : MVIMBase
+ (void)writeDouble:(id<MVIMOutput>)receiver value:(double)value __attribute__((swift_name("writeDouble(_:value:)")));
+ (void)writeFloat:(id<MVIMOutput>)receiver value:(float)value __attribute__((swift_name("writeFloat(_:value:)")));
+ (void)writeInt:(id<MVIMOutput>)receiver value:(int32_t)value __attribute__((swift_name("writeInt(_:value:)")));
+ (void)writeLong:(id<MVIMOutput>)receiver value:(int64_t)value __attribute__((swift_name("writeLong(_:value:)")));
+ (void)writeShort:(id<MVIMOutput>)receiver value:(int16_t)value __attribute__((swift_name("writeShort(_:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OutputLittleEndianKt")))
@interface MVIMOutputLittleEndianKt : MVIMBase
+ (void)writeDouble:(id<MVIMOutput>)receiver value:(double)value byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("writeDouble(_:value:byteOrder:)")));
+ (void)writeDoubleLittleEndian:(id<MVIMOutput>)receiver value:(double)value __attribute__((swift_name("writeDoubleLittleEndian(_:value:)")));
+ (void)writeFloat:(id<MVIMOutput>)receiver value:(float)value byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("writeFloat(_:value:byteOrder:)")));
+ (void)writeFloatLittleEndian:(id<MVIMOutput>)receiver value:(float)value __attribute__((swift_name("writeFloatLittleEndian(_:value:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(MVIMKotlinDoubleArray *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(MVIMKotlinFloatArray *)source offset:(int32_t)offset length_:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length_:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(MVIMKotlinIntArray *)source offset:(int32_t)offset length__:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length__:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(MVIMKotlinLongArray *)source offset:(int32_t)offset length___:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length___:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(MVIMKotlinShortArray *)source offset:(int32_t)offset length____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length____:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(id)source offset:(int32_t)offset length_____:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length_____:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(id)source offset:(int32_t)offset length______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length______:)")));
+ (void)writeFullyLittleEndian:(id<MVIMOutput>)receiver source:(id)source offset:(int32_t)offset length_______:(int32_t)length __attribute__((swift_name("writeFullyLittleEndian(_:source:offset:length_______:)")));
+ (void)writeInt:(id<MVIMOutput>)receiver value:(int32_t)value byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("writeInt(_:value:byteOrder:)")));
+ (void)writeIntLittleEndian:(id<MVIMOutput>)receiver value:(int32_t)value __attribute__((swift_name("writeIntLittleEndian(_:value:)")));
+ (void)writeLong:(id<MVIMOutput>)receiver value:(int64_t)value byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("writeLong(_:value:byteOrder:)")));
+ (void)writeLongLittleEndian:(id<MVIMOutput>)receiver value:(int64_t)value __attribute__((swift_name("writeLongLittleEndian(_:value:)")));
+ (void)writeShort:(id<MVIMOutput>)receiver value:(int16_t)value byteOrder:(MVIMByteOrder *)byteOrder __attribute__((swift_name("writeShort(_:value:byteOrder:)")));
+ (void)writeShortLittleEndian:(id<MVIMOutput>)receiver value:(int16_t)value __attribute__((swift_name("writeShortLittleEndian(_:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OutputArraysNativeKt")))
@interface MVIMOutputArraysNativeKt : MVIMBase
+ (void)writeFully:(id<MVIMOutput>)receiver src:(void *)src offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("writeFully(_:src:offset:length:)")));
+ (void)writeFully:(id<MVIMOutput>)receiver src:(void *)src offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("writeFully(_:src:offset:length_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UTF8Kt")))
@interface MVIMUTF8Kt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)decodeUTF8LineLoopSuspendOut:(id<MVIMKotlinAppendable>)out limit:(int32_t)limit nextChunk:(id<MVIMKotlinSuspendFunction1>)nextChunk completionHandler:(void (^)(MVIMBoolean * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("decodeUTF8LineLoopSuspend(out:limit:nextChunk:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("UnsafeKt")))
@interface MVIMUnsafeKt : MVIMBase
+ (void)afterHeadWrite:(id<MVIMOutput>)receiver current:(MVIMChunkBuffer *)current __attribute__((swift_name("afterHeadWrite(_:current:)")));
+ (void)completeReadHead:(id<MVIMInput>)receiver current:(MVIMChunkBuffer *)current __attribute__((swift_name("completeReadHead(_:current:)")));
+ (MVIMChunkBuffer * _Nullable)prepareReadFirstHead:(id<MVIMInput>)receiver minSize:(int32_t)minSize __attribute__((swift_name("prepareReadFirstHead(_:minSize:)")));
+ (MVIMChunkBuffer * _Nullable)prepareReadNextHead:(id<MVIMInput>)receiver current:(MVIMChunkBuffer *)current __attribute__((swift_name("prepareReadNextHead(_:current:)")));
+ (MVIMChunkBuffer *)prepareWriteHead:(id<MVIMOutput>)receiver capacity:(int32_t)capacity current:(MVIMChunkBuffer * _Nullable)current __attribute__((swift_name("prepareWriteHead(_:capacity:current:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ByteArrayPoolKt")))
@interface MVIMByteArrayPoolKt : MVIMBase
@property (class, readonly) id<MVIMObjectPool> ByteArrayPool __attribute__((swift_name("ByteArrayPool")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PoolKt")))
@interface MVIMPoolKt : MVIMBase
+ (id _Nullable)useBorrowed:(id<MVIMObjectPool>)receiver block:(id _Nullable (^)(id))block __attribute__((swift_name("useBorrowed(_:block:)"))) __attribute__((deprecated("Use useInstance instead")));
+ (id _Nullable)useInstance:(id<MVIMObjectPool>)receiver block:(id _Nullable (^)(id))block __attribute__((swift_name("useInstance(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ErrorsKt")))
@interface MVIMErrorsKt : MVIMBase
+ (void)TODO_ERROR __attribute__((swift_name("TODO_ERROR()"))) __attribute__((unavailable("Not implemented.")));
+ (void)TODO_ERRORValue:(id _Nullable)value __attribute__((swift_name("TODO_ERROR(value:)"))) __attribute__((unavailable("Not implemented.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixInputKt")))
@interface MVIMPosixInputKt : MVIMBase
+ (id<MVIMInput>)InputFileDescriptor:(int32_t)fileDescriptor __attribute__((swift_name("Input(fileDescriptor:)")));
+ (id<MVIMInput>)InputFile:(void *)file __attribute__((swift_name("Input(file:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixOutputKt")))
@interface MVIMPosixOutputKt : MVIMBase
+ (id<MVIMOutput>)OutputFileDescriptor:(int32_t)fileDescriptor __attribute__((swift_name("Output(fileDescriptor:)")));
+ (id<MVIMOutput>)OutputFile:(void *)file __attribute__((swift_name("Output(file:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PosixIoKt")))
@interface MVIMPosixIoKt : MVIMBase
+ (int32_t)freadDestination:(MVIMMemory *)destination offset:(int32_t)offset length:(int32_t)length stream:(void *)stream __attribute__((swift_name("fread(destination:offset:length:stream:)")));
+ (int64_t)freadDestination:(MVIMMemory *)destination offset:(int64_t)offset length:(int64_t)length stream_:(void *)stream __attribute__((swift_name("fread(destination:offset:length:stream_:)")));
+ (uint64_t)freadBuffer:(MVIMBuffer *)buffer stream:(void *)stream __attribute__((swift_name("fread(buffer:stream:)"))) __attribute__((deprecated("Use fread(Memory) instead.")));
+ (int32_t)fwriteSource:(MVIMMemory *)source offset:(int32_t)offset length:(int32_t)length stream:(void *)stream __attribute__((swift_name("fwrite(source:offset:length:stream:)")));
+ (int64_t)fwriteSource:(MVIMMemory *)source offset:(int64_t)offset length:(int64_t)length stream_:(void *)stream __attribute__((swift_name("fwrite(source:offset:length:stream_:)")));
+ (uint64_t)fwriteBuffer:(MVIMBuffer *)buffer stream:(void *)stream __attribute__((swift_name("fwrite(buffer:stream:)"))) __attribute__((deprecated("Use fwrite(Memory) instead.")));
+ (int32_t)readFildes:(int32_t)fildes destination:(MVIMMemory *)destination offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("read(fildes:destination:offset:length:)")));
+ (int64_t)readFildes:(int32_t)fildes destination:(MVIMMemory *)destination offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("read(fildes:destination:offset:length_:)")));
+ (int64_t)readFildes:(int32_t)fildes buffer:(MVIMBuffer *)buffer __attribute__((swift_name("read(fildes:buffer:)"))) __attribute__((deprecated("Use read(Memory) instead.")));
+ (int64_t)recvSocket:(int32_t)socket buffer:(MVIMBuffer *)buffer flags:(int32_t)flags __attribute__((swift_name("recv(socket:buffer:flags:)"))) __attribute__((deprecated("Use fread(Memory) instead.")));
+ (int64_t)recvfromSocket:(int32_t)socket buffer:(MVIMBuffer *)buffer flags:(int32_t)flags addr:(MVIMKotlinCValuesRef<id> *)addr addr_len:(MVIMKotlinCValuesRef<id> *)addr_len __attribute__((swift_name("recvfrom(socket:buffer:flags:addr:addr_len:)")));
+ (int32_t)sendSocket:(int32_t)socket source:(MVIMMemory *)source sourceOffset:(int32_t)sourceOffset maxLength:(int32_t)maxLength flags:(int32_t)flags __attribute__((swift_name("send(socket:source:sourceOffset:maxLength:flags:)")));
+ (int64_t)sendSocket:(int32_t)socket source:(MVIMMemory *)source sourceOffset:(int64_t)sourceOffset maxLength:(int64_t)maxLength flags_:(int32_t)flags __attribute__((swift_name("send(socket:source:sourceOffset:maxLength:flags_:)")));
+ (int64_t)sendSocket:(int32_t)socket buffer:(MVIMBuffer *)buffer flags:(int32_t)flags __attribute__((swift_name("send(socket:buffer:flags:)"))) __attribute__((deprecated("Use send(Memory) instead.")));
+ (int64_t)sendtoSocket:(int32_t)socket buffer:(MVIMBuffer *)buffer flags:(int32_t)flags addr:(MVIMKotlinCValuesRef<id> *)addr addr_len:(uint32_t)addr_len __attribute__((swift_name("sendto(socket:buffer:flags:addr:addr_len:)")));
+ (int32_t)writeFildes:(int32_t)fildes source:(MVIMMemory *)source offset:(int32_t)offset length:(int32_t)length __attribute__((swift_name("write(fildes:source:offset:length:)")));
+ (int64_t)writeFildes:(int32_t)fildes source:(MVIMMemory *)source offset:(int64_t)offset length_:(int64_t)length __attribute__((swift_name("write(fildes:source:offset:length_:)")));
+ (int64_t)writeFildes:(int32_t)fildes buffer:(MVIMBuffer *)buffer __attribute__((swift_name("write(fildes:buffer:)"))) __attribute__((deprecated("Use write(Memory) instead.")));
+ (id _Nullable)use:(void *)receiver block:(id _Nullable (^)(id))block __attribute__((swift_name("use(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JobKt")))
@interface MVIMJobKt : MVIMBase
+ (BOOL)isActive:(id<MVIMKotlinCoroutineContext>)receiver __attribute__((swift_name("isActive(_:)")));
+ (id<MVIMJob>)job:(id<MVIMKotlinCoroutineContext>)receiver __attribute__((swift_name("job(_:)")));
+ (id<MVIMDisposableHandle>)DisposableHandleBlock:(void (^)(void))block __attribute__((swift_name("DisposableHandle(block:)")));
+ (id<MVIMCompletableJob>)JobParent:(id<MVIMJob> _Nullable)parent __attribute__((swift_name("Job(parent:)")));
+ (void)cancel:(id<MVIMKotlinCoroutineContext>)receiver cause:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)")));
+ (void)cancel:(id<MVIMJob>)receiver message:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(_:message:cause:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)cancelAndJoin:(id<MVIMJob>)receiver completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("cancelAndJoin(_:completionHandler:)")));
+ (void)cancelChildren:(id<MVIMKotlinCoroutineContext>)receiver cause:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancelChildren(_:cause:)")));
+ (void)cancelChildren:(id<MVIMJob>)receiver cause_:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancelChildren(_:cause_:)")));
+ (void)ensureActive:(id<MVIMKotlinCoroutineContext>)receiver __attribute__((swift_name("ensureActive(_:)")));
+ (void)ensureActive_:(id<MVIMJob>)receiver __attribute__((swift_name("ensureActive(__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineScopeKt")))
@interface MVIMCoroutineScopeKt : MVIMBase
+ (BOOL)isActive:(id<MVIMCoroutineScope>)receiver __attribute__((swift_name("isActive(_:)")));
+ (id<MVIMCoroutineScope>)CoroutineScopeContext:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("CoroutineScope(context:)")));
+ (id<MVIMCoroutineScope>)MainScope __attribute__((swift_name("MainScope()")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)coroutineScopeBlock:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("coroutineScope(block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)currentCoroutineContextWithCompletionHandler:(void (^)(id<MVIMKotlinCoroutineContext> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("currentCoroutineContext(completionHandler:)")));
+ (void)cancel:(id<MVIMCoroutineScope>)receiver message:(NSString *)message cause:(MVIMKotlinThrowable * _Nullable)cause __attribute__((swift_name("cancel(_:message:cause:)")));
+ (void)cancel:(id<MVIMCoroutineScope>)receiver cause:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)")));
+ (void)ensureActive:(id<MVIMCoroutineScope>)receiver __attribute__((swift_name("ensureActive(_:)")));
+ (id<MVIMCoroutineScope>)plus:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("plus(_:context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CompletableDeferredKt")))
@interface MVIMCompletableDeferredKt : MVIMBase
+ (id<MVIMCompletableDeferred>)CompletableDeferredValue:(id _Nullable)value __attribute__((swift_name("CompletableDeferred(value:)")));
+ (id<MVIMCompletableDeferred>)CompletableDeferredParent:(id<MVIMJob> _Nullable)parent __attribute__((swift_name("CompletableDeferred(parent:)")));
+ (BOOL)completeWith:(id<MVIMCompletableDeferred>)receiver result:(id _Nullable)result __attribute__((swift_name("completeWith(_:result:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineExceptionHandlerKt")))
@interface MVIMCoroutineExceptionHandlerKt : MVIMBase
+ (id<MVIMCoroutineExceptionHandler>)CoroutineExceptionHandlerHandler:(void (^)(id<MVIMKotlinCoroutineContext>, MVIMKotlinThrowable *))handler __attribute__((swift_name("CoroutineExceptionHandler(handler:)")));
+ (void)handleCoroutineExceptionContext:(id<MVIMKotlinCoroutineContext>)context exception:(MVIMKotlinThrowable *)exception __attribute__((swift_name("handleCoroutineException(context:exception:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("RunnableKt")))
@interface MVIMRunnableKt : MVIMBase
+ (id<MVIMRunnable>)RunnableBlock:(void (^)(void))block __attribute__((swift_name("Runnable(block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SupervisorKt")))
@interface MVIMSupervisorKt : MVIMBase
+ (id<MVIMCompletableJob>)SupervisorJobParent:(id<MVIMJob> _Nullable)parent __attribute__((swift_name("SupervisorJob(parent:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)supervisorScopeBlock:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("supervisorScope(block:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AwaitKt")))
@interface MVIMAwaitKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitAllDeferreds:(MVIMKotlinArray<id<MVIMDeferred>> *)deferreds completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitAll(deferreds:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinAllJobs:(MVIMKotlinArray<id<MVIMJob>> *)jobs completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("joinAll(jobs:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitAll:(id)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitAll(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)joinAll:(id)receiver completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("joinAll(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelayKt")))
@interface MVIMDelayKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitCancellationWithCompletionHandler:(void (^)(MVIMKotlinNothing * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitCancellation(completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)delayTimeMillis:(int64_t)timeMillis completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delay(timeMillis:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)delayDuration:(int64_t)duration completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("delay(duration:completionHandler:)")));
+ (id<MVIMFlow>)debounce:(id<MVIMFlow>)receiver timeoutMillis:(MVIMLong *(^)(id _Nullable))timeoutMillis __attribute__((swift_name("debounce(_:timeoutMillis:)")));
+ (id<MVIMFlow>)debounce:(id<MVIMFlow>)receiver timeout:(id (^)(id _Nullable))timeout __attribute__((swift_name("debounce(_:timeout:)")));
+ (id<MVIMFlow>)debounce:(id<MVIMFlow>)receiver timeoutMillis_:(int64_t)timeoutMillis __attribute__((swift_name("debounce(_:timeoutMillis_:)")));
+ (id<MVIMFlow>)debounce:(id<MVIMFlow>)receiver timeout_:(int64_t)timeout __attribute__((swift_name("debounce(_:timeout_:)")));
+ (id<MVIMFlow>)sample:(id<MVIMFlow>)receiver periodMillis:(int64_t)periodMillis __attribute__((swift_name("sample(_:periodMillis:)")));
+ (id<MVIMFlow>)sample:(id<MVIMFlow>)receiver period:(int64_t)period __attribute__((swift_name("sample(_:period:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ThreadKt")))
@interface MVIMThreadKt : MVIMBase
+ (void)doInitMainThread __attribute__((swift_name("doInitMainThread()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WorkersKt")))
@interface MVIMWorkersKt : MVIMBase
+ (MVIMSingleThreadDispatcher *)doNewSingleThreadContextName:(NSString *)name __attribute__((swift_name("doNewSingleThreadContext(name:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuildersKt_")))
@interface MVIMBuildersKt_ : MVIMBase
+ (id _Nullable)runBlockingContext:(id<MVIMKotlinCoroutineContext>)context block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("runBlocking(context:block:)")));
+ (id<MVIMFlow>)callbackFlowBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("callbackFlow(block:)")));
+ (id<MVIMFlow>)channelFlowBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("channelFlow(block:)")));
+ (id<MVIMFlow>)emptyFlow __attribute__((swift_name("emptyFlow()")));
+ (id<MVIMFlow>)flowBlock:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("flow(block:)")));
+ (id<MVIMFlow>)flowOfValue:(id _Nullable)value __attribute__((swift_name("flowOf(value:)")));
+ (id<MVIMFlow>)flowOfElements:(MVIMKotlinArray<id> *)elements __attribute__((swift_name("flowOf(elements:)")));
+ (id<MVIMFlow>)flowViaChannelBufferSize:(int32_t)bufferSize block:(void (^)(id<MVIMCoroutineScope>, id<MVIMSendChannel>))block __attribute__((swift_name("flowViaChannel(bufferSize:block:)"))) __attribute__((unavailable("Use channelFlow with awaitClose { } instead of flowViaChannel and invokeOnClose { }.")));
+ (id<MVIMFlow>)asFlow:(id _Nullable (^)(void))receiver __attribute__((swift_name("asFlow(_:)")));
+ (id<MVIMFlow>)asFlow_:(id)receiver __attribute__((swift_name("asFlow(__:)")));
+ (id<MVIMFlow>)asFlow__:(id<MVIMKotlinIterator>)receiver __attribute__((swift_name("asFlow(___:)")));
+ (id<MVIMFlow>)asFlow___:(id<MVIMKotlinSequence>)receiver __attribute__((swift_name("asFlow(____:)")));
+ (id<MVIMFlow>)asFlow____:(id<MVIMKotlinSuspendFunction0>)receiver __attribute__((swift_name("asFlow(_____:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CancellableContinuationKt")))
@interface MVIMCancellableContinuationKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)suspendCancellableCoroutineBlock:(void (^)(id<MVIMCancellableContinuation>))block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("suspendCancellableCoroutine(block:completionHandler:)")));
+ (void)disposeOnCancellation:(id<MVIMCancellableContinuation>)receiver handle:(id<MVIMDisposableHandle>)handle __attribute__((swift_name("disposeOnCancellation(_:handle:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Builders_commonKt")))
@interface MVIMBuilders_commonKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withContextContext:(id<MVIMKotlinCoroutineContext>)context block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withContext(context:block:completionHandler:)")));
+ (id<MVIMDeferred>)async:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context start:(MVIMCoroutineStart *)start block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("async(_:context:start:block:)")));
+ (id<MVIMJob>)launch:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context start:(MVIMCoroutineStart *)start block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("launch(_:context:start:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TimeoutKt")))
@interface MVIMTimeoutKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutTimeMillis:(int64_t)timeMillis block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeout(timeMillis:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutTimeout:(int64_t)timeout block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeout(timeout:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutOrNullTimeMillis:(int64_t)timeMillis block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeoutOrNull(timeMillis:block:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withTimeoutOrNullTimeout:(int64_t)timeout block:(id<MVIMKotlinSuspendFunction1>)block completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withTimeoutOrNull(timeout:block:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("YieldKt")))
@interface MVIMYieldKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)yieldWithCompletionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("yield(completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DebugKt")))
@interface MVIMDebugKt : MVIMBase
+ (int32_t)id:(id)receiver __attribute__((swift_name("id(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CoroutineContextKt")))
@interface MVIMCoroutineContextKt : MVIMBase
+ (id<MVIMKotlinCoroutineContext>)doNewCoroutineContext:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("doNewCoroutineContext(_:context:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CancellableKt")))
@interface MVIMCancellableKt : MVIMBase
+ (void)startCoroutineCancellable:(id<MVIMKotlinSuspendFunction0>)receiver completion:(id<MVIMKotlinContinuation>)completion __attribute__((swift_name("startCoroutineCancellable(_:completion:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BroadcastChannelKt")))
@interface MVIMBroadcastChannelKt : MVIMBase
+ (id<MVIMBroadcastChannel>)BroadcastChannelCapacity:(int32_t)capacity __attribute__((swift_name("BroadcastChannel(capacity:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelKt")))
@interface MVIMChannelKt : MVIMBase
+ (id<MVIMChannel>)ChannelCapacity:(int32_t)capacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow onUndeliveredElement:(void (^ _Nullable)(id _Nullable))onUndeliveredElement __attribute__((swift_name("Channel(capacity:onBufferOverflow:onUndeliveredElement:)")));
+ (id _Nullable)getOrElse:(id _Nullable)receiver onFailure:(id _Nullable (^)(MVIMKotlinThrowable * _Nullable))onFailure __attribute__((swift_name("getOrElse(_:onFailure:)")));
+ (id _Nullable)onClosed:(id _Nullable)receiver action:(void (^)(MVIMKotlinThrowable * _Nullable))action __attribute__((swift_name("onClosed(_:action:)")));
+ (id _Nullable)onFailure:(id _Nullable)receiver action:(void (^)(MVIMKotlinThrowable * _Nullable))action __attribute__((swift_name("onFailure(_:action:)")));
+ (id _Nullable)onSuccess:(id _Nullable)receiver action:(void (^)(id _Nullable))action __attribute__((swift_name("onSuccess(_:action:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ProduceKt")))
@interface MVIMProduceKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)awaitClose:(id<MVIMProducerScope>)receiver block:(void (^)(void))block completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("awaitClose(_:block:completionHandler:)")));
+ (id<MVIMReceiveChannel>)produce:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity start:(MVIMCoroutineStart *)start onCompletion:(void (^ _Nullable)(MVIMKotlinThrowable * _Nullable))onCompletion block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("produce(_:context:capacity:start:onCompletion:block:)")));
+ (id<MVIMReceiveChannel>)produce:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("produce(_:context:capacity:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BroadcastKt")))
@interface MVIMBroadcastKt : MVIMBase
+ (id<MVIMBroadcastChannel>)broadcast:(id<MVIMCoroutineScope>)receiver context:(id<MVIMKotlinCoroutineContext>)context capacity:(int32_t)capacity start:(MVIMCoroutineStart *)start onCompletion:(void (^ _Nullable)(MVIMKotlinThrowable * _Nullable))onCompletion block:(id<MVIMKotlinSuspendFunction1>)block __attribute__((swift_name("broadcast(_:context:capacity:start:onCompletion:block:)")));
+ (id<MVIMBroadcastChannel>)broadcast:(id<MVIMReceiveChannel>)receiver capacity:(int32_t)capacity start:(MVIMCoroutineStart *)start __attribute__((swift_name("broadcast(_:capacity:start:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("Channels_commonKt")))
@interface MVIMChannels_commonKt : MVIMBase
+ (id _Nullable)consume:(id<MVIMBroadcastChannel>)receiver block:(id _Nullable (^)(id<MVIMReceiveChannel>))block __attribute__((swift_name("consume(_:block:)")));
+ (id _Nullable)consume:(id<MVIMReceiveChannel>)receiver block_:(id _Nullable (^)(id<MVIMReceiveChannel>))block __attribute__((swift_name("consume(_:block_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)consumeEach:(id<MVIMBroadcastChannel>)receiver action:(void (^)(id _Nullable))action completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("consumeEach(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)consumeEach:(id<MVIMReceiveChannel>)receiver action:(void (^)(id _Nullable))action completionHandler_:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("consumeEach(_:action:completionHandler_:)")));
+ (id<MVIMSelectClause1>)onReceiveOrNull:(id<MVIMReceiveChannel>)receiver __attribute__((swift_name("onReceiveOrNull(_:)"))) __attribute__((deprecated("Deprecated in the favour of 'onReceiveCatching'")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)receiveOrNull:(id<MVIMReceiveChannel>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("receiveOrNull(_:completionHandler:)"))) __attribute__((deprecated("Deprecated in the favour of 'receiveCatching'")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<MVIMReceiveChannel>)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MergeKt")))
@interface MVIMMergeKt : MVIMBase
+ (id<MVIMFlow>)mergeFlows:(MVIMKotlinArray<id<MVIMFlow>> *)flows __attribute__((swift_name("merge(flows:)")));
+ (id<MVIMFlow>)flatMapConcat:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapConcat(_:transform:)")));
+ (id<MVIMFlow>)flatMapLatest:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapLatest(_:transform:)")));
+ (id<MVIMFlow>)flatMapMerge:(id<MVIMFlow>)receiver concurrency:(int32_t)concurrency transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("flatMapMerge(_:concurrency:transform:)")));
+ (id<MVIMFlow>)flattenConcat:(id<MVIMFlow>)receiver __attribute__((swift_name("flattenConcat(_:)")));
+ (id<MVIMFlow>)flattenMerge:(id<MVIMFlow>)receiver concurrency:(int32_t)concurrency __attribute__((swift_name("flattenMerge(_:concurrency:)")));
+ (id<MVIMFlow>)mapLatest:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("mapLatest(_:transform:)")));
+ (id<MVIMFlow>)merge:(id)receiver __attribute__((swift_name("merge(_:)")));
+ (id<MVIMFlow>)transformLatest:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("transformLatest(_:transform:)")));
@property (class, readonly) int32_t DEFAULT_CONCURRENCY __attribute__((swift_name("DEFAULT_CONCURRENCY")));
@property (class, readonly) NSString *DEFAULT_CONCURRENCY_PROPERTY_NAME __attribute__((swift_name("DEFAULT_CONCURRENCY_PROPERTY_NAME")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LintKt")))
@interface MVIMLintKt : MVIMBase
+ (id<MVIMKotlinCoroutineContext>)coroutineContext:(id<MVIMFlowCollector>)receiver __attribute__((swift_name("coroutineContext(_:)"))) __attribute__((unavailable("coroutineContext is resolved into the property of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext() instead or specify the receiver of coroutineContext explicitly")));
+ (BOOL)isActive:(id<MVIMFlowCollector>)receiver __attribute__((swift_name("isActive(_:)"))) __attribute__((unavailable("isActive is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().isActive or cancellable() operator instead or specify the receiver of isActive explicitly. Additionally, flow {} builder emissions are cancellable by default.")));
+ (void)cancel:(id<MVIMFlowCollector>)receiver cause:(MVIMKotlinCancellationException * _Nullable)cause __attribute__((swift_name("cancel(_:cause:)"))) __attribute__((unavailable("cancel() is resolved into the extension of outer CoroutineScope which is likely to be an error.Use currentCoroutineContext().cancel() instead or specify the receiver of cancel() explicitly")));
+ (id<MVIMFlow>)cancellable:(id<MVIMSharedFlow>)receiver __attribute__((swift_name("cancellable(_:)"))) __attribute__((unavailable("Applying 'cancellable' to a SharedFlow has no effect. See the SharedFlow documentation on Operator Fusion.")));
+ (id<MVIMFlow>)catch:(id<MVIMSharedFlow>)receiver action:(id<MVIMKotlinSuspendFunction2>)action __attribute__((swift_name("catch(_:action:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));
+ (id<MVIMFlow>)conflate:(id<MVIMStateFlow>)receiver __attribute__((swift_name("conflate(_:)"))) __attribute__((unavailable("Applying 'conflate' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<MVIMSharedFlow>)receiver completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));
+ (id<MVIMFlow>)distinctUntilChanged:(id<MVIMStateFlow>)receiver __attribute__((swift_name("distinctUntilChanged(_:)"))) __attribute__((unavailable("Applying 'distinctUntilChanged' to StateFlow has no effect. See the StateFlow documentation on Operator Fusion.")));
+ (id<MVIMFlow>)flowOn:(id<MVIMSharedFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("flowOn(_:context:)"))) __attribute__((unavailable("Applying 'flowOn' to SharedFlow has no effect. See the SharedFlow documentation on Operator Fusion.")));
+ (id<MVIMFlow>)retry:(id<MVIMSharedFlow>)receiver retries:(int64_t)retries predicate:(id<MVIMKotlinSuspendFunction1>)predicate __attribute__((swift_name("retry(_:retries:predicate:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));
+ (id<MVIMFlow>)retryWhen:(id<MVIMSharedFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction3>)predicate __attribute__((swift_name("retryWhen(_:predicate:)"))) __attribute__((deprecated("SharedFlow never completes, so this operator has no effect.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<MVIMSharedFlow>)receiver completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<MVIMSharedFlow>)receiver completionHandler:(void (^)(NSSet<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:completionHandler:)"))) __attribute__((deprecated("SharedFlow never completes, so this terminal operation never completes.")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedFlowKt")))
@interface MVIMSharedFlowKt : MVIMBase
+ (id<MVIMMutableSharedFlow>)MutableSharedFlowReplay:(int32_t)replay extraBufferCapacity:(int32_t)extraBufferCapacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow __attribute__((swift_name("MutableSharedFlow(replay:extraBufferCapacity:onBufferOverflow:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StateFlowKt")))
@interface MVIMStateFlowKt : MVIMBase
+ (id<MVIMMutableStateFlow>)MutableStateFlowValue:(id _Nullable)value __attribute__((swift_name("MutableStateFlow(value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ZipKt")))
@interface MVIMZipKt : MVIMBase
+ (id<MVIMFlow>)combineFlows:(MVIMKotlinArray<id<MVIMFlow>> *)flows transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("combine(flows:transform:)")));
+ (id<MVIMFlow>)combineFlows:(id)flows transform_:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("combine(flows:transform_:)")));
+ (id<MVIMFlow>)combineFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 flow3:(id<MVIMFlow>)flow3 flow4:(id<MVIMFlow>)flow4 flow5:(id<MVIMFlow>)flow5 transform:(id<MVIMKotlinSuspendFunction5>)transform __attribute__((swift_name("combine(flow:flow2:flow3:flow4:flow5:transform:)")));
+ (id<MVIMFlow>)combineFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 flow3:(id<MVIMFlow>)flow3 flow4:(id<MVIMFlow>)flow4 transform:(id<MVIMKotlinSuspendFunction4>)transform __attribute__((swift_name("combine(flow:flow2:flow3:flow4:transform:)")));
+ (id<MVIMFlow>)combineFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 flow3:(id<MVIMFlow>)flow3 transform:(id<MVIMKotlinSuspendFunction3>)transform __attribute__((swift_name("combine(flow:flow2:flow3:transform:)")));
+ (id<MVIMFlow>)combineFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("combine(flow:flow2:transform:)")));
+ (id<MVIMFlow>)combineTransformFlows:(MVIMKotlinArray<id<MVIMFlow>> *)flows transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("combineTransform(flows:transform:)")));
+ (id<MVIMFlow>)combineTransformFlows:(id)flows transform_:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("combineTransform(flows:transform_:)")));
+ (id<MVIMFlow>)combineTransformFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 flow3:(id<MVIMFlow>)flow3 flow4:(id<MVIMFlow>)flow4 flow5:(id<MVIMFlow>)flow5 transform:(id<MVIMKotlinSuspendFunction6>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:flow4:flow5:transform:)")));
+ (id<MVIMFlow>)combineTransformFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 flow3:(id<MVIMFlow>)flow3 flow4:(id<MVIMFlow>)flow4 transform:(id<MVIMKotlinSuspendFunction5>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:flow4:transform:)")));
+ (id<MVIMFlow>)combineTransformFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 flow3:(id<MVIMFlow>)flow3 transform:(id<MVIMKotlinSuspendFunction4>)transform __attribute__((swift_name("combineTransform(flow:flow2:flow3:transform:)")));
+ (id<MVIMFlow>)combineTransformFlow:(id<MVIMFlow>)flow flow2:(id<MVIMFlow>)flow2 transform:(id<MVIMKotlinSuspendFunction3>)transform __attribute__((swift_name("combineTransform(flow:flow2:transform:)")));
+ (id<MVIMFlow>)combine:(id<MVIMFlow>)receiver flow:(id<MVIMFlow>)flow transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("combine(_:flow:transform:)")));
+ (id<MVIMFlow>)combineTransform:(id<MVIMFlow>)receiver flow:(id<MVIMFlow>)flow transform:(id<MVIMKotlinSuspendFunction3>)transform __attribute__((swift_name("combineTransform(_:flow:transform:)")));
+ (id<MVIMFlow>)zip:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("zip(_:other:transform:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ChannelsKt")))
@interface MVIMChannelsKt : MVIMBase
+ (id<MVIMFlow>)asFlow:(id<MVIMBroadcastChannel>)receiver __attribute__((swift_name("asFlow(_:)"))) __attribute__((deprecated("'BroadcastChannel' is obsolete and all coreresponding operators are deprecated in the favour of StateFlow and SharedFlow")));
+ (id<MVIMBroadcastChannel>)broadcastIn:(id<MVIMFlow>)receiver scope:(id<MVIMCoroutineScope>)scope start:(MVIMCoroutineStart *)start __attribute__((swift_name("broadcastIn(_:scope:start:)"))) __attribute__((unavailable("Use shareIn operator and the resulting SharedFlow as a replacement for BroadcastChannel")));
+ (id<MVIMFlow>)consumeAsFlow:(id<MVIMReceiveChannel>)receiver __attribute__((swift_name("consumeAsFlow(_:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)emitAll:(id<MVIMFlowCollector>)receiver channel:(id<MVIMReceiveChannel>)channel completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("emitAll(_:channel:completionHandler:)")));
+ (id<MVIMReceiveChannel>)produceIn:(id<MVIMFlow>)receiver scope:(id<MVIMCoroutineScope>)scope __attribute__((swift_name("produceIn(_:scope:)")));
+ (id<MVIMFlow>)receiveAsFlow:(id<MVIMReceiveChannel>)receiver __attribute__((swift_name("receiveAsFlow(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ShareKt")))
@interface MVIMShareKt : MVIMBase
+ (id<MVIMSharedFlow>)asSharedFlow:(id<MVIMMutableSharedFlow>)receiver __attribute__((swift_name("asSharedFlow(_:)")));
+ (id<MVIMStateFlow>)asStateFlow:(id<MVIMMutableStateFlow>)receiver __attribute__((swift_name("asStateFlow(_:)")));
+ (id<MVIMSharedFlow>)onSubscription:(id<MVIMSharedFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action __attribute__((swift_name("onSubscription(_:action:)")));
+ (id<MVIMSharedFlow>)shareIn:(id<MVIMFlow>)receiver scope:(id<MVIMCoroutineScope>)scope started:(id<MVIMSharingStarted>)started replay:(int32_t)replay __attribute__((swift_name("shareIn(_:scope:started:replay:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)stateIn:(id<MVIMFlow>)receiver scope:(id<MVIMCoroutineScope>)scope completionHandler:(void (^)(id<MVIMStateFlow> _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("stateIn(_:scope:completionHandler:)")));
+ (id<MVIMStateFlow>)stateIn:(id<MVIMFlow>)receiver scope:(id<MVIMCoroutineScope>)scope started:(id<MVIMSharingStarted>)started initialValue:(id _Nullable)initialValue __attribute__((swift_name("stateIn(_:scope:started:initialValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextKt")))
@interface MVIMContextKt : MVIMBase
+ (id<MVIMFlow>)buffer:(id<MVIMFlow>)receiver capacity:(int32_t)capacity onBufferOverflow:(MVIMBufferOverflow *)onBufferOverflow __attribute__((swift_name("buffer(_:capacity:onBufferOverflow:)")));
+ (id<MVIMFlow>)cancellable:(id<MVIMFlow>)receiver __attribute__((swift_name("cancellable(_:)")));
+ (id<MVIMFlow>)conflate:(id<MVIMFlow>)receiver __attribute__((swift_name("conflate(_:)")));
+ (id<MVIMFlow>)flowOn:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("flowOn(_:context:)")));
+ (id<MVIMFlow>)flowWith:(id<MVIMFlow>)receiver flowContext:(id<MVIMKotlinCoroutineContext>)flowContext bufferSize:(int32_t)bufferSize builder:(id<MVIMFlow> (^)(id<MVIMFlow>))builder __attribute__((swift_name("flowWith(_:flowContext:bufferSize:builder:)"))) __attribute__((unavailable("flowWith is deprecated without replacement, please refer to its KDoc for an explanation")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MigrationKt")))
@interface MVIMMigrationKt : MVIMBase
+ (id<MVIMFlow>)cache:(id<MVIMFlow>)receiver __attribute__((swift_name("cache(_:)"))) __attribute__((unavailable("Flow analogue of 'cache()' is 'shareIn' with unlimited replay and 'started = SharingStared.Lazily' argument'")));
+ (id<MVIMFlow>)combineLatest:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other other2:(id<MVIMFlow>)other2 other3:(id<MVIMFlow>)other3 other4:(id<MVIMFlow>)other4 transform:(id<MVIMKotlinSuspendFunction5>)transform __attribute__((swift_name("combineLatest(_:other:other2:other3:other4:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<MVIMFlow>)combineLatest:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other other2:(id<MVIMFlow>)other2 other3:(id<MVIMFlow>)other3 transform:(id<MVIMKotlinSuspendFunction4>)transform __attribute__((swift_name("combineLatest(_:other:other2:other3:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<MVIMFlow>)combineLatest:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other other2:(id<MVIMFlow>)other2 transform:(id<MVIMKotlinSuspendFunction3>)transform __attribute__((swift_name("combineLatest(_:other:other2:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<MVIMFlow>)combineLatest:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("combineLatest(_:other:transform:)"))) __attribute__((unavailable("Flow analogue of 'combineLatest' is 'combine'")));
+ (id<MVIMFlow>)compose:(id<MVIMFlow>)receiver transformer:(id<MVIMFlow> (^)(id<MVIMFlow>))transformer __attribute__((swift_name("compose(_:transformer:)"))) __attribute__((unavailable("Flow analogue of 'compose' is 'let'")));
+ (id<MVIMFlow>)concatMap:(id<MVIMFlow>)receiver mapper:(id<MVIMFlow> (^)(id _Nullable))mapper __attribute__((swift_name("concatMap(_:mapper:)"))) __attribute__((unavailable("Flow analogue of 'concatMap' is 'flatMapConcat'")));
+ (id<MVIMFlow>)concatWith:(id<MVIMFlow>)receiver value:(id _Nullable)value __attribute__((swift_name("concatWith(_:value:)"))) __attribute__((unavailable("Flow analogue of 'concatWith' is 'onCompletion'. Use 'onCompletion { emit(value) }'")));
+ (id<MVIMFlow>)concatWith:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other __attribute__((swift_name("concatWith(_:other:)"))) __attribute__((unavailable("Flow analogue of 'concatWith' is 'onCompletion'. Use 'onCompletion { if (it == null) emitAll(other) }'")));
+ (id<MVIMFlow>)delayEach:(id<MVIMFlow>)receiver timeMillis:(int64_t)timeMillis __attribute__((swift_name("delayEach(_:timeMillis:)"))) __attribute__((unavailable("Use 'onEach { delay(timeMillis) }'")));
+ (id<MVIMFlow>)delayFlow:(id<MVIMFlow>)receiver timeMillis:(int64_t)timeMillis __attribute__((swift_name("delayFlow(_:timeMillis:)"))) __attribute__((unavailable("Use 'onStart { delay(timeMillis) }'")));
+ (id<MVIMFlow>)flatMap:(id<MVIMFlow>)receiver mapper:(id<MVIMKotlinSuspendFunction1>)mapper __attribute__((swift_name("flatMap(_:mapper:)"))) __attribute__((unavailable("Flow analogue is 'flatMapConcat'")));
+ (id<MVIMFlow>)flatten:(id<MVIMFlow>)receiver __attribute__((swift_name("flatten(_:)"))) __attribute__((unavailable("Flow analogue of 'flatten' is 'flattenConcat'")));
+ (void)forEach:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action __attribute__((swift_name("forEach(_:action:)"))) __attribute__((unavailable("Flow analogue of 'forEach' is 'collect'")));
+ (id<MVIMFlow>)merge:(id<MVIMFlow>)receiver __attribute__((swift_name("merge(_:)"))) __attribute__((unavailable("Flow analogue of 'merge' is 'flattenConcat'")));
+ (id<MVIMFlow>)observeOn:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("observeOn(_:context:)"))) __attribute__((unavailable("Collect flow in the desired context instead")));
+ (id<MVIMFlow>)onErrorResume:(id<MVIMFlow>)receiver fallback:(id<MVIMFlow>)fallback __attribute__((swift_name("onErrorResume(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emitAll(fallback) }'")));
+ (id<MVIMFlow>)onErrorResumeNext:(id<MVIMFlow>)receiver fallback:(id<MVIMFlow>)fallback __attribute__((swift_name("onErrorResumeNext(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emitAll(fallback) }'")));
+ (id<MVIMFlow>)onErrorReturn:(id<MVIMFlow>)receiver fallback:(id _Nullable)fallback __attribute__((swift_name("onErrorReturn(_:fallback:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { emit(fallback) }'")));
+ (id<MVIMFlow>)onErrorReturn:(id<MVIMFlow>)receiver fallback:(id _Nullable)fallback predicate:(MVIMBoolean *(^)(MVIMKotlinThrowable *))predicate __attribute__((swift_name("onErrorReturn(_:fallback:predicate:)"))) __attribute__((unavailable("Flow analogue of 'onErrorXxx' is 'catch'. Use 'catch { e -> if (predicate(e)) emit(fallback) else throw e }'")));
+ (id<MVIMFlow>)publish:(id<MVIMFlow>)receiver __attribute__((swift_name("publish(_:)"))) __attribute__((unavailable("Flow analogue of 'publish()' is 'shareIn'. \npublish().connect() is the default strategy (no extra call is needed), \npublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \npublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<MVIMFlow>)publish:(id<MVIMFlow>)receiver bufferSize:(int32_t)bufferSize __attribute__((swift_name("publish(_:bufferSize:)"))) __attribute__((unavailable("Flow analogue of 'publish(bufferSize)' is 'buffer' followed by 'shareIn'. \npublish().connect() is the default strategy (no extra call is needed), \npublish().autoConnect() translates to 'started = SharingStared.Lazily' argument, \npublish().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<MVIMFlow>)publishOn:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("publishOn(_:context:)"))) __attribute__((unavailable("Collect flow in the desired context instead")));
+ (id<MVIMFlow>)replay:(id<MVIMFlow>)receiver __attribute__((swift_name("replay(_:)"))) __attribute__((unavailable("Flow analogue of 'replay()' is 'shareIn' with unlimited replay. \nreplay().connect() is the default strategy (no extra call is needed), \nreplay().autoConnect() translates to 'started = SharingStared.Lazily' argument, \nreplay().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<MVIMFlow>)replay:(id<MVIMFlow>)receiver bufferSize:(int32_t)bufferSize __attribute__((swift_name("replay(_:bufferSize:)"))) __attribute__((unavailable("Flow analogue of 'replay(bufferSize)' is 'shareIn' with the specified replay parameter. \nreplay().connect() is the default strategy (no extra call is needed), \nreplay().autoConnect() translates to 'started = SharingStared.Lazily' argument, \nreplay().refCount() translates to 'started = SharingStared.WhileSubscribed()' argument.")));
+ (id<MVIMFlow>)scanFold:(id<MVIMFlow>)receiver initial:(id _Nullable)initial operation:(id<MVIMKotlinSuspendFunction2>)operation __attribute__((swift_name("scanFold(_:initial:operation:)"))) __attribute__((unavailable("Flow has less verbose 'scan' shortcut")));
+ (id<MVIMFlow>)scanReduce:(id<MVIMFlow>)receiver operation:(id<MVIMKotlinSuspendFunction2>)operation __attribute__((swift_name("scanReduce(_:operation:)"))) __attribute__((unavailable("'scanReduce' was renamed to 'runningReduce' to be consistent with Kotlin standard library")));
+ (id<MVIMFlow>)skip:(id<MVIMFlow>)receiver count:(int32_t)count __attribute__((swift_name("skip(_:count:)"))) __attribute__((unavailable("Flow analogue of 'skip' is 'drop'")));
+ (id<MVIMFlow>)startWith:(id<MVIMFlow>)receiver value:(id _Nullable)value __attribute__((swift_name("startWith(_:value:)"))) __attribute__((unavailable("Flow analogue of 'startWith' is 'onStart'. Use 'onStart { emit(value) }'")));
+ (id<MVIMFlow>)startWith:(id<MVIMFlow>)receiver other:(id<MVIMFlow>)other __attribute__((swift_name("startWith(_:other:)"))) __attribute__((unavailable("Flow analogue of 'startWith' is 'onStart'. Use 'onStart { emitAll(other) }'")));
+ (void)subscribe:(id<MVIMFlow>)receiver __attribute__((swift_name("subscribe(_:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (void)subscribe:(id<MVIMFlow>)receiver onEach:(id<MVIMKotlinSuspendFunction1>)onEach __attribute__((swift_name("subscribe(_:onEach:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (void)subscribe:(id<MVIMFlow>)receiver onEach:(id<MVIMKotlinSuspendFunction1>)onEach onError:(id<MVIMKotlinSuspendFunction1>)onError __attribute__((swift_name("subscribe(_:onEach:onError:)"))) __attribute__((unavailable("Use 'launchIn' with 'onEach', 'onCompletion' and 'catch' instead")));
+ (id<MVIMFlow>)subscribeOn:(id<MVIMFlow>)receiver context:(id<MVIMKotlinCoroutineContext>)context __attribute__((swift_name("subscribeOn(_:context:)"))) __attribute__((unavailable("Use 'flowOn' instead")));
+ (id<MVIMFlow>)switchMap:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("switchMap(_:transform:)"))) __attribute__((unavailable("Flow analogues of 'switchMap' are 'transformLatest', 'flatMapLatest' and 'mapLatest'")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ErrorsKt_")))
@interface MVIMErrorsKt_ : MVIMBase
+ (id<MVIMFlow>)catch:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction2>)action __attribute__((swift_name("catch(_:action:)")));
+ (id<MVIMFlow>)onErrorCollect:(id<MVIMFlow>)receiver fallback:(id<MVIMFlow>)fallback predicate:(MVIMBoolean *(^)(MVIMKotlinThrowable *))predicate __attribute__((swift_name("onErrorCollect(_:fallback:predicate:)"))) __attribute__((unavailable("Use catch { e -> if (predicate(e)) emitAll(fallback) else throw e }")));
+ (id<MVIMFlow>)retry:(id<MVIMFlow>)receiver retries:(int64_t)retries predicate:(id<MVIMKotlinSuspendFunction1>)predicate __attribute__((swift_name("retry(_:retries:predicate:)")));
+ (id<MVIMFlow>)retryWhen:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction3>)predicate __attribute__((swift_name("retryWhen(_:predicate:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectKt")))
@interface MVIMCollectKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collect:(id<MVIMFlow>)receiver completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collect(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collect:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collect(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collectIndexed:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction2>)action completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collectIndexed(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)collectLatest:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("collectLatest(_:action:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)emitAll:(id<MVIMFlowCollector>)receiver flow:(id<MVIMFlow>)flow completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("emitAll(_:flow:completionHandler:)")));
+ (id<MVIMJob>)launchIn:(id<MVIMFlow>)receiver scope:(id<MVIMCoroutineScope>)scope __attribute__((swift_name("launchIn(_:scope:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CountKt")))
@interface MVIMCountKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<MVIMFlow>)receiver completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)count:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate completionHandler:(void (^)(MVIMInt * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("count(_:predicate:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DistinctKt")))
@interface MVIMDistinctKt : MVIMBase
+ (id<MVIMFlow>)distinctUntilChanged:(id<MVIMFlow>)receiver __attribute__((swift_name("distinctUntilChanged(_:)")));
+ (id<MVIMFlow>)distinctUntilChanged:(id<MVIMFlow>)receiver areEquivalent:(MVIMBoolean *(^)(id _Nullable, id _Nullable))areEquivalent __attribute__((swift_name("distinctUntilChanged(_:areEquivalent:)")));
+ (id<MVIMFlow>)distinctUntilChangedBy:(id<MVIMFlow>)receiver keySelector:(id _Nullable (^)(id _Nullable))keySelector __attribute__((swift_name("distinctUntilChangedBy(_:keySelector:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LimitKt")))
@interface MVIMLimitKt : MVIMBase
+ (id<MVIMFlow>)drop:(id<MVIMFlow>)receiver count:(int32_t)count __attribute__((swift_name("drop(_:count:)")));
+ (id<MVIMFlow>)dropWhile:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate __attribute__((swift_name("dropWhile(_:predicate:)")));
+ (id<MVIMFlow>)take:(id<MVIMFlow>)receiver count:(int32_t)count __attribute__((swift_name("take(_:count:)")));
+ (id<MVIMFlow>)takeWhile:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate __attribute__((swift_name("takeWhile(_:predicate:)")));
+ (id<MVIMFlow>)transformWhile:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("transformWhile(_:transform:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TransformKt")))
@interface MVIMTransformKt : MVIMBase
+ (id<MVIMFlow>)filter:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate __attribute__((swift_name("filter(_:predicate:)")));
+ (id<MVIMFlow>)filterIsInstance:(id<MVIMFlow>)receiver __attribute__((swift_name("filterIsInstance(_:)")));
+ (id<MVIMFlow>)filterNot:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate __attribute__((swift_name("filterNot(_:predicate:)")));
+ (id<MVIMFlow>)filterNotNull:(id<MVIMFlow>)receiver __attribute__((swift_name("filterNotNull(_:)")));
+ (id<MVIMFlow>)map:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("map(_:transform:)")));
+ (id<MVIMFlow>)mapNotNull:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction1>)transform __attribute__((swift_name("mapNotNull(_:transform:)")));
+ (id<MVIMFlow>)onEach:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action __attribute__((swift_name("onEach(_:action:)")));
+ (id<MVIMFlow>)runningFold:(id<MVIMFlow>)receiver initial:(id _Nullable)initial operation:(id<MVIMKotlinSuspendFunction2>)operation __attribute__((swift_name("runningFold(_:initial:operation:)")));
+ (id<MVIMFlow>)runningReduce:(id<MVIMFlow>)receiver operation:(id<MVIMKotlinSuspendFunction2>)operation __attribute__((swift_name("runningReduce(_:operation:)")));
+ (id<MVIMFlow>)scan:(id<MVIMFlow>)receiver initial:(id _Nullable)initial operation:(id<MVIMKotlinSuspendFunction2>)operation __attribute__((swift_name("scan(_:initial:operation:)")));
+ (id<MVIMFlow>)withIndex:(id<MVIMFlow>)receiver __attribute__((swift_name("withIndex(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ReduceKt")))
@interface MVIMReduceKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)first:(id<MVIMFlow>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("first(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)first:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("first(_:predicate:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)firstOrNull:(id<MVIMFlow>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("firstOrNull(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)firstOrNull:(id<MVIMFlow>)receiver predicate:(id<MVIMKotlinSuspendFunction1>)predicate completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("firstOrNull(_:predicate:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)fold:(id<MVIMFlow>)receiver initial:(id _Nullable)initial operation:(id<MVIMKotlinSuspendFunction2>)operation completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("fold(_:initial:operation:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)last:(id<MVIMFlow>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("last(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)lastOrNull:(id<MVIMFlow>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("lastOrNull(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)reduce:(id<MVIMFlow>)receiver operation:(id<MVIMKotlinSuspendFunction2>)operation completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("reduce(_:operation:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)single:(id<MVIMFlow>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("single(_:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)singleOrNull:(id<MVIMFlow>)receiver completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("singleOrNull(_:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EmittersKt")))
@interface MVIMEmittersKt : MVIMBase
+ (id<MVIMFlow>)onCompletion:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction2>)action __attribute__((swift_name("onCompletion(_:action:)")));
+ (id<MVIMFlow>)onEmpty:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action __attribute__((swift_name("onEmpty(_:action:)")));
+ (id<MVIMFlow>)onStart:(id<MVIMFlow>)receiver action:(id<MVIMKotlinSuspendFunction1>)action __attribute__((swift_name("onStart(_:action:)")));
+ (id<MVIMFlow>)transform:(id<MVIMFlow>)receiver transform:(id<MVIMKotlinSuspendFunction2>)transform __attribute__((swift_name("transform(_:transform:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CollectionKt")))
@interface MVIMCollectionKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toCollection:(id<MVIMFlow>)receiver destination:(id)destination completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toCollection(_:destination:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toList:(id<MVIMFlow>)receiver destination:(NSMutableArray<id> *)destination completionHandler:(void (^)(NSArray<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toList(_:destination:completionHandler:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)toSet:(id<MVIMFlow>)receiver destination:(MVIMMutableSet<id> *)destination completionHandler:(void (^)(NSSet<id> * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("toSet(_:destination:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SelectKt")))
@interface MVIMSelectKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)selectBuilder:(void (^)(id<MVIMSelectBuilder>))builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("select(builder:completionHandler:)")));
+ (void)onTimeout:(id<MVIMSelectBuilder>)receiver timeout:(int64_t)timeout block:(id<MVIMKotlinSuspendFunction0>)block __attribute__((swift_name("onTimeout(_:timeout:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SelectUnbiasedKt")))
@interface MVIMSelectUnbiasedKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)selectUnbiasedBuilder:(void (^)(id<MVIMSelectBuilder>))builder completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("selectUnbiased(builder:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("WhileSelectKt")))
@interface MVIMWhileSelectKt : MVIMBase

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)whileSelectBuilder:(void (^)(id<MVIMSelectBuilder>))builder completionHandler:(void (^)(MVIMKotlinUnit * _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("whileSelect(builder:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DispatchedContinuationKt")))
@interface MVIMDispatchedContinuationKt : MVIMBase
+ (void)resumeCancellableWith:(id<MVIMKotlinContinuation>)receiver result:(id _Nullable)result onCancellation:(void (^ _Nullable)(MVIMKotlinThrowable *))onCancellation __attribute__((swift_name("resumeCancellableWith(_:result:onCancellation:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("MutexKt")))
@interface MVIMMutexKt : MVIMBase
+ (id<MVIMMutex>)MutexLocked:(BOOL)locked __attribute__((swift_name("Mutex(locked:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withLock:(id<MVIMMutex>)receiver owner:(id _Nullable)owner action:(id _Nullable (^)(void))action completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withLock(_:owner:action:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SemaphoreKt")))
@interface MVIMSemaphoreKt : MVIMBase
+ (id<MVIMSemaphore>)SemaphorePermits:(int32_t)permits acquiredPermits:(int32_t)acquiredPermits __attribute__((swift_name("Semaphore(permits:acquiredPermits:)")));

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
+ (void)withPermit:(id<MVIMSemaphore>)receiver action:(id _Nullable (^)(void))action completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("withPermit(_:action:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonKt")))
@interface MVIMJsonKt : MVIMBase
+ (MVIMJson *)JsonFrom:(MVIMJson *)from builderAction:(void (^)(MVIMJsonBuilder *))builderAction __attribute__((swift_name("Json(from:builderAction:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElementKt")))
@interface MVIMJsonElementKt : MVIMBase
+ (MVIMJsonPrimitive *)JsonPrimitiveValue:(MVIMBoolean * _Nullable)value __attribute__((swift_name("JsonPrimitive(value:)")));
+ (MVIMJsonPrimitive *)JsonPrimitiveValue_:(id _Nullable)value __attribute__((swift_name("JsonPrimitive(value_:)")));
+ (MVIMJsonPrimitive *)JsonPrimitiveValue__:(NSString * _Nullable)value __attribute__((swift_name("JsonPrimitive(value__:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonElementBuildersKt")))
@interface MVIMJsonElementBuildersKt : MVIMBase
+ (NSArray<MVIMJsonElement *> *)buildJsonArrayBuilderAction:(void (^)(MVIMJsonArrayBuilder *))builderAction __attribute__((swift_name("buildJsonArray(builderAction:)")));
+ (NSDictionary<NSString *, MVIMJsonElement *> *)buildJsonObjectBuilderAction:(void (^)(MVIMJsonObjectBuilder *))builderAction __attribute__((swift_name("buildJsonObject(builderAction:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ListenerExtensionsKt")))
@interface MVIMListenerExtensionsKt : MVIMBase
+ (id<MVIMSettingsListener>)addBooleanListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key defaultValue:(BOOL)defaultValue callback:(void (^)(MVIMBoolean *))callback __attribute__((swift_name("addBooleanListener(_:key:defaultValue:callback:)")));
+ (id<MVIMSettingsListener>)addBooleanOrNullListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key callback:(void (^)(MVIMBoolean * _Nullable))callback __attribute__((swift_name("addBooleanOrNullListener(_:key:callback:)")));
+ (id<MVIMSettingsListener>)addDoubleListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key defaultValue:(double)defaultValue callback:(void (^)(MVIMDouble *))callback __attribute__((swift_name("addDoubleListener(_:key:defaultValue:callback:)")));
+ (id<MVIMSettingsListener>)addDoubleOrNullListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key callback:(void (^)(MVIMDouble * _Nullable))callback __attribute__((swift_name("addDoubleOrNullListener(_:key:callback:)")));
+ (id<MVIMSettingsListener>)addFloatListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key defaultValue:(float)defaultValue callback:(void (^)(MVIMFloat *))callback __attribute__((swift_name("addFloatListener(_:key:defaultValue:callback:)")));
+ (id<MVIMSettingsListener>)addFloatOrNullListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key callback:(void (^)(MVIMFloat * _Nullable))callback __attribute__((swift_name("addFloatOrNullListener(_:key:callback:)")));
+ (id<MVIMSettingsListener>)addIntListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key defaultValue:(int32_t)defaultValue callback:(void (^)(MVIMInt *))callback __attribute__((swift_name("addIntListener(_:key:defaultValue:callback:)")));
+ (id<MVIMSettingsListener>)addIntOrNullListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key callback:(void (^)(MVIMInt * _Nullable))callback __attribute__((swift_name("addIntOrNullListener(_:key:callback:)")));
+ (id<MVIMSettingsListener>)addLongListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key defaultValue:(int64_t)defaultValue callback:(void (^)(MVIMLong *))callback __attribute__((swift_name("addLongListener(_:key:defaultValue:callback:)")));
+ (id<MVIMSettingsListener>)addLongOrNullListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key callback:(void (^)(MVIMLong * _Nullable))callback __attribute__((swift_name("addLongOrNullListener(_:key:callback:)")));
+ (id<MVIMSettingsListener>)addStringListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key defaultValue:(NSString *)defaultValue callback:(void (^)(NSString *))callback __attribute__((swift_name("addStringListener(_:key:defaultValue:callback:)")));
+ (id<MVIMSettingsListener>)addStringOrNullListener:(id<MVIMObservableSettings>)receiver key:(NSString *)key callback:(void (^)(NSString * _Nullable))callback __attribute__((swift_name("addStringOrNullListener(_:key:callback:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DelegatesKt")))
@interface MVIMDelegatesKt : MVIMBase
+ (id<MVIMKotlinReadWriteProperty>)boolean:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key defaultValue:(BOOL)defaultValue __attribute__((swift_name("boolean(_:key:defaultValue:)")));
+ (id<MVIMKotlinReadWriteProperty>)double:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key defaultValue:(double)defaultValue __attribute__((swift_name("double(_:key:defaultValue:)")));
+ (id<MVIMKotlinReadWriteProperty>)float:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key defaultValue:(float)defaultValue __attribute__((swift_name("float(_:key:defaultValue:)")));
+ (id<MVIMKotlinReadWriteProperty>)int:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key defaultValue:(int32_t)defaultValue __attribute__((swift_name("int(_:key:defaultValue:)")));
+ (id<MVIMKotlinReadWriteProperty>)long:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key defaultValue:(int64_t)defaultValue __attribute__((swift_name("long(_:key:defaultValue:)")));
+ (id<MVIMKotlinReadWriteProperty>)nullableBoolean:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key __attribute__((swift_name("nullableBoolean(_:key:)")));
+ (id<MVIMKotlinReadWriteProperty>)nullableDouble:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key __attribute__((swift_name("nullableDouble(_:key:)")));
+ (id<MVIMKotlinReadWriteProperty>)nullableFloat:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key __attribute__((swift_name("nullableFloat(_:key:)")));
+ (id<MVIMKotlinReadWriteProperty>)nullableInt:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key __attribute__((swift_name("nullableInt(_:key:)")));
+ (id<MVIMKotlinReadWriteProperty>)nullableLong:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key __attribute__((swift_name("nullableLong(_:key:)")));
+ (id<MVIMKotlinReadWriteProperty>)nullableString:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key __attribute__((swift_name("nullableString(_:key:)")));
+ (id<MVIMKotlinReadWriteProperty>)string:(id<MVIMSettings>)receiver key:(NSString * _Nullable)key defaultValue:(NSString *)defaultValue __attribute__((swift_name("string(_:key:defaultValue:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("OperatorsKt")))
@interface MVIMOperatorsKt : MVIMBase
+ (BOOL)contains:(id<MVIMSettings>)receiver key:(NSString *)key __attribute__((swift_name("contains(_:key:)")));
+ (id _Nullable)get:(id<MVIMSettings>)receiver key:(NSString *)key __attribute__((swift_name("get(_:key:)")));
+ (BOOL)get:(id<MVIMSettings>)receiver key:(NSString *)key defaultValue:(BOOL)defaultValue __attribute__((swift_name("get(_:key:defaultValue:)")));
+ (double)get:(id<MVIMSettings>)receiver key:(NSString *)key defaultValue_:(double)defaultValue __attribute__((swift_name("get(_:key:defaultValue_:)")));
+ (float)get:(id<MVIMSettings>)receiver key:(NSString *)key defaultValue__:(float)defaultValue __attribute__((swift_name("get(_:key:defaultValue__:)")));
+ (int32_t)get:(id<MVIMSettings>)receiver key:(NSString *)key defaultValue___:(int32_t)defaultValue __attribute__((swift_name("get(_:key:defaultValue___:)")));
+ (int64_t)get:(id<MVIMSettings>)receiver key:(NSString *)key defaultValue____:(int64_t)defaultValue __attribute__((swift_name("get(_:key:defaultValue____:)")));
+ (NSString *)get:(id<MVIMSettings>)receiver key:(NSString *)key defaultValue_____:(NSString *)defaultValue __attribute__((swift_name("get(_:key:defaultValue_____:)")));
+ (void)minusAssign:(id<MVIMSettings>)receiver key:(NSString *)key __attribute__((swift_name("minusAssign(_:key:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value:(id _Nullable)value __attribute__((swift_name("set(_:key:value:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value_:(BOOL)value __attribute__((swift_name("set(_:key:value_:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value__:(double)value __attribute__((swift_name("set(_:key:value__:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value___:(float)value __attribute__((swift_name("set(_:key:value___:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value____:(int32_t)value __attribute__((swift_name("set(_:key:value____:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value_____:(int64_t)value __attribute__((swift_name("set(_:key:value_____:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value______:(MVIMKotlinNothing * _Nullable)value __attribute__((swift_name("set(_:key:value______:)")));
+ (void)set:(id<MVIMSettings>)receiver key:(NSString *)key value_______:(NSString *)value __attribute__((swift_name("set(_:key:value_______:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("FunctionsKt_")))
@interface MVIMFunctionsKt_ : MVIMBase
+ (NSMutableArray<id> *)frozenCopyOnWriteListCollection:(id _Nullable)collection __attribute__((swift_name("frozenCopyOnWriteList(collection:)")));
+ (MVIMMutableDictionary<id, id> *)frozenHashMapInitialCapacity:(int32_t)initialCapacity loadFactor:(float)loadFactor __attribute__((swift_name("frozenHashMap(initialCapacity:loadFactor:)"))) __attribute__((deprecated("Replacing Atomic collections with isolated state collections (modele `stately-iso-collections`)")));
+ (MVIMMutableSet<id> *)frozenHashSet __attribute__((swift_name("frozenHashSet()"))) __attribute__((deprecated("Replacing Atomic collections with isolated state collections (modele `stately-iso-collections`)")));
+ (NSMutableArray<id> *)frozenLinkedListStableIterator:(BOOL)stableIterator __attribute__((swift_name("frozenLinkedList(stableIterator:)"))) __attribute__((deprecated("Replacing Atomic collections with isolated state collections (modele `stately-iso-collections`)")));
+ (id<MVIMLruCache>)frozenLruCacheMaxCacheSize:(int32_t)maxCacheSize onRemove:(void (^)(id<MVIMKotlinMutableMapMutableEntry>))onRemove __attribute__((swift_name("frozenLruCache(maxCacheSize:onRemove:)")));
+ (NSArray<id> *)toList:(id<MVIMKotlinIterator>)receiver __attribute__((swift_name("toList(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SharedCollectionsKt")))
@interface MVIMSharedCollectionsKt : MVIMBase
+ (NSMutableArray<id> *)sharedList __attribute__((swift_name("sharedList()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LockKt")))
@interface MVIMLockKt : MVIMBase
+ (void)close:(NSRecursiveLock *)receiver __attribute__((swift_name("close(_:)")));
+ (id _Nullable)withLock:(NSRecursiveLock *)receiver block:(id _Nullable (^)(void))block __attribute__((swift_name("withLock(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("HelpersKt")))
@interface MVIMHelpersKt : MVIMBase
+ (BOOL)isFrozen:(id _Nullable)receiver __attribute__((swift_name("isFrozen(_:)")));
+ (void)ensureNeverFrozen:(id)receiver __attribute__((swift_name("ensureNeverFrozen(_:)")));
+ (id _Nullable)freeze:(id _Nullable)receiver __attribute__((swift_name("freeze(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TraceKt")))
@interface MVIMTraceKt : MVIMBase
+ (MVIMTraceBase *)TraceSize:(int32_t)size format:(MVIMTraceFormat *)format __attribute__((swift_name("Trace(size:format:)")));
@property (class, readonly) MVIMTraceFormat *traceFormatDefault __attribute__((swift_name("traceFormatDefault")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("TraceFormatKt")))
@interface MVIMTraceFormatKt : MVIMBase
+ (MVIMTraceFormat *)TraceFormatFormat:(NSString *(^)(MVIMInt *, id))format __attribute__((swift_name("TraceFormat(format:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicFUKt")))
@interface MVIMAtomicFUKt : MVIMBase
+ (id)atomicInitial:(id _Nullable)initial __attribute__((swift_name("atomic(initial:)")));
+ (id)atomicInitial:(id _Nullable)initial trace:(MVIMTraceBase *)trace __attribute__((swift_name("atomic(initial:trace:)")));
+ (id)atomicInitial_:(BOOL)initial __attribute__((swift_name("atomic(initial_:)")));
+ (id)atomicInitial:(BOOL)initial trace_:(MVIMTraceBase *)trace __attribute__((swift_name("atomic(initial:trace_:)")));
+ (id)atomicInitial__:(int32_t)initial __attribute__((swift_name("atomic(initial__:)")));
+ (id)atomicInitial:(int32_t)initial trace__:(MVIMTraceBase *)trace __attribute__((swift_name("atomic(initial:trace__:)")));
+ (id)atomicInitial___:(int64_t)initial __attribute__((swift_name("atomic(initial___:)")));
+ (id)atomicInitial:(int64_t)initial trace___:(MVIMTraceBase *)trace __attribute__((swift_name("atomic(initial:trace___:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AtomicFU_commonKt")))
@interface MVIMAtomicFU_commonKt : MVIMBase
+ (MVIMAtomicArray<id> *)atomicArrayOfNullsSize:(int32_t)size __attribute__((swift_name("atomicArrayOfNulls(size:)")));
+ (BOOL)getAndUpdate:(id)receiver function:(MVIMBoolean *(^)(MVIMBoolean *))function __attribute__((swift_name("getAndUpdate(_:function:)")));
+ (int32_t)getAndUpdate:(id)receiver function_:(MVIMInt *(^)(MVIMInt *))function __attribute__((swift_name("getAndUpdate(_:function_:)")));
+ (int64_t)getAndUpdate:(id)receiver function__:(MVIMLong *(^)(MVIMLong *))function __attribute__((swift_name("getAndUpdate(_:function__:)")));
+ (id _Nullable)getAndUpdate:(id)receiver function___:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("getAndUpdate(_:function___:)")));
+ (void)loop:(id)receiver action:(void (^)(MVIMBoolean *))action __attribute__((swift_name("loop(_:action:)")));
+ (void)loop:(id)receiver action_:(void (^)(MVIMInt *))action __attribute__((swift_name("loop(_:action_:)")));
+ (void)loop:(id)receiver action__:(void (^)(MVIMLong *))action __attribute__((swift_name("loop(_:action__:)")));
+ (void)loop:(id)receiver action___:(void (^)(id _Nullable))action __attribute__((swift_name("loop(_:action___:)")));
+ (void)update:(id)receiver function:(MVIMBoolean *(^)(MVIMBoolean *))function __attribute__((swift_name("update(_:function:)")));
+ (void)update:(id)receiver function_:(MVIMInt *(^)(MVIMInt *))function __attribute__((swift_name("update(_:function_:)")));
+ (void)update:(id)receiver function__:(MVIMLong *(^)(MVIMLong *))function __attribute__((swift_name("update(_:function__:)")));
+ (void)update:(id)receiver function___:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("update(_:function___:)")));
+ (BOOL)updateAndGet:(id)receiver function:(MVIMBoolean *(^)(MVIMBoolean *))function __attribute__((swift_name("updateAndGet(_:function:)")));
+ (int32_t)updateAndGet:(id)receiver function_:(MVIMInt *(^)(MVIMInt *))function __attribute__((swift_name("updateAndGet(_:function_:)")));
+ (int64_t)updateAndGet:(id)receiver function__:(MVIMLong *(^)(MVIMLong *))function __attribute__((swift_name("updateAndGet(_:function__:)")));
+ (id _Nullable)updateAndGet:(id)receiver function___:(id _Nullable (^)(id _Nullable))function __attribute__((swift_name("updateAndGet(_:function___:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SynchronizedKt")))
@interface MVIMSynchronizedKt : MVIMBase
+ (MVIMSynchronizedObject *)reentrantLock __attribute__((swift_name("reentrantLock()")));
+ (id _Nullable)synchronizedLock:(MVIMSynchronizedObject *)lock block:(id _Nullable (^)(void))block __attribute__((swift_name("synchronized(lock:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersKt")))
@interface MVIMSerializersKt : MVIMBase
+ (id<MVIMKSerializer>)serializer __attribute__((swift_name("serializer()")));
+ (id<MVIMKSerializer>)serializerType:(id<MVIMKotlinKType>)type __attribute__((swift_name("serializer(type:)")));
+ (id<MVIMKSerializer> _Nullable)serializerOrNullType:(id<MVIMKotlinKType>)type __attribute__((swift_name("serializerOrNull(type:)")));
+ (id<MVIMKSerializer>)serializer:(id<MVIMKotlinKClass>)receiver __attribute__((swift_name("serializer(_:)")));
+ (id<MVIMKSerializer> _Nullable)serializerOrNull:(id<MVIMKotlinKClass>)receiver __attribute__((swift_name("serializerOrNull(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialFormatKt")))
@interface MVIMSerialFormatKt : MVIMBase
+ (id _Nullable)decodeFromByteArray:(id<MVIMBinaryFormat>)receiver bytes:(MVIMKotlinByteArray *)bytes __attribute__((swift_name("decodeFromByteArray(_:bytes:)")));
+ (id _Nullable)decodeFromHexString:(id<MVIMBinaryFormat>)receiver hex:(NSString *)hex __attribute__((swift_name("decodeFromHexString(_:hex:)")));
+ (id _Nullable)decodeFromHexString:(id<MVIMBinaryFormat>)receiver deserializer:(id<MVIMDeserializationStrategy>)deserializer hex:(NSString *)hex __attribute__((swift_name("decodeFromHexString(_:deserializer:hex:)")));
+ (id _Nullable)decodeFromString:(id<MVIMStringFormat>)receiver string:(NSString *)string __attribute__((swift_name("decodeFromString(_:string:)")));
+ (MVIMKotlinByteArray *)encodeToByteArray:(id<MVIMBinaryFormat>)receiver value:(id _Nullable)value __attribute__((swift_name("encodeToByteArray(_:value:)")));
+ (NSString *)encodeToHexString:(id<MVIMBinaryFormat>)receiver value:(id _Nullable)value __attribute__((swift_name("encodeToHexString(_:value:)")));
+ (NSString *)encodeToHexString:(id<MVIMBinaryFormat>)receiver serializer:(id<MVIMSerializationStrategy>)serializer value:(id _Nullable)value __attribute__((swift_name("encodeToHexString(_:serializer:value:)")));
+ (NSString *)encodeToString:(id<MVIMStringFormat>)receiver value:(id _Nullable)value __attribute__((swift_name("encodeToString(_:value:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PluginExceptionsKt")))
@interface MVIMPluginExceptionsKt : MVIMBase
+ (void)throwArrayMissingFieldExceptionSeenArray:(MVIMKotlinIntArray *)seenArray goldenMaskArray:(MVIMKotlinIntArray *)goldenMaskArray descriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("throwArrayMissingFieldException(seenArray:goldenMaskArray:descriptor:)")));
+ (void)throwMissingFieldExceptionSeen:(int32_t)seen goldenMask:(int32_t)goldenMask descriptor:(id<MVIMSerialDescriptor>)descriptor __attribute__((swift_name("throwMissingFieldException(seen:goldenMask:descriptor:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("JsonInternalDependenciesKt")))
@interface MVIMJsonInternalDependenciesKt : MVIMBase
+ (NSSet<NSString *> *)jsonCachedSerialNames:(id<MVIMSerialDescriptor>)receiver __attribute__((swift_name("jsonCachedSerialNames(_:)"))) __attribute__((unavailable("Should not be used")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersModuleKt")))
@interface MVIMSerializersModuleKt : MVIMBase
@property (class, readonly) MVIMSerializersModule *EmptySerializersModule __attribute__((swift_name("EmptySerializersModule")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerializersModuleBuildersKt")))
@interface MVIMSerializersModuleBuildersKt : MVIMBase
+ (MVIMSerializersModule *)SerializersModuleBuilderAction:(void (^)(MVIMSerializersModuleBuilder *))builderAction __attribute__((swift_name("SerializersModule(builderAction:)")));
+ (MVIMSerializersModule *)serializersModuleOfKClass:(id<MVIMKotlinKClass>)kClass serializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("serializersModuleOf(kClass:serializer:)")));
+ (MVIMSerializersModule *)serializersModuleOfSerializer:(id<MVIMKSerializer>)serializer __attribute__((swift_name("serializersModuleOf(serializer:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("ContextAwareKt")))
@interface MVIMContextAwareKt : MVIMBase
+ (id<MVIMKotlinKClass> _Nullable)capturedKClass:(id<MVIMSerialDescriptor>)receiver __attribute__((swift_name("capturedKClass(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialDescriptorKt")))
@interface MVIMSerialDescriptorKt : MVIMBase
+ (id)elementDescriptors:(id<MVIMSerialDescriptor>)receiver __attribute__((swift_name("elementDescriptors(_:)")));
+ (id)elementNames:(id<MVIMSerialDescriptor>)receiver __attribute__((swift_name("elementNames(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SerialDescriptorsKt")))
@interface MVIMSerialDescriptorsKt : MVIMBase
+ (id<MVIMSerialDescriptor>)nullable:(id<MVIMSerialDescriptor>)receiver __attribute__((swift_name("nullable(_:)")));
+ (id<MVIMSerialDescriptor>)PrimitiveSerialDescriptorSerialName:(NSString *)serialName kind:(MVIMPrimitiveKind *)kind __attribute__((swift_name("PrimitiveSerialDescriptor(serialName:kind:)")));
+ (id<MVIMSerialDescriptor>)buildClassSerialDescriptorSerialName:(NSString *)serialName typeParameters:(MVIMKotlinArray<id<MVIMSerialDescriptor>> *)typeParameters builderAction:(void (^)(MVIMClassSerialDescriptorBuilder *))builderAction __attribute__((swift_name("buildClassSerialDescriptor(serialName:typeParameters:builderAction:)")));
+ (id<MVIMSerialDescriptor>)buildSerialDescriptorSerialName:(NSString *)serialName kind:(MVIMSerialKind *)kind typeParameters:(MVIMKotlinArray<id<MVIMSerialDescriptor>> *)typeParameters builder:(void (^)(MVIMClassSerialDescriptorBuilder *))builder __attribute__((swift_name("buildSerialDescriptor(serialName:kind:typeParameters:builder:)")));
+ (id<MVIMSerialDescriptor>)listSerialDescriptor __attribute__((swift_name("listSerialDescriptor()")));
+ (id<MVIMSerialDescriptor>)listSerialDescriptorElementDescriptor:(id<MVIMSerialDescriptor>)elementDescriptor __attribute__((swift_name("listSerialDescriptor(elementDescriptor:)")));
+ (id<MVIMSerialDescriptor>)mapSerialDescriptor __attribute__((swift_name("mapSerialDescriptor()")));
+ (id<MVIMSerialDescriptor>)mapSerialDescriptorKeyDescriptor:(id<MVIMSerialDescriptor>)keyDescriptor valueDescriptor:(id<MVIMSerialDescriptor>)valueDescriptor __attribute__((swift_name("mapSerialDescriptor(keyDescriptor:valueDescriptor:)")));
+ (id<MVIMSerialDescriptor>)serialDescriptor __attribute__((swift_name("serialDescriptor()")));
+ (id<MVIMSerialDescriptor>)serialDescriptorType:(id<MVIMKotlinKType>)type __attribute__((swift_name("serialDescriptor(type:)")));
+ (id<MVIMSerialDescriptor>)setSerialDescriptor __attribute__((swift_name("setSerialDescriptor()")));
+ (id<MVIMSerialDescriptor>)setSerialDescriptorElementDescriptor:(id<MVIMSerialDescriptor>)elementDescriptor __attribute__((swift_name("setSerialDescriptor(elementDescriptor:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("BuiltinSerializersKt")))
@interface MVIMBuiltinSerializersKt : MVIMBase
+ (id<MVIMKSerializer>)nullable:(id<MVIMKSerializer>)receiver __attribute__((swift_name("nullable(_:)")));
+ (id<MVIMKSerializer>)ArraySerializerKClass:(id<MVIMKotlinKClass>)kClass elementSerializer:(id<MVIMKSerializer>)elementSerializer __attribute__((swift_name("ArraySerializer(kClass:elementSerializer:)")));
+ (id<MVIMKSerializer>)ArraySerializerElementSerializer:(id<MVIMKSerializer>)elementSerializer __attribute__((swift_name("ArraySerializer(elementSerializer:)")));
+ (id<MVIMKSerializer>)BooleanArraySerializer __attribute__((swift_name("BooleanArraySerializer()")));
+ (id<MVIMKSerializer>)ByteArraySerializer __attribute__((swift_name("ByteArraySerializer()")));
+ (id<MVIMKSerializer>)CharArraySerializer __attribute__((swift_name("CharArraySerializer()")));
+ (id<MVIMKSerializer>)DoubleArraySerializer __attribute__((swift_name("DoubleArraySerializer()")));
+ (id<MVIMKSerializer>)FloatArraySerializer __attribute__((swift_name("FloatArraySerializer()")));
+ (id<MVIMKSerializer>)IntArraySerializer __attribute__((swift_name("IntArraySerializer()")));
+ (id<MVIMKSerializer>)ListSerializerElementSerializer:(id<MVIMKSerializer>)elementSerializer __attribute__((swift_name("ListSerializer(elementSerializer:)")));
+ (id<MVIMKSerializer>)LongArraySerializer __attribute__((swift_name("LongArraySerializer()")));
+ (id<MVIMKSerializer>)MapEntrySerializerKeySerializer:(id<MVIMKSerializer>)keySerializer valueSerializer:(id<MVIMKSerializer>)valueSerializer __attribute__((swift_name("MapEntrySerializer(keySerializer:valueSerializer:)")));
+ (id<MVIMKSerializer>)MapSerializerKeySerializer:(id<MVIMKSerializer>)keySerializer valueSerializer:(id<MVIMKSerializer>)valueSerializer __attribute__((swift_name("MapSerializer(keySerializer:valueSerializer:)")));
+ (id<MVIMKSerializer>)PairSerializerKeySerializer:(id<MVIMKSerializer>)keySerializer valueSerializer:(id<MVIMKSerializer>)valueSerializer __attribute__((swift_name("PairSerializer(keySerializer:valueSerializer:)")));
+ (id<MVIMKSerializer>)SetSerializerElementSerializer:(id<MVIMKSerializer>)elementSerializer __attribute__((swift_name("SetSerializer(elementSerializer:)")));
+ (id<MVIMKSerializer>)ShortArraySerializer __attribute__((swift_name("ShortArraySerializer()")));
+ (id<MVIMKSerializer>)TripleSerializerASerializer:(id<MVIMKSerializer>)aSerializer bSerializer:(id<MVIMKSerializer>)bSerializer cSerializer:(id<MVIMKSerializer>)cSerializer __attribute__((swift_name("TripleSerializer(aSerializer:bSerializer:cSerializer:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DecodingKt")))
@interface MVIMDecodingKt : MVIMBase
+ (id _Nullable)decodeStructure:(id<MVIMDecoder>)receiver descriptor:(id<MVIMSerialDescriptor>)descriptor block:(id _Nullable (^)(id<MVIMCompositeDecoder>))block __attribute__((swift_name("decodeStructure(_:descriptor:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("EncodingKt")))
@interface MVIMEncodingKt : MVIMBase
+ (void)encodeStructure:(id<MVIMEncoder>)receiver descriptor:(id<MVIMSerialDescriptor>)descriptor block:(void (^)(id<MVIMCompositeEncoder>))block __attribute__((swift_name("encodeStructure(_:descriptor:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseConnectionKt")))
@interface MVIMDatabaseConnectionKt : MVIMBase
+ (MVIMJournalMode *)journalMode:(id<MVIMDatabaseConnection>)receiver __attribute__((swift_name("journalMode(_:)")));
+ (int32_t)getVersion:(id<MVIMDatabaseConnection>)receiver __attribute__((swift_name("getVersion(_:)")));
+ (int64_t)longForQuery:(id<MVIMDatabaseConnection>)receiver sql:(NSString *)sql __attribute__((swift_name("longForQuery(_:sql:)")));
+ (void)resetCipherKey:(id<MVIMDatabaseConnection>)receiver oldKey:(NSString *)oldKey newKey:(NSString *)newKey __attribute__((swift_name("resetCipherKey(_:oldKey:newKey:)")));
+ (void)setCipherKey:(id<MVIMDatabaseConnection>)receiver cipherKey:(NSString *)cipherKey __attribute__((swift_name("setCipherKey(_:cipherKey:)")));
+ (void)setVersion:(id<MVIMDatabaseConnection>)receiver version:(int32_t)version __attribute__((swift_name("setVersion(_:version:)")));
+ (NSString *)stringForQuery:(id<MVIMDatabaseConnection>)receiver sql:(NSString *)sql __attribute__((swift_name("stringForQuery(_:sql:)")));
+ (void)updateForeignKeyConstraints:(id<MVIMDatabaseConnection>)receiver enabled:(BOOL)enabled __attribute__((swift_name("updateForeignKeyConstraints(_:enabled:)")));
+ (MVIMJournalMode *)updateJournalMode:(id<MVIMDatabaseConnection>)receiver value:(MVIMJournalMode *)value __attribute__((swift_name("updateJournalMode(_:value:)")));
+ (id _Nullable)withStatement:(id<MVIMDatabaseConnection>)receiver sql:(NSString *)sql proc:(id _Nullable (^)(id<MVIMStatement>))proc __attribute__((swift_name("withStatement(_:sql:proc:)")));
+ (id _Nullable)withTransaction:(id<MVIMDatabaseConnection>)receiver proc:(id _Nullable (^)(id<MVIMDatabaseConnection>))proc __attribute__((swift_name("withTransaction(_:proc:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CreateDatabaseManagerKt")))
@interface MVIMCreateDatabaseManagerKt : MVIMBase
+ (id<MVIMDatabaseManager>)createDatabaseManagerConfiguration:(MVIMDatabaseConfiguration *)configuration __attribute__((swift_name("createDatabaseManager(configuration:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("StatementKt")))
@interface MVIMStatementKt : MVIMBase
+ (void)bindBlob:(id<MVIMStatement>)receiver index:(int32_t)index value:(MVIMKotlinByteArray * _Nullable)value __attribute__((swift_name("bindBlob(_:index:value:)")));
+ (void)bindDouble:(id<MVIMStatement>)receiver index:(int32_t)index value:(MVIMDouble * _Nullable)value __attribute__((swift_name("bindDouble(_:index:value:)")));
+ (void)bindLong:(id<MVIMStatement>)receiver index:(int32_t)index value:(MVIMLong * _Nullable)value __attribute__((swift_name("bindLong(_:index:value:)")));
+ (void)bindString:(id<MVIMStatement>)receiver index:(int32_t)index value:(NSString * _Nullable)value __attribute__((swift_name("bindString(_:index:value:)")));
+ (int64_t)longForQuery:(id<MVIMStatement>)receiver __attribute__((swift_name("longForQuery(_:)")));
+ (NSString *)stringForQuery:(id<MVIMStatement>)receiver __attribute__((swift_name("stringForQuery(_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("CursorKt")))
@interface MVIMCursorKt : MVIMBase
+ (int64_t)forLong:(id<MVIMCursor>)receiver __attribute__((swift_name("forLong(_:)")));
+ (MVIMKotlinByteArray * _Nullable)getBytesOrNull:(id<MVIMCursor>)receiver index:(int32_t)index __attribute__((swift_name("getBytesOrNull(_:index:)")));
+ (int32_t)getColumnIndexOrThrow:(id<MVIMCursor>)receiver name:(NSString *)name __attribute__((swift_name("getColumnIndexOrThrow(_:name:)")));
+ (MVIMDouble * _Nullable)getDoubleOrNull:(id<MVIMCursor>)receiver index:(int32_t)index __attribute__((swift_name("getDoubleOrNull(_:index:)")));
+ (MVIMLong * _Nullable)getLongOrNull:(id<MVIMCursor>)receiver index:(int32_t)index __attribute__((swift_name("getLongOrNull(_:index:)")));
+ (NSString * _Nullable)getStringOrNull:(id<MVIMCursor>)receiver index:(int32_t)index __attribute__((swift_name("getStringOrNull(_:index:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("DatabaseManagerKt")))
@interface MVIMDatabaseManagerKt : MVIMBase
+ (id _Nullable)withConnection:(id<MVIMDatabaseManager>)receiver block:(id _Nullable (^)(id<MVIMDatabaseConnection>))block __attribute__((swift_name("withConnection(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LockKt_")))
@interface MVIMLockKt_ : MVIMBase
+ (void)close:(NSRecursiveLock *)receiver __attribute__((swift_name("close(_:)")));
+ (id _Nullable)withLock:(NSRecursiveLock *)receiver block:(id _Nullable (^)(void))block __attribute__((swift_name("withLock(_:block:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("PlatformKt_")))
@interface MVIMPlatformKt_ : MVIMBase
+ (NSString *)bytesToStringBv:(void *)bv __attribute__((swift_name("bytesToString(bv:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("SqliteDatabaseKt")))
@interface MVIMSqliteDatabaseKt : MVIMBase
+ (MVIMSqliteDatabase *)dbOpenPath:(NSString *)path openFlags:(NSArray<MVIMOpenFlags *> *)openFlags label:(NSString *)label enableTrace:(BOOL)enableTrace enableProfile:(BOOL)enableProfile lookasideSlotSize:(int32_t)lookasideSlotSize lookasideSlotCount:(int32_t)lookasideSlotCount busyTimeout:(int32_t)busyTimeout logging:(id<MVIMLogger_>)logging verboseDataCalls:(BOOL)verboseDataCalls __attribute__((swift_name("dbOpen(path:openFlags:label:enableTrace:enableProfile:lookasideSlotSize:lookasideSlotCount:busyTimeout:logging:verboseDataCalls:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("LoggerKt_")))
@interface MVIMLoggerKt_ : MVIMBase
+ (void)e:(id<MVIMLogger_>)receiver exception:(MVIMKotlinThrowable * _Nullable)exception block:(NSString *(^)(void))block __attribute__((swift_name("e(_:exception:block:)")));
+ (void)v:(id<MVIMLogger_>)receiver block:(NSString *(^)(void))block __attribute__((swift_name("v(_:block:)")));
@end;

__attribute__((swift_name("KotlinKDeclarationContainer")))
@protocol MVIMKotlinKDeclarationContainer
@required
@end;

__attribute__((swift_name("KotlinKAnnotatedElement")))
@protocol MVIMKotlinKAnnotatedElement
@required
@end;

__attribute__((swift_name("KotlinKClassifier")))
@protocol MVIMKotlinKClassifier
@required
@end;

__attribute__((swift_name("KotlinKClass")))
@protocol MVIMKotlinKClass <MVIMKotlinKDeclarationContainer, MVIMKotlinKAnnotatedElement, MVIMKotlinKClassifier>
@required
- (BOOL)isInstanceValue:(id _Nullable)value __attribute__((swift_name("isInstance(value:)")));
@property (readonly) NSString * _Nullable qualifiedName __attribute__((swift_name("qualifiedName")));
@property (readonly) NSString * _Nullable simpleName __attribute__((swift_name("simpleName")));
@end;

__attribute__((swift_name("KotlinLazy")))
@protocol MVIMKotlinLazy
@required
- (BOOL)isInitialized __attribute__((swift_name("isInitialized()")));
@property (readonly) id _Nullable value __attribute__((swift_name("value")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinLazyThreadSafetyMode")))
@interface MVIMKotlinLazyThreadSafetyMode : MVIMKotlinEnum<MVIMKotlinLazyThreadSafetyMode *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMKotlinLazyThreadSafetyMode *synchronized __attribute__((swift_name("synchronized")));
@property (class, readonly) MVIMKotlinLazyThreadSafetyMode *publication __attribute__((swift_name("publication")));
@property (class, readonly) MVIMKotlinLazyThreadSafetyMode *none __attribute__((swift_name("none")));
+ (MVIMKotlinArray<MVIMKotlinLazyThreadSafetyMode *> *)values __attribute__((swift_name("values()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinNothing")))
@interface MVIMKotlinNothing : MVIMBase
@end;

__attribute__((swift_name("KotlinKType")))
@protocol MVIMKotlinKType
@required
@property (readonly) NSArray<MVIMKotlinKTypeProjection *> *arguments __attribute__((swift_name("arguments")));
@property (readonly) id<MVIMKotlinKClassifier> _Nullable classifier __attribute__((swift_name("classifier")));
@property (readonly) BOOL isMarkedNullable __attribute__((swift_name("isMarkedNullable")));
@end;

__attribute__((swift_name("KotlinFunction")))
@protocol MVIMKotlinFunction
@required
@end;

__attribute__((swift_name("KotlinSuspendFunction2")))
@protocol MVIMKotlinSuspendFunction2 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinSuspendFunction1")))
@protocol MVIMKotlinSuspendFunction1 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinIterator")))
@protocol MVIMKotlinIterator
@required
- (BOOL)hasNext __attribute__((swift_name("hasNext()")));
- (id _Nullable)next__ __attribute__((swift_name("next_()")));
@end;

__attribute__((swift_name("KotlinSuspendFunction3")))
@protocol MVIMKotlinSuspendFunction3 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinSequence")))
@protocol MVIMKotlinSequence
@required
- (id<MVIMKotlinIterator>)iterator __attribute__((swift_name("iterator()")));
@end;

__attribute__((swift_name("KotlinMutableIterator")))
@protocol MVIMKotlinMutableIterator <MVIMKotlinIterator>
@required
- (void)remove_ __attribute__((swift_name("remove_()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinCharArray")))
@interface MVIMKotlinCharArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(id (^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (unichar)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinCharIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(unichar)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinSuspendFunction0")))
@protocol MVIMKotlinSuspendFunction0 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeWithCompletionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("AbstractSharedLinkedListNode")))
@interface MVIMAbstractSharedLinkedListNode<T> : MVIMBase
- (instancetype)initWithList:(NSMutableArray<id> *)list __attribute__((swift_name("init(list:)"))) __attribute__((objc_designated_initializer));
- (BOOL)addT:(T _Nullable)t __attribute__((swift_name("add(t:)")));
- (void)readd __attribute__((swift_name("readd()")));
- (void)removePermanent:(BOOL)permanent __attribute__((swift_name("remove(permanent:)")));
- (void)setT:(T _Nullable)t __attribute__((swift_name("set(t:)")));
@property (readonly) BOOL isRemoved __attribute__((swift_name("isRemoved")));
@property (readonly) NSMutableArray<id> *list __attribute__((swift_name("list")));
@property (readonly) MVIMAtomicReference<MVIMAbstractSharedLinkedListNode<T> *> *next __attribute__((swift_name("next")));
@property (readonly) T _Nullable nodeValue __attribute__((swift_name("nodeValue")));
@property (readonly) MVIMAtomicReference<MVIMAbstractSharedLinkedListNode<T> *> *prev __attribute__((swift_name("prev")));
@end;

__attribute__((swift_name("KotlinAnnotation")))
@protocol MVIMKotlinAnnotation
@required
@end;

__attribute__((swift_name("KotlinKCallable")))
@protocol MVIMKotlinKCallable <MVIMKotlinKAnnotatedElement>
@required
@property (readonly) NSString *name_ __attribute__((swift_name("name_")));
@property (readonly) id<MVIMKotlinKType> returnType __attribute__((swift_name("returnType")));
@end;

__attribute__((swift_name("KotlinKProperty")))
@protocol MVIMKotlinKProperty <MVIMKotlinKCallable>
@required
@end;

__attribute__((swift_name("KotlinLongIterator")))
@interface MVIMKotlinLongIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMLong *)next__ __attribute__((swift_name("next_()")));
- (int64_t)nextLong __attribute__((swift_name("nextLong()")));
@end;

__attribute__((swift_name("KotlinByteIterator")))
@interface MVIMKotlinByteIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMByte *)next__ __attribute__((swift_name("next_()")));
- (int8_t)nextByte __attribute__((swift_name("nextByte()")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinDoubleArray")))
@interface MVIMKotlinDoubleArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(MVIMDouble *(^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (double)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinDoubleIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(double)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinFloatArray")))
@interface MVIMKotlinFloatArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(MVIMFloat *(^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (float)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinFloatIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(float)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinShortArray")))
@interface MVIMKotlinShortArray : MVIMBase
+ (instancetype)arrayWithSize:(int32_t)size __attribute__((swift_name("init(size:)")));
+ (instancetype)arrayWithSize:(int32_t)size init:(MVIMShort *(^)(MVIMInt *))init __attribute__((swift_name("init(size:init:)")));
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (int16_t)getIndex:(int32_t)index __attribute__((swift_name("get(index:)")));
- (MVIMKotlinShortIterator *)iterator __attribute__((swift_name("iterator()")));
- (void)setIndex:(int32_t)index value:(int16_t)value __attribute__((swift_name("set(index:value:)")));
@property (readonly) int32_t size __attribute__((swift_name("size")));
@end;

__attribute__((swift_name("KotlinIntIterator")))
@interface MVIMKotlinIntIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMInt *)next__ __attribute__((swift_name("next_()")));
- (int32_t)nextInt __attribute__((swift_name("nextInt()")));
@end;

__attribute__((swift_name("KotlinTimeSource")))
@protocol MVIMKotlinTimeSource
@required
- (MVIMKotlinTimeMark *)markNow __attribute__((swift_name("markNow()")));
@end;

__attribute__((swift_name("KotlinNativePlacement")))
@protocol MVIMKotlinNativePlacement
@required
- (void *)doAllocSize:(int32_t)size align:(int32_t)align __attribute__((swift_name("doAlloc(size:align:)")));
- (void *)doAllocSize:(int64_t)size align_:(int32_t)align __attribute__((swift_name("doAlloc(size:align_:)")));
@end;

__attribute__((swift_name("KotlinNativeFreeablePlacement")))
@protocol MVIMKotlinNativeFreeablePlacement <MVIMKotlinNativePlacement>
@required
- (void)freeMem:(void * _Nullable)mem __attribute__((swift_name("free(mem:)")));
@end;

__attribute__((swift_name("KotlinReadOnlyProperty")))
@protocol MVIMKotlinReadOnlyProperty
@required
- (id _Nullable)getValueThisRef:(id _Nullable)thisRef property:(id<MVIMKotlinKProperty>)property __attribute__((swift_name("getValue(thisRef:property:)")));
@end;

__attribute__((swift_name("KotlinReadWriteProperty")))
@protocol MVIMKotlinReadWriteProperty <MVIMKotlinReadOnlyProperty>
@required
- (void)setValueThisRef:(id _Nullable)thisRef property:(id<MVIMKotlinKProperty>)property value:(id _Nullable)value __attribute__((swift_name("setValue(thisRef:property:value:)")));
@end;

__attribute__((swift_name("KotlinCValuesRef")))
@interface MVIMKotlinCValuesRef<T> : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void *)getPointerScope:(MVIMKotlinAutofreeScope *)scope __attribute__((swift_name("getPointer(scope:)")));
@end;

__attribute__((swift_name("KotlinSuspendFunction5")))
@protocol MVIMKotlinSuspendFunction5 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 p5:(id _Nullable)p5 completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:p5:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinSuspendFunction4")))
@protocol MVIMKotlinSuspendFunction4 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:completionHandler:)")));
@end;

__attribute__((swift_name("KotlinSuspendFunction6")))
@protocol MVIMKotlinSuspendFunction6 <MVIMKotlinFunction>
@required

/**
 @note This method converts instances of CancellationException to errors.
 Other uncaught Kotlin exceptions are fatal.
*/
- (void)invokeP1:(id _Nullable)p1 p2:(id _Nullable)p2 p3:(id _Nullable)p3 p4:(id _Nullable)p4 p5:(id _Nullable)p5 p6:(id _Nullable)p6 completionHandler:(void (^)(id _Nullable, NSError * _Nullable))completionHandler __attribute__((swift_name("invoke(p1:p2:p3:p4:p5:p6:completionHandler:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKTypeProjection")))
@interface MVIMKotlinKTypeProjection : MVIMBase
- (instancetype)initWithVariance:(MVIMKotlinKVariance * _Nullable)variance type:(id<MVIMKotlinKType> _Nullable)type __attribute__((swift_name("init(variance:type:)"))) __attribute__((objc_designated_initializer));
- (MVIMKotlinKVariance * _Nullable)component1 __attribute__((swift_name("component1()")));
- (id<MVIMKotlinKType> _Nullable)component2 __attribute__((swift_name("component2()")));
- (MVIMKotlinKTypeProjection *)doCopyVariance:(MVIMKotlinKVariance * _Nullable)variance type:(id<MVIMKotlinKType> _Nullable)type __attribute__((swift_name("doCopy(variance:type:)")));
- (BOOL)isEqual:(id _Nullable)other __attribute__((swift_name("isEqual(_:)")));
- (NSUInteger)hash __attribute__((swift_name("hash()")));
- (NSString *)description __attribute__((swift_name("description()")));
@property (readonly) id<MVIMKotlinKType> _Nullable type __attribute__((swift_name("type")));
@property (readonly) MVIMKotlinKVariance * _Nullable variance __attribute__((swift_name("variance")));
@end;

__attribute__((swift_name("KotlinCharIterator")))
@interface MVIMKotlinCharIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (id)next__ __attribute__((swift_name("next_()")));
- (unichar)nextChar __attribute__((swift_name("nextChar()")));
@end;

__attribute__((swift_name("KotlinDoubleIterator")))
@interface MVIMKotlinDoubleIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMDouble *)next__ __attribute__((swift_name("next_()")));
- (double)nextDouble __attribute__((swift_name("nextDouble()")));
@end;

__attribute__((swift_name("KotlinFloatIterator")))
@interface MVIMKotlinFloatIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMFloat *)next__ __attribute__((swift_name("next_()")));
- (float)nextFloat __attribute__((swift_name("nextFloat()")));
@end;

__attribute__((swift_name("KotlinShortIterator")))
@interface MVIMKotlinShortIterator : MVIMBase <MVIMKotlinIterator>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (MVIMShort *)next__ __attribute__((swift_name("next_()")));
- (int16_t)nextShort __attribute__((swift_name("nextShort()")));
@end;

__attribute__((swift_name("KotlinTimeMark")))
@interface MVIMKotlinTimeMark : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (int64_t)elapsedNow __attribute__((swift_name("elapsedNow()")));
- (BOOL)hasNotPassedNow __attribute__((swift_name("hasNotPassedNow()")));
- (BOOL)hasPassedNow __attribute__((swift_name("hasPassedNow()")));
- (MVIMKotlinTimeMark *)minusDuration:(int64_t)duration __attribute__((swift_name("minus(duration:)")));
- (MVIMKotlinTimeMark *)plusDuration:(int64_t)duration __attribute__((swift_name("plus(duration:)")));
@end;

__attribute__((swift_name("KotlinDeferScope")))
@interface MVIMKotlinDeferScope : MVIMBase
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void)deferBlock:(void (^)(void))block __attribute__((swift_name("defer(block:)")));
@end;

__attribute__((swift_name("KotlinAutofreeScope")))
@interface MVIMKotlinAutofreeScope : MVIMKotlinDeferScope <MVIMKotlinNativePlacement>
- (instancetype)init __attribute__((swift_name("init()"))) __attribute__((objc_designated_initializer));
+ (instancetype)new __attribute__((availability(swift, unavailable, message="use object initializers instead")));
- (void *)doAllocSize:(int64_t)size align_:(int32_t)align __attribute__((swift_name("doAlloc(size:align_:)")));
@end;

__attribute__((objc_subclassing_restricted))
__attribute__((swift_name("KotlinKVariance")))
@interface MVIMKotlinKVariance : MVIMKotlinEnum<MVIMKotlinKVariance *>
+ (instancetype)alloc __attribute__((unavailable));
+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));
- (instancetype)initWithName:(NSString *)name ordinal:(int32_t)ordinal __attribute__((swift_name("init(name:ordinal:)"))) __attribute__((objc_designated_initializer)) __attribute__((unavailable));
@property (class, readonly) MVIMKotlinKVariance *invariant __attribute__((swift_name("invariant")));
@property (class, readonly) MVIMKotlinKVariance *in __attribute__((swift_name("in")));
@property (class, readonly) MVIMKotlinKVariance *out __attribute__((swift_name("out")));
+ (MVIMKotlinArray<MVIMKotlinKVariance *> *)values __attribute__((swift_name("values()")));
@end;

#pragma clang diagnostic pop
NS_ASSUME_NONNULL_END
